// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorflow.util.event

import tensorflow.util.event

@SerialVersionUID(0L)
final case class WorkerHeartbeatResponse(
                                          healthStatus: WorkerHealth = event.WorkerHealth.OK,
                                          workerLog: _root_.scala.Seq[Event] = _root_.scala.Seq.empty,
                                          hostname: _root_.scala.Predef.String = "",
                                          unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[WorkerHeartbeatResponse] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = healthStatus.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
        }
      };
      workerLog.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = hostname
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = healthStatus.value
        if (__v != 0) {
          _output__.writeEnum(1, __v)
        }
      };
      workerLog.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = hostname
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withHealthStatus(__v: WorkerHealth): WorkerHeartbeatResponse = copy(healthStatus = __v)
    def clearWorkerLog = copy(workerLog = _root_.scala.Seq.empty)
    def addWorkerLog(__vs: Event *): WorkerHeartbeatResponse = addAllWorkerLog(__vs)
    def addAllWorkerLog(__vs: Iterable[Event]): WorkerHeartbeatResponse = copy(workerLog = workerLog ++ __vs)
    def withWorkerLog(__v: _root_.scala.Seq[Event]): WorkerHeartbeatResponse = copy(workerLog = __v)
    def withHostname(__v: _root_.scala.Predef.String): WorkerHeartbeatResponse = copy(hostname = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = healthStatus.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => workerLog
        case 3 => {
          val __t = hostname
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(healthStatus.scalaValueDescriptor)
        case 2 => _root_.scalapb.descriptors.PRepeated(workerLog.iterator.map(_.toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PString(hostname)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: WorkerHeartbeatResponse.type = event.WorkerHeartbeatResponse
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.WorkerHeartbeatResponse])
}

object WorkerHeartbeatResponse extends scalapb.GeneratedMessageCompanion[WorkerHeartbeatResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[WorkerHeartbeatResponse] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): WorkerHeartbeatResponse = {
    var __healthStatus: WorkerHealth = event.WorkerHealth.OK
    val __workerLog: _root_.scala.collection.immutable.VectorBuilder[Event] = new _root_.scala.collection.immutable.VectorBuilder[Event]
    var __hostname: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __healthStatus = event.WorkerHealth.fromValue(_input__.readEnum())
        case 18 =>
          __workerLog += _root_.scalapb.LiteParser.readMessage[Event](_input__)
        case 26 =>
          __hostname = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    WorkerHeartbeatResponse(
        healthStatus = __healthStatus,
        workerLog = __workerLog.result(),
        hostname = __hostname,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[WorkerHeartbeatResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      WorkerHeartbeatResponse(
        healthStatus = event.WorkerHealth.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(event.WorkerHealth.OK.scalaValueDescriptor).number),
        workerLog = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[Event]]).getOrElse(_root_.scala.Seq.empty),
        hostname = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.util.event.EventProto.javaDescriptor.getMessageTypes().get(8)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.util.event.EventProto.scalaDescriptor.messages(8)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = event.Event
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => event.WorkerHealth
    }
  }
  lazy val defaultInstance = WorkerHeartbeatResponse(
    healthStatus = event.WorkerHealth.OK,
    workerLog = _root_.scala.Seq.empty,
    hostname = ""
  )
  implicit class WorkerHeartbeatResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, WorkerHeartbeatResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, WorkerHeartbeatResponse](_l) {
    def healthStatus: _root_.scalapb.lenses.Lens[UpperPB, WorkerHealth] = field(_.healthStatus)((c_, f_) => c_.copy(healthStatus = f_))
    def workerLog: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[Event]] = field(_.workerLog)((c_, f_) => c_.copy(workerLog = f_))
    def hostname: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.hostname)((c_, f_) => c_.copy(hostname = f_))
  }
  final val HEALTH_STATUS_FIELD_NUMBER = 1
  final val WORKER_LOG_FIELD_NUMBER = 2
  final val HOSTNAME_FIELD_NUMBER = 3
  def of(
          healthStatus: WorkerHealth,
          workerLog: _root_.scala.Seq[Event],
          hostname: _root_.scala.Predef.String
  ): WorkerHeartbeatResponse = WorkerHeartbeatResponse(
    healthStatus,
    workerLog,
    hostname
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.WorkerHeartbeatResponse])
}
