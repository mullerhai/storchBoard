// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorflow.util.event

import tensorflow.util.event

/** Protocol buffer used for logging messages to the events file.
  *
  * This was theoretically used by the defunct tensorboard_logging module, which
  * has been removed; this message is now deprecated and should not be used.
  */
@SerialVersionUID(0L)
@scala.deprecated(message="Marked as deprecated in proto file", "")
final case class LogMessage(
                             level: LogMessage.Level = event.LogMessage.Level.UNKNOWN,
                             message: _root_.scala.Predef.String = "",
                             unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[LogMessage] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = level.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
        }
      };
      
      {
        val __value = message
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = level.value
        if (__v != 0) {
          _output__.writeEnum(1, __v)
        }
      };
      {
        val __v = message
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withLevel(__v: LogMessage.Level): LogMessage = copy(level = __v)
    def withMessage(__v: _root_.scala.Predef.String): LogMessage = copy(message = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = level.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => {
          val __t = message
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(level.scalaValueDescriptor)
        case 2 => _root_.scalapb.descriptors.PString(message)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: LogMessage.type = event.LogMessage
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.LogMessage])
}

@scala.deprecated(message="Marked as deprecated in proto file", "")
object LogMessage extends scalapb.GeneratedMessageCompanion[LogMessage] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[LogMessage] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): LogMessage = {
    var __level: LogMessage.Level = event.LogMessage.Level.UNKNOWN
    var __message: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __level = event.LogMessage.Level.fromValue(_input__.readEnum())
        case 18 =>
          __message = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    LogMessage(
        level = __level,
        message = __message,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[LogMessage] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      LogMessage(
        level = event.LogMessage.Level.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(event.LogMessage.Level.UNKNOWN.scalaValueDescriptor).number),
        message = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.util.event.EventProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.util.event.EventProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => event.LogMessage.Level
    }
  }
  lazy val defaultInstance = LogMessage(
    level = event.LogMessage.Level.UNKNOWN,
    message = ""
  )
  @scala.deprecated(message="Marked as deprecated in proto file", "")
  @scala.deprecated(message="Marked as deprecated in proto file", "")
  sealed abstract class Level(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = LogMessage.Level
    type RecognizedType = LogMessage.Level.Recognized
    def isUnknown: _root_.scala.Boolean = false
    def isDebugging: _root_.scala.Boolean = false
    def isInfo: _root_.scala.Boolean = false
    def isWarn: _root_.scala.Boolean = false
    def isError: _root_.scala.Boolean = false
    def isFatal: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Level] = event.LogMessage.Level
    final def asRecognized: _root_.scala.Option[LogMessage.Level.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[LogMessage.Level.Recognized])
  }
  
  @scala.deprecated(message="Marked as deprecated in proto file", "")
  object Level extends _root_.scalapb.GeneratedEnumCompanion[Level] {
    @scala.deprecated(message="Marked as deprecated in proto file", "")
    sealed trait Recognized extends Level
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Level] = this
    
    @SerialVersionUID(0L)
    case object UNKNOWN extends Level(0) with Level.Recognized {
      val index = 0
      val name = "UNKNOWN"
      override def isUnknown: _root_.scala.Boolean = true
    }
    
    /** Note: The logging level 10 cannot be named DEBUG. Some software
      * projects compile their C/C++ code with -DDEBUG in debug builds. So the
      * C++ code generated from this file should not have an identifier named
      * DEBUG.
      */
    @SerialVersionUID(0L)
    case object DEBUGGING extends Level(10) with Level.Recognized {
      val index = 1
      val name = "DEBUGGING"
      override def isDebugging: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object INFO extends Level(20) with Level.Recognized {
      val index = 2
      val name = "INFO"
      override def isInfo: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object WARN extends Level(30) with Level.Recognized {
      val index = 3
      val name = "WARN"
      override def isWarn: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object ERROR extends Level(40) with Level.Recognized {
      val index = 4
      val name = "ERROR"
      override def isError: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object FATAL extends Level(50) with Level.Recognized {
      val index = 5
      val name = "FATAL"
      override def isFatal: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    @scala.deprecated(message="Marked as deprecated in proto file", "")
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends Level(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(UNKNOWN, DEBUGGING, INFO, WARN, ERROR, FATAL)
    def fromValue(__value: _root_.scala.Int): Level = __value match {
      case 0 => UNKNOWN
      case 10 => DEBUGGING
      case 20 => INFO
      case 30 => WARN
      case 40 => ERROR
      case 50 => FATAL
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = event.LogMessage.javaDescriptor.getEnumTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = event.LogMessage.scalaDescriptor.enums(0)
  }
  implicit class LogMessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, LogMessage]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, LogMessage](_l) {
    def level: _root_.scalapb.lenses.Lens[UpperPB, LogMessage.Level] = field(_.level)((c_, f_) => c_.copy(level = f_))
    def message: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.message)((c_, f_) => c_.copy(message = f_))
  }
  final val LEVEL_FIELD_NUMBER = 1
  final val MESSAGE_FIELD_NUMBER = 2
  def of(
          level: LogMessage.Level,
          message: _root_.scala.Predef.String
  ): LogMessage = LogMessage(
    level,
    message
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.LogMessage])
}
