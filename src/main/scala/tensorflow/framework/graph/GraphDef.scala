// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorflow.framework.graph

import tensorflow.framework.function.FunctionDefLibrary
import tensorflow.framework.graph_debug_info.GraphDebugInfo
import tensorflow.framework.node_def.NodeDef
import tensorflow.framework.versions.VersionDef
import tensorflow.framework.*

/** Represents the graph of operations
  *
  * @param versions
  *   Compatibility versions of the graph.  See core/public/version.h for version
  *   history.  The GraphDef version is distinct from the TensorFlow version, and
  *   each release of TensorFlow will support a range of GraphDef versions.
  * @param version
  *   Deprecated single version field; use versions above instead.  Since all
  *   GraphDef changes before "versions" was introduced were forward
  *   compatible, this field is entirely ignored.
  * @param library
  *   "library" provides user-defined functions.
  *  
  *   Naming:
  *     * library.function.name are in a flat namespace.
  *       NOTE: We may need to change it to be hierarchical to support
  *       different orgs. E.g.,
  *       { "/google/nn", { ... }},
  *       { "/google/vision", { ... }}
  *       { "/org_foo/module_bar", { ... }}
  *       map&lt;string, FunctionDefLib&gt; named_lib;
  *     * If node[i].op is the name of one function in "library",
  *       node[i] is deemed as a function call. Otherwise, node[i].op
  *       must be a primitive operation supported by the runtime.
  *  
  *  
  *   Function call semantics:
  *  
  *     * The callee may start execution as soon as some of its inputs
  *       are ready. The caller may want to use Tuple() mechanism to
  *       ensure all inputs are ready in the same time.
  *  
  *     * The consumer of return values may start executing as soon as
  *       the return values the consumer depends on are ready.  The
  *       consumer may want to use Tuple() mechanism to ensure the
  *       consumer does not start until all return values of the callee
  *       function are ready.
  * @param debugInfo
  *   Stack traces for the nodes in this graph.
  */
@SerialVersionUID(0L)
final case class GraphDef(
                           node: _root_.scala.Seq[NodeDef] = _root_.scala.Seq.empty,
                           versions: _root_.scala.Option[VersionDef] = _root_.scala.None,
                           @scala.deprecated(message="Marked as deprecated in proto file", "") version: _root_.scala.Int = 0,
                           library: _root_.scala.Option[FunctionDefLibrary] = _root_.scala.None,
                           debugInfo: _root_.scala.Option[GraphDebugInfo] = _root_.scala.None,
                           unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GraphDef] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      node.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (versions.isDefined) {
        val __value = versions.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = version
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
        }
      };
      if (library.isDefined) {
        val __value = library.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (debugInfo.isDefined) {
        val __value = debugInfo.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      node.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      library.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = version
        if (__v != 0) {
          _output__.writeInt32(3, __v)
        }
      };
      versions.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      debugInfo.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def clearNode = copy(node = _root_.scala.Seq.empty)
    def addNode(__vs: NodeDef *): GraphDef = addAllNode(__vs)
    def addAllNode(__vs: Iterable[NodeDef]): GraphDef = copy(node = node ++ __vs)
    def withNode(__v: _root_.scala.Seq[NodeDef]): GraphDef = copy(node = __v)
    def getVersions: VersionDef = versions.getOrElse(VersionDef.defaultInstance)
    def clearVersions: GraphDef = copy(versions = _root_.scala.None)
    def withVersions(__v: VersionDef): GraphDef = copy(versions = Option(__v))
    def withVersion(__v: _root_.scala.Int): GraphDef = copy(version = __v)
    def getLibrary: FunctionDefLibrary = library.getOrElse(FunctionDefLibrary.defaultInstance)
    def clearLibrary: GraphDef = copy(library = _root_.scala.None)
    def withLibrary(__v: FunctionDefLibrary): GraphDef = copy(library = Option(__v))
    def getDebugInfo: GraphDebugInfo = debugInfo.getOrElse(graph_debug_info.GraphDebugInfo.defaultInstance)
    def clearDebugInfo: GraphDef = copy(debugInfo = _root_.scala.None)
    def withDebugInfo(__v: GraphDebugInfo): GraphDef = copy(debugInfo = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => node
        case 4 => versions.orNull
        case 3 => {
          val __t = version
          if (__t != 0) __t else null
        }
        case 2 => library.orNull
        case 5 => debugInfo.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(node.iterator.map(_.toPMessage).toVector)
        case 4 => versions.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PInt(version)
        case 2 => library.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => debugInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: GraphDef.type = graph.GraphDef
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.GraphDef])
}

object GraphDef extends scalapb.GeneratedMessageCompanion[GraphDef] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[GraphDef] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): GraphDef = {
    val __node: _root_.scala.collection.immutable.VectorBuilder[NodeDef] = new _root_.scala.collection.immutable.VectorBuilder[NodeDef]
    var __versions: _root_.scala.Option[VersionDef] = _root_.scala.None
    var __version: _root_.scala.Int = 0
    var __library: _root_.scala.Option[FunctionDefLibrary] = _root_.scala.None
    var __debugInfo: _root_.scala.Option[GraphDebugInfo] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __node += _root_.scalapb.LiteParser.readMessage[NodeDef](_input__)
        case 34 =>
          __versions = _root_.scala.Option(__versions.fold(_root_.scalapb.LiteParser.readMessage[VersionDef](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 24 =>
          __version = _input__.readInt32()
        case 18 =>
          __library = _root_.scala.Option(__library.fold(_root_.scalapb.LiteParser.readMessage[FunctionDefLibrary](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 42 =>
          __debugInfo = _root_.scala.Option(__debugInfo.fold(_root_.scalapb.LiteParser.readMessage[GraphDebugInfo](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    GraphDef(
        node = __node.result(),
        versions = __versions,
        version = __version,
        library = __library,
        debugInfo = __debugInfo,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[GraphDef] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      GraphDef(
        node = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[NodeDef]]).getOrElse(_root_.scala.Seq.empty),
        versions = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[VersionDef]]),
        version = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        library = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[FunctionDefLibrary]]),
        debugInfo = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[GraphDebugInfo]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.framework.graph.GraphProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.framework.graph.GraphProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = node_def.NodeDef
      case 4 => __out = versions.VersionDef
      case 2 => __out = function.FunctionDefLibrary
      case 5 => __out = graph_debug_info.GraphDebugInfo
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = GraphDef(
    node = _root_.scala.Seq.empty,
    versions = _root_.scala.None,
    version = 0,
    library = _root_.scala.None,
    debugInfo = _root_.scala.None
  )
  implicit class GraphDefLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, GraphDef]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, GraphDef](_l) {
    def node: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[NodeDef]] = field(_.node)((c_, f_) => c_.copy(node = f_))
    def versions: _root_.scalapb.lenses.Lens[UpperPB, VersionDef] = field(_.getVersions)((c_, f_) => c_.copy(versions = _root_.scala.Option(f_)))
    def optionalVersions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[VersionDef]] = field(_.versions)((c_, f_) => c_.copy(versions = f_))
    def version: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.version)((c_, f_) => c_.copy(version = f_))
    def library: _root_.scalapb.lenses.Lens[UpperPB, FunctionDefLibrary] = field(_.getLibrary)((c_, f_) => c_.copy(library = _root_.scala.Option(f_)))
    def optionalLibrary: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[FunctionDefLibrary]] = field(_.library)((c_, f_) => c_.copy(library = f_))
    def debugInfo: _root_.scalapb.lenses.Lens[UpperPB, GraphDebugInfo] = field(_.getDebugInfo)((c_, f_) => c_.copy(debugInfo = _root_.scala.Option(f_)))
    def optionalDebugInfo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[GraphDebugInfo]] = field(_.debugInfo)((c_, f_) => c_.copy(debugInfo = f_))
  }
  final val NODE_FIELD_NUMBER = 1
  final val VERSIONS_FIELD_NUMBER = 4
  final val VERSION_FIELD_NUMBER = 3
  final val LIBRARY_FIELD_NUMBER = 2
  final val DEBUG_INFO_FIELD_NUMBER = 5
  def of(
          node: _root_.scala.Seq[NodeDef],
          versions: _root_.scala.Option[VersionDef],
          version: _root_.scala.Int,
          library: _root_.scala.Option[FunctionDefLibrary],
          debugInfo: _root_.scala.Option[GraphDebugInfo]
  ): GraphDef = GraphDef(
    node,
    versions,
    version,
    library,
    debugInfo
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.GraphDef])
}
