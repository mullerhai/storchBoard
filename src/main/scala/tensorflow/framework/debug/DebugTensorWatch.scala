// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorflow.framework.debug

import tensorflow.framework.debug

/** Option for watching a node in TensorFlow Debugger (tfdbg).
  *
  * @param nodeName
  *   Name of the node to watch.
  *   Use "*" for wildcard. But note: currently, regex is not supported in
  *   general.
  * @param outputSlot
  *   Output slot to watch.
  *   The semantics of output_slot == -1 is that all outputs of the node
  *   will be watched (i.e., a wildcard).
  *   Other negative values of output_slot are invalid and will lead to
  *   errors currently.
  * @param debugOps
  *   Name(s) of the debugging op(s).
  *   One or more than one probes on a tensor.
  *   e.g., {"DebugIdentity", "DebugNanCount"}
  * @param debugUrls
  *   URL(s) for debug targets(s).
  *  
  *   Supported URL formats are:
  *     - file:///foo/tfdbg_dump: Writes out Event content to file
  *       /foo/tfdbg_dump.  Assumes all directories can be created if they don't
  *       already exist.
  *     - grpc://localhost:11011: Sends an RPC request to an EventListener
  *       service running at localhost:11011 with the event.
  *     - memcbk:///event_key: Routes tensors to clients using the
  *       callback registered with the DebugCallbackRegistry for event_key.
  *  
  *   Each debug op listed in debug_ops will publish its output tensor (debug
  *   signal) to all URLs in debug_urls.
  *  
  *   N.B. Session::Run() supports concurrent invocations of the same inputs
  *   (feed keys), outputs and target nodes. If such concurrent invocations
  *   are to be debugged, the callers of Session::Run() must use distinct
  *   debug_urls to make sure that the streamed or dumped events do not overlap
  *   among the invocations.
  *   TODO(cais): More visible documentation of this in g3docs.
  * @param tolerateDebugOpCreationFailures
  *   Do not error out if debug op creation fails (e.g., due to dtype
  *   incompatibility). Instead, just log the failure.
  */
@SerialVersionUID(0L)
final case class DebugTensorWatch(
    nodeName: _root_.scala.Predef.String = "",
    outputSlot: _root_.scala.Int = 0,
    debugOps: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    debugUrls: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    tolerateDebugOpCreationFailures: _root_.scala.Boolean = false,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[DebugTensorWatch] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = nodeName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = outputSlot
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
        }
      };
      debugOps.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      }
      debugUrls.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
      }
      
      {
        val __value = tolerateDebugOpCreationFailures
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = nodeName
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = outputSlot
        if (__v != 0) {
          _output__.writeInt32(2, __v)
        }
      };
      debugOps.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      debugUrls.foreach { __v =>
        val __m = __v
        _output__.writeString(4, __m)
      };
      {
        val __v = tolerateDebugOpCreationFailures
        if (__v != false) {
          _output__.writeBool(5, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withNodeName(__v: _root_.scala.Predef.String): DebugTensorWatch = copy(nodeName = __v)
    def withOutputSlot(__v: _root_.scala.Int): DebugTensorWatch = copy(outputSlot = __v)
    def clearDebugOps = copy(debugOps = _root_.scala.Seq.empty)
    def addDebugOps(__vs: _root_.scala.Predef.String *): DebugTensorWatch = addAllDebugOps(__vs)
    def addAllDebugOps(__vs: Iterable[_root_.scala.Predef.String]): DebugTensorWatch = copy(debugOps = debugOps ++ __vs)
    def withDebugOps(__v: _root_.scala.Seq[_root_.scala.Predef.String]): DebugTensorWatch = copy(debugOps = __v)
    def clearDebugUrls = copy(debugUrls = _root_.scala.Seq.empty)
    def addDebugUrls(__vs: _root_.scala.Predef.String *): DebugTensorWatch = addAllDebugUrls(__vs)
    def addAllDebugUrls(__vs: Iterable[_root_.scala.Predef.String]): DebugTensorWatch = copy(debugUrls = debugUrls ++ __vs)
    def withDebugUrls(__v: _root_.scala.Seq[_root_.scala.Predef.String]): DebugTensorWatch = copy(debugUrls = __v)
    def withTolerateDebugOpCreationFailures(__v: _root_.scala.Boolean): DebugTensorWatch = copy(tolerateDebugOpCreationFailures = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = nodeName
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = outputSlot
          if (__t != 0) __t else null
        }
        case 3 => debugOps
        case 4 => debugUrls
        case 5 => {
          val __t = tolerateDebugOpCreationFailures
          if (__t != false) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(nodeName)
        case 2 => _root_.scalapb.descriptors.PInt(outputSlot)
        case 3 => _root_.scalapb.descriptors.PRepeated(debugOps.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(debugUrls.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 5 => _root_.scalapb.descriptors.PBoolean(tolerateDebugOpCreationFailures)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: DebugTensorWatch.type = debug.DebugTensorWatch
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.DebugTensorWatch])
}

object DebugTensorWatch extends scalapb.GeneratedMessageCompanion[DebugTensorWatch] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[DebugTensorWatch] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): DebugTensorWatch = {
    var __nodeName: _root_.scala.Predef.String = ""
    var __outputSlot: _root_.scala.Int = 0
    val __debugOps: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __debugUrls: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __tolerateDebugOpCreationFailures: _root_.scala.Boolean = false
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __nodeName = _input__.readStringRequireUtf8()
        case 16 =>
          __outputSlot = _input__.readInt32()
        case 26 =>
          __debugOps += _input__.readStringRequireUtf8()
        case 34 =>
          __debugUrls += _input__.readStringRequireUtf8()
        case 40 =>
          __tolerateDebugOpCreationFailures = _input__.readBool()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    DebugTensorWatch(
        nodeName = __nodeName,
        outputSlot = __outputSlot,
        debugOps = __debugOps.result(),
        debugUrls = __debugUrls.result(),
        tolerateDebugOpCreationFailures = __tolerateDebugOpCreationFailures,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[DebugTensorWatch] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      DebugTensorWatch(
        nodeName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        outputSlot = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        debugOps = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        debugUrls = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        tolerateDebugOpCreationFailures = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.framework.debug.DebugProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.framework.debug.DebugProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = DebugTensorWatch(
    nodeName = "",
    outputSlot = 0,
    debugOps = _root_.scala.Seq.empty,
    debugUrls = _root_.scala.Seq.empty,
    tolerateDebugOpCreationFailures = false
  )
  implicit class DebugTensorWatchLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, DebugTensorWatch]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, DebugTensorWatch](_l) {
    def nodeName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.nodeName)((c_, f_) => c_.copy(nodeName = f_))
    def outputSlot: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.outputSlot)((c_, f_) => c_.copy(outputSlot = f_))
    def debugOps: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.debugOps)((c_, f_) => c_.copy(debugOps = f_))
    def debugUrls: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.debugUrls)((c_, f_) => c_.copy(debugUrls = f_))
    def tolerateDebugOpCreationFailures: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.tolerateDebugOpCreationFailures)((c_, f_) => c_.copy(tolerateDebugOpCreationFailures = f_))
  }
  final val NODE_NAME_FIELD_NUMBER = 1
  final val OUTPUT_SLOT_FIELD_NUMBER = 2
  final val DEBUG_OPS_FIELD_NUMBER = 3
  final val DEBUG_URLS_FIELD_NUMBER = 4
  final val TOLERATE_DEBUG_OP_CREATION_FAILURES_FIELD_NUMBER = 5
  def of(
    nodeName: _root_.scala.Predef.String,
    outputSlot: _root_.scala.Int,
    debugOps: _root_.scala.Seq[_root_.scala.Predef.String],
    debugUrls: _root_.scala.Seq[_root_.scala.Predef.String],
    tolerateDebugOpCreationFailures: _root_.scala.Boolean
  ): DebugTensorWatch = DebugTensorWatch(
    nodeName,
    outputSlot,
    debugOps,
    debugUrls,
    tolerateDebugOpCreationFailures
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.DebugTensorWatch])
}
