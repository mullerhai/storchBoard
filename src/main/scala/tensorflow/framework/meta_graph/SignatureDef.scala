// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorflow.framework.meta_graph

import tensorflow.framework.tensor.TensorProto
import tensorflow.framework.{meta_graph, tensor}

/** SignatureDef defines the signature of a computation supported by a TensorFlow
  * graph.
  *
  * @param inputs
  *   Named input parameters.
  * @param outputs
  *   Named output parameters.
  * @param methodName
  *   Deprecated: TensorFlow 2 always sets this to a fixed value;
  *   open-source TF Serving stopped checking by default since release 2.4.
  *  
  *   In TensorFlow 1, the method_name enabled users to mark a SignatureDef as
  *   supporting a particular method. Multiple SignatureDefs in a single
  *   MetaGraphDef could have the same method_name (e.g., to support multi-headed
  *   computation).
  * @param defaults
  *   Named input to corresponding default values if any.
  */
@SerialVersionUID(0L)
final case class SignatureDef(
                               inputs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, TensorInfo] = _root_.scala.collection.immutable.Map.empty,
                               outputs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, TensorInfo] = _root_.scala.collection.immutable.Map.empty,
                               methodName: _root_.scala.Predef.String = "",
                               defaults: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, TensorProto] = _root_.scala.collection.immutable.Map.empty,
                               unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SignatureDef] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      inputs.foreach { __item =>
        val __value = meta_graph.SignatureDef._typemapper_inputs.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      outputs.foreach { __item =>
        val __value = meta_graph.SignatureDef._typemapper_outputs.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = methodName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      defaults.foreach { __item =>
        val __value = meta_graph.SignatureDef._typemapper_defaults.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      inputs.foreach { __v =>
        val __m = meta_graph.SignatureDef._typemapper_inputs.toBase(__v)
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      outputs.foreach { __v =>
        val __m = meta_graph.SignatureDef._typemapper_outputs.toBase(__v)
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = methodName
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      defaults.foreach { __v =>
        val __m = meta_graph.SignatureDef._typemapper_defaults.toBase(__v)
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def clearInputs = copy(inputs = _root_.scala.collection.immutable.Map.empty)
    def addInputs(__vs: (_root_.scala.Predef.String, TensorInfo) *): SignatureDef = addAllInputs(__vs)
    def addAllInputs(__vs: Iterable[(_root_.scala.Predef.String, TensorInfo)]): SignatureDef = copy(inputs = inputs ++ __vs)
    def withInputs(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, TensorInfo]): SignatureDef = copy(inputs = __v)
    def clearOutputs = copy(outputs = _root_.scala.collection.immutable.Map.empty)
    def addOutputs(__vs: (_root_.scala.Predef.String, TensorInfo) *): SignatureDef = addAllOutputs(__vs)
    def addAllOutputs(__vs: Iterable[(_root_.scala.Predef.String, TensorInfo)]): SignatureDef = copy(outputs = outputs ++ __vs)
    def withOutputs(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, TensorInfo]): SignatureDef = copy(outputs = __v)
    def withMethodName(__v: _root_.scala.Predef.String): SignatureDef = copy(methodName = __v)
    def clearDefaults = copy(defaults = _root_.scala.collection.immutable.Map.empty)
    def addDefaults(__vs: (_root_.scala.Predef.String, TensorProto) *): SignatureDef = addAllDefaults(__vs)
    def addAllDefaults(__vs: Iterable[(_root_.scala.Predef.String, TensorProto)]): SignatureDef = copy(defaults = defaults ++ __vs)
    def withDefaults(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, TensorProto]): SignatureDef = copy(defaults = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => inputs.iterator.map(meta_graph.SignatureDef._typemapper_inputs.toBase(_)).toSeq
        case 2 => outputs.iterator.map(meta_graph.SignatureDef._typemapper_outputs.toBase(_)).toSeq
        case 3 => {
          val __t = methodName
          if (__t != "") __t else null
        }
        case 4 => defaults.iterator.map(meta_graph.SignatureDef._typemapper_defaults.toBase(_)).toSeq
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(inputs.iterator.map(meta_graph.SignatureDef._typemapper_inputs.toBase(_).toPMessage).toVector)
        case 2 => _root_.scalapb.descriptors.PRepeated(outputs.iterator.map(meta_graph.SignatureDef._typemapper_outputs.toBase(_).toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PString(methodName)
        case 4 => _root_.scalapb.descriptors.PRepeated(defaults.iterator.map(meta_graph.SignatureDef._typemapper_defaults.toBase(_).toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: SignatureDef.type = meta_graph.SignatureDef
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.SignatureDef])
}

object SignatureDef extends scalapb.GeneratedMessageCompanion[SignatureDef] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[SignatureDef] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): SignatureDef = {
    val __inputs: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, TensorInfo), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, TensorInfo]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, TensorInfo]
    val __outputs: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, TensorInfo), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, TensorInfo]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, TensorInfo]
    var __methodName: _root_.scala.Predef.String = ""
    val __defaults: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, TensorProto), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, TensorProto]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, TensorProto]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __inputs += meta_graph.SignatureDef._typemapper_inputs.toCustom(_root_.scalapb.LiteParser.readMessage[SignatureDef.InputsEntry](_input__))
        case 18 =>
          __outputs += meta_graph.SignatureDef._typemapper_outputs.toCustom(_root_.scalapb.LiteParser.readMessage[SignatureDef.OutputsEntry](_input__))
        case 26 =>
          __methodName = _input__.readStringRequireUtf8()
        case 34 =>
          __defaults += meta_graph.SignatureDef._typemapper_defaults.toCustom(_root_.scalapb.LiteParser.readMessage[SignatureDef.DefaultsEntry](_input__))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    SignatureDef(
        inputs = __inputs.result(),
        outputs = __outputs.result(),
        methodName = __methodName,
        defaults = __defaults.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[SignatureDef] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      SignatureDef(
        inputs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[SignatureDef.InputsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(meta_graph.SignatureDef._typemapper_inputs.toCustom(_)).toMap,
        outputs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[SignatureDef.OutputsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(meta_graph.SignatureDef._typemapper_outputs.toCustom(_)).toMap,
        methodName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        defaults = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[SignatureDef.DefaultsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(meta_graph.SignatureDef._typemapper_defaults.toCustom(_)).toMap
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.framework.meta_graph.MetaGraphProto.javaDescriptor.getMessageTypes().get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.framework.meta_graph.MetaGraphProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = meta_graph.SignatureDef.InputsEntry
      case 2 => __out = meta_graph.SignatureDef.OutputsEntry
      case 4 => __out = meta_graph.SignatureDef.DefaultsEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      meta_graph.SignatureDef.InputsEntry,
      meta_graph.SignatureDef.OutputsEntry,
      meta_graph.SignatureDef.DefaultsEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = SignatureDef(
    inputs = _root_.scala.collection.immutable.Map.empty,
    outputs = _root_.scala.collection.immutable.Map.empty,
    methodName = "",
    defaults = _root_.scala.collection.immutable.Map.empty
  )
  @SerialVersionUID(0L)
  final case class InputsEntry(
                                key: _root_.scala.Predef.String = "",
                                value: _root_.scala.Option[TensorInfo] = _root_.scala.None,
                                unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[InputsEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): InputsEntry = copy(key = __v)
      def getValue: TensorInfo = value.getOrElse(meta_graph.TensorInfo.defaultInstance)
      def clearValue: InputsEntry = copy(value = _root_.scala.None)
      def withValue(__v: TensorInfo): InputsEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: SignatureDef.InputsEntry.type = meta_graph.SignatureDef.InputsEntry
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.SignatureDef.InputsEntry])
  }
  
  object InputsEntry extends scalapb.GeneratedMessageCompanion[SignatureDef.InputsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[SignatureDef.InputsEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): SignatureDef.InputsEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Option[TensorInfo] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = _root_.scala.Option(__value.fold(_root_.scalapb.LiteParser.readMessage[TensorInfo](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      meta_graph.SignatureDef.InputsEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[SignatureDef.InputsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        meta_graph.SignatureDef.InputsEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[TensorInfo]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = meta_graph.SignatureDef.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = meta_graph.SignatureDef.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = meta_graph.TensorInfo
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = meta_graph.SignatureDef.InputsEntry(
      key = "",
      value = _root_.scala.None
    )
    implicit class InputsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, SignatureDef.InputsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, SignatureDef.InputsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, TensorInfo] = field(_.getValue)((c_, f_) => c_.copy(value = _root_.scala.Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[TensorInfo]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[SignatureDef.InputsEntry, (_root_.scala.Predef.String, TensorInfo)] =
      _root_.scalapb.TypeMapper[SignatureDef.InputsEntry, (_root_.scala.Predef.String, TensorInfo)](__m => (__m.key, __m.getValue))(__p => meta_graph.SignatureDef.InputsEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Option[TensorInfo]
    ): SignatureDef.InputsEntry = meta_graph.SignatureDef.InputsEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.SignatureDef.InputsEntry])
  }
  
  @SerialVersionUID(0L)
  final case class OutputsEntry(
                                 key: _root_.scala.Predef.String = "",
                                 value: _root_.scala.Option[TensorInfo] = _root_.scala.None,
                                 unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[OutputsEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): OutputsEntry = copy(key = __v)
      def getValue: TensorInfo = value.getOrElse(meta_graph.TensorInfo.defaultInstance)
      def clearValue: OutputsEntry = copy(value = _root_.scala.None)
      def withValue(__v: TensorInfo): OutputsEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: SignatureDef.OutputsEntry.type = meta_graph.SignatureDef.OutputsEntry
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.SignatureDef.OutputsEntry])
  }
  
  object OutputsEntry extends scalapb.GeneratedMessageCompanion[SignatureDef.OutputsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[SignatureDef.OutputsEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): SignatureDef.OutputsEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Option[TensorInfo] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = _root_.scala.Option(__value.fold(_root_.scalapb.LiteParser.readMessage[TensorInfo](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      meta_graph.SignatureDef.OutputsEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[SignatureDef.OutputsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        meta_graph.SignatureDef.OutputsEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[TensorInfo]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = meta_graph.SignatureDef.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = meta_graph.SignatureDef.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = meta_graph.TensorInfo
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = meta_graph.SignatureDef.OutputsEntry(
      key = "",
      value = _root_.scala.None
    )
    implicit class OutputsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, SignatureDef.OutputsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, SignatureDef.OutputsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, TensorInfo] = field(_.getValue)((c_, f_) => c_.copy(value = _root_.scala.Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[TensorInfo]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[SignatureDef.OutputsEntry, (_root_.scala.Predef.String, TensorInfo)] =
      _root_.scalapb.TypeMapper[SignatureDef.OutputsEntry, (_root_.scala.Predef.String, TensorInfo)](__m => (__m.key, __m.getValue))(__p => meta_graph.SignatureDef.OutputsEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Option[TensorInfo]
    ): SignatureDef.OutputsEntry = meta_graph.SignatureDef.OutputsEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.SignatureDef.OutputsEntry])
  }
  
  @SerialVersionUID(0L)
  final case class DefaultsEntry(
                                  key: _root_.scala.Predef.String = "",
                                  value: _root_.scala.Option[TensorProto] = _root_.scala.None,
                                  unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[DefaultsEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): DefaultsEntry = copy(key = __v)
      def getValue: TensorProto = value.getOrElse(tensor.TensorProto.defaultInstance)
      def clearValue: DefaultsEntry = copy(value = _root_.scala.None)
      def withValue(__v: TensorProto): DefaultsEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: SignatureDef.DefaultsEntry.type = meta_graph.SignatureDef.DefaultsEntry
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.SignatureDef.DefaultsEntry])
  }
  
  object DefaultsEntry extends scalapb.GeneratedMessageCompanion[SignatureDef.DefaultsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[SignatureDef.DefaultsEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): SignatureDef.DefaultsEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Option[TensorProto] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = _root_.scala.Option(__value.fold(_root_.scalapb.LiteParser.readMessage[TensorProto](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      meta_graph.SignatureDef.DefaultsEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[SignatureDef.DefaultsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        meta_graph.SignatureDef.DefaultsEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[TensorProto]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = meta_graph.SignatureDef.javaDescriptor.getNestedTypes().get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = meta_graph.SignatureDef.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = tensor.TensorProto
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = meta_graph.SignatureDef.DefaultsEntry(
      key = "",
      value = _root_.scala.None
    )
    implicit class DefaultsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, SignatureDef.DefaultsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, SignatureDef.DefaultsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, TensorProto] = field(_.getValue)((c_, f_) => c_.copy(value = _root_.scala.Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[TensorProto]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[SignatureDef.DefaultsEntry, (_root_.scala.Predef.String, TensorProto)] =
      _root_.scalapb.TypeMapper[SignatureDef.DefaultsEntry, (_root_.scala.Predef.String, TensorProto)](__m => (__m.key, __m.getValue))(__p => meta_graph.SignatureDef.DefaultsEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Option[TensorProto]
    ): SignatureDef.DefaultsEntry = meta_graph.SignatureDef.DefaultsEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.SignatureDef.DefaultsEntry])
  }
  
  implicit class SignatureDefLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, SignatureDef]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, SignatureDef](_l) {
    def inputs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, TensorInfo]] = field(_.inputs)((c_, f_) => c_.copy(inputs = f_))
    def outputs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, TensorInfo]] = field(_.outputs)((c_, f_) => c_.copy(outputs = f_))
    def methodName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.methodName)((c_, f_) => c_.copy(methodName = f_))
    def defaults: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, TensorProto]] = field(_.defaults)((c_, f_) => c_.copy(defaults = f_))
  }
  final val INPUTS_FIELD_NUMBER = 1
  final val OUTPUTS_FIELD_NUMBER = 2
  final val METHOD_NAME_FIELD_NUMBER = 3
  final val DEFAULTS_FIELD_NUMBER = 4
  @transient
  private[meta_graph] val _typemapper_inputs: _root_.scalapb.TypeMapper[SignatureDef.InputsEntry, (_root_.scala.Predef.String, TensorInfo)] = implicitly[_root_.scalapb.TypeMapper[SignatureDef.InputsEntry, (_root_.scala.Predef.String, TensorInfo)]]
  @transient
  private[meta_graph] val _typemapper_outputs: _root_.scalapb.TypeMapper[SignatureDef.OutputsEntry, (_root_.scala.Predef.String, TensorInfo)] = implicitly[_root_.scalapb.TypeMapper[SignatureDef.OutputsEntry, (_root_.scala.Predef.String, TensorInfo)]]
  @transient
  private[meta_graph] val _typemapper_defaults: _root_.scalapb.TypeMapper[SignatureDef.DefaultsEntry, (_root_.scala.Predef.String, TensorProto)] = implicitly[_root_.scalapb.TypeMapper[SignatureDef.DefaultsEntry, (_root_.scala.Predef.String, TensorProto)]]
  def of(
          inputs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, TensorInfo],
          outputs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, TensorInfo],
          methodName: _root_.scala.Predef.String,
          defaults: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, TensorProto]
  ): SignatureDef = SignatureDef(
    inputs,
    outputs,
    methodName,
    defaults
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.SignatureDef])
}
