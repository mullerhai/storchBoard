// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorflow.framework.meta_graph

import tensorflow.framework.tensor_shape.TensorShapeProto
import tensorflow.framework.types.DataType
import tensorflow.framework.{meta_graph, tensor_shape, types}

/** Information about a Tensor necessary for feeding or retrieval.
  *
  * @param tensorShape
  *   The static shape should be recorded here, to the extent that it can
  *   be known in advance.  In the case of a SparseTensor, this field describes
  *   the logical shape of the represented tensor (aka dense_shape).
  */
@SerialVersionUID(0L)
final case class TensorInfo(
                             encoding: TensorInfo.Encoding = meta_graph.TensorInfo.Encoding.Empty,
                             dtype: DataType = types.DataType.DT_INVALID,
                             tensorShape: _root_.scala.Option[TensorShapeProto] = _root_.scala.None,
                             unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TensorInfo] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (encoding.name.isDefined) {
        val __value = encoding.name.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      };
      if (encoding.cooSparse.isDefined) {
        val __value = encoding.cooSparse.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (encoding.compositeTensor.isDefined) {
        val __value = encoding.compositeTensor.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = dtype.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value)
        }
      };
      if (tensorShape.isDefined) {
        val __value = tensorShape.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      encoding.name.foreach { __v =>
        val __m = __v
        _output__.writeString(1, __m)
      };
      {
        val __v = dtype.value
        if (__v != 0) {
          _output__.writeEnum(2, __v)
        }
      };
      tensorShape.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      encoding.cooSparse.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      encoding.compositeTensor.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getName: _root_.scala.Predef.String = encoding.name.getOrElse("")
    def withName(__v: _root_.scala.Predef.String): TensorInfo = copy(encoding = meta_graph.TensorInfo.Encoding.Name(__v))
    def getCooSparse: TensorInfo.CooSparse = encoding.cooSparse.getOrElse(meta_graph.TensorInfo.CooSparse.defaultInstance)
    def withCooSparse(__v: TensorInfo.CooSparse): TensorInfo = copy(encoding = meta_graph.TensorInfo.Encoding.CooSparse(__v))
    def getCompositeTensor: TensorInfo.CompositeTensor = encoding.compositeTensor.getOrElse(meta_graph.TensorInfo.CompositeTensor.defaultInstance)
    def withCompositeTensor(__v: TensorInfo.CompositeTensor): TensorInfo = copy(encoding = meta_graph.TensorInfo.Encoding.CompositeTensor(__v))
    def withDtype(__v: DataType): TensorInfo = copy(dtype = __v)
    def getTensorShape: TensorShapeProto = tensorShape.getOrElse(tensor_shape.TensorShapeProto.defaultInstance)
    def clearTensorShape: TensorInfo = copy(tensorShape = _root_.scala.None)
    def withTensorShape(__v: TensorShapeProto): TensorInfo = copy(tensorShape = Option(__v))
    def clearEncoding: TensorInfo = copy(encoding = meta_graph.TensorInfo.Encoding.Empty)
    def withEncoding(__v: TensorInfo.Encoding): TensorInfo = copy(encoding = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => encoding.name.orNull
        case 4 => encoding.cooSparse.orNull
        case 5 => encoding.compositeTensor.orNull
        case 2 => {
          val __t = dtype.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 3 => tensorShape.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => encoding.name.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => encoding.cooSparse.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => encoding.compositeTensor.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PEnum(dtype.scalaValueDescriptor)
        case 3 => tensorShape.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: TensorInfo.type = meta_graph.TensorInfo
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.TensorInfo])
}

object TensorInfo extends scalapb.GeneratedMessageCompanion[TensorInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[TensorInfo] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): TensorInfo = {
    var __dtype: DataType = DataType.DT_INVALID
    var __tensorShape: _root_.scala.Option[TensorShapeProto] = _root_.scala.None
    var __encoding: TensorInfo.Encoding = meta_graph.TensorInfo.Encoding.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __encoding = meta_graph.TensorInfo.Encoding.Name(_input__.readStringRequireUtf8())
        case 34 =>
          __encoding = meta_graph.TensorInfo.Encoding.CooSparse(__encoding.cooSparse.fold(_root_.scalapb.LiteParser.readMessage[TensorInfo.CooSparse](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 42 =>
          __encoding = meta_graph.TensorInfo.Encoding.CompositeTensor(__encoding.compositeTensor.fold(_root_.scalapb.LiteParser.readMessage[TensorInfo.CompositeTensor](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 16 =>
          __dtype = types.DataType.fromValue(_input__.readEnum())
        case 26 =>
          __tensorShape = _root_.scala.Option(__tensorShape.fold(_root_.scalapb.LiteParser.readMessage[TensorShapeProto](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    TensorInfo(
        dtype = __dtype,
        tensorShape = __tensorShape,
        encoding = __encoding,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[TensorInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      TensorInfo(
        dtype = types.DataType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(types.DataType.DT_INVALID.scalaValueDescriptor).number),
        tensorShape = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[TensorShapeProto]]),
        encoding = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(meta_graph.TensorInfo.Encoding.Name(_))
            .orElse[TensorInfo.Encoding](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[TensorInfo.CooSparse]]).map(meta_graph.TensorInfo.Encoding.CooSparse(_)))
            .orElse[TensorInfo.Encoding](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[TensorInfo.CompositeTensor]]).map(meta_graph.TensorInfo.Encoding.CompositeTensor(_)))
            .getOrElse(meta_graph.TensorInfo.Encoding.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.framework.meta_graph.MetaGraphProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.framework.meta_graph.MetaGraphProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = meta_graph.TensorInfo.CooSparse
      case 5 => __out = meta_graph.TensorInfo.CompositeTensor
      case 3 => __out = tensor_shape.TensorShapeProto
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      meta_graph.TensorInfo.CooSparse,
      meta_graph.TensorInfo.CompositeTensor
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => types.DataType
    }
  }
  lazy val defaultInstance = TensorInfo(
    dtype = types.DataType.DT_INVALID,
    tensorShape = _root_.scala.None,
    encoding = meta_graph.TensorInfo.Encoding.Empty
  )
  sealed abstract class Encoding extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isName: _root_.scala.Boolean = false
    def isCooSparse: _root_.scala.Boolean = false
    def isCompositeTensor: _root_.scala.Boolean = false
    def name: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    def cooSparse: _root_.scala.Option[TensorInfo.CooSparse] = _root_.scala.None
    def compositeTensor: _root_.scala.Option[TensorInfo.CompositeTensor] = _root_.scala.None
  }
  object Encoding {
    @SerialVersionUID(0L)
    case object Empty extends TensorInfo.Encoding {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Name(value: _root_.scala.Predef.String) extends TensorInfo.Encoding {
      type ValueType = _root_.scala.Predef.String
      override def isName: _root_.scala.Boolean = true
      override def name: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class CooSparse(value: TensorInfo.CooSparse) extends TensorInfo.Encoding {
      type ValueType = TensorInfo.CooSparse
      override def isCooSparse: _root_.scala.Boolean = true
      override def cooSparse: _root_.scala.Option[TensorInfo.CooSparse] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class CompositeTensor(value: TensorInfo.CompositeTensor) extends TensorInfo.Encoding {
      type ValueType = TensorInfo.CompositeTensor
      override def isCompositeTensor: _root_.scala.Boolean = true
      override def compositeTensor: _root_.scala.Option[TensorInfo.CompositeTensor] = Some(value)
      override def number: _root_.scala.Int = 5
    }
  }
  /** For sparse tensors, The COO encoding stores a triple of values, indices,
    * and shape.
    *
    * @param valuesTensorName
    *   The shape of the values Tensor is [?].  Its dtype must be the dtype of
    *   the SparseTensor as a whole, given in the enclosing TensorInfo.
    * @param indicesTensorName
    *   The indices Tensor must have dtype int64 and shape [?, ?].
    * @param denseShapeTensorName
    *   The dynamic logical shape represented by the SparseTensor is recorded in
    *   the Tensor referenced here.  It must have dtype int64 and shape [?].
    */
  @SerialVersionUID(0L)
  final case class CooSparse(
      valuesTensorName: _root_.scala.Predef.String = "",
      indicesTensorName: _root_.scala.Predef.String = "",
      denseShapeTensorName: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CooSparse] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = valuesTensorName
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = indicesTensorName
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        
        {
          val __value = denseShapeTensorName
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = valuesTensorName
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = indicesTensorName
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        {
          val __v = denseShapeTensorName
          if (!__v.isEmpty) {
            _output__.writeString(3, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withValuesTensorName(__v: _root_.scala.Predef.String): CooSparse = copy(valuesTensorName = __v)
      def withIndicesTensorName(__v: _root_.scala.Predef.String): CooSparse = copy(indicesTensorName = __v)
      def withDenseShapeTensorName(__v: _root_.scala.Predef.String): CooSparse = copy(denseShapeTensorName = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = valuesTensorName
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = indicesTensorName
            if (__t != "") __t else null
          }
          case 3 => {
            val __t = denseShapeTensorName
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(valuesTensorName)
          case 2 => _root_.scalapb.descriptors.PString(indicesTensorName)
          case 3 => _root_.scalapb.descriptors.PString(denseShapeTensorName)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: TensorInfo.CooSparse.type = meta_graph.TensorInfo.CooSparse
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.TensorInfo.CooSparse])
  }
  
  object CooSparse extends scalapb.GeneratedMessageCompanion[TensorInfo.CooSparse] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[TensorInfo.CooSparse] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): TensorInfo.CooSparse = {
      var __valuesTensorName: _root_.scala.Predef.String = ""
      var __indicesTensorName: _root_.scala.Predef.String = ""
      var __denseShapeTensorName: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __valuesTensorName = _input__.readStringRequireUtf8()
          case 18 =>
            __indicesTensorName = _input__.readStringRequireUtf8()
          case 26 =>
            __denseShapeTensorName = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      meta_graph.TensorInfo.CooSparse(
          valuesTensorName = __valuesTensorName,
          indicesTensorName = __indicesTensorName,
          denseShapeTensorName = __denseShapeTensorName,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[TensorInfo.CooSparse] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        meta_graph.TensorInfo.CooSparse(
          valuesTensorName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          indicesTensorName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          denseShapeTensorName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = meta_graph.TensorInfo.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = meta_graph.TensorInfo.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = meta_graph.TensorInfo.CooSparse(
      valuesTensorName = "",
      indicesTensorName = "",
      denseShapeTensorName = ""
    )
    implicit class CooSparseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, TensorInfo.CooSparse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, TensorInfo.CooSparse](_l) {
      def valuesTensorName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.valuesTensorName)((c_, f_) => c_.copy(valuesTensorName = f_))
      def indicesTensorName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.indicesTensorName)((c_, f_) => c_.copy(indicesTensorName = f_))
      def denseShapeTensorName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.denseShapeTensorName)((c_, f_) => c_.copy(denseShapeTensorName = f_))
    }
    final val VALUES_TENSOR_NAME_FIELD_NUMBER = 1
    final val INDICES_TENSOR_NAME_FIELD_NUMBER = 2
    final val DENSE_SHAPE_TENSOR_NAME_FIELD_NUMBER = 3
    def of(
      valuesTensorName: _root_.scala.Predef.String,
      indicesTensorName: _root_.scala.Predef.String,
      denseShapeTensorName: _root_.scala.Predef.String
    ): TensorInfo.CooSparse = meta_graph.TensorInfo.CooSparse(
      valuesTensorName,
      indicesTensorName,
      denseShapeTensorName
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.TensorInfo.CooSparse])
  }
  
  /** Generic encoding for composite tensors.
    *
    * @param typeSpec
    *   The serialized TypeSpec for the composite tensor.
    * @param components
    *   A TensorInfo for each flattened component tensor.
    */
  @SerialVersionUID(0L)
  final case class CompositeTensor(
                                    typeSpec: _root_.scala.Option[tensorboard.struct.TypeSpecProto] = _root_.scala.None,
                                    components: _root_.scala.Seq[TensorInfo] = _root_.scala.Seq.empty,
                                    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CompositeTensor] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (typeSpec.isDefined) {
          val __value = typeSpec.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        components.foreach { __item =>
          val __value = __item
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        typeSpec.foreach { __v =>
          val __m = __v
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        components.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def getTypeSpec: tensorboard.struct.TypeSpecProto = typeSpec.getOrElse(tensorboard.struct.TypeSpecProto.defaultInstance)
      def clearTypeSpec: CompositeTensor = copy(typeSpec = _root_.scala.None)
      def withTypeSpec(__v: tensorboard.struct.TypeSpecProto): CompositeTensor = copy(typeSpec = Option(__v))
      def clearComponents = copy(components = _root_.scala.Seq.empty)
      def addComponents(__vs: TensorInfo *): CompositeTensor = addAllComponents(__vs)
      def addAllComponents(__vs: Iterable[TensorInfo]): CompositeTensor = copy(components = components ++ __vs)
      def withComponents(__v: _root_.scala.Seq[TensorInfo]): CompositeTensor = copy(components = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => typeSpec.orNull
          case 2 => components
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => typeSpec.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => _root_.scalapb.descriptors.PRepeated(components.iterator.map(_.toPMessage).toVector)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: TensorInfo.CompositeTensor.type = meta_graph.TensorInfo.CompositeTensor
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.TensorInfo.CompositeTensor])
  }
  
  object CompositeTensor extends scalapb.GeneratedMessageCompanion[TensorInfo.CompositeTensor] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[TensorInfo.CompositeTensor] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): TensorInfo.CompositeTensor = {
      var __typeSpec: _root_.scala.Option[tensorboard.struct.TypeSpecProto] = _root_.scala.None
      val __components: _root_.scala.collection.immutable.VectorBuilder[TensorInfo] = new _root_.scala.collection.immutable.VectorBuilder[TensorInfo]
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __typeSpec = _root_.scala.Option(__typeSpec.fold(_root_.scalapb.LiteParser.readMessage[tensorboard.struct.TypeSpecProto](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 18 =>
            __components += _root_.scalapb.LiteParser.readMessage[TensorInfo](_input__)
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      meta_graph.TensorInfo.CompositeTensor(
          typeSpec = __typeSpec,
          components = __components.result(),
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[TensorInfo.CompositeTensor] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        meta_graph.TensorInfo.CompositeTensor(
          typeSpec = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[tensorboard.struct.TypeSpecProto]]),
          components = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[TensorInfo]]).getOrElse(_root_.scala.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = meta_graph.TensorInfo.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = meta_graph.TensorInfo.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = tensorboard.struct.TypeSpecProto
        case 2 => __out = meta_graph.TensorInfo
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = meta_graph.TensorInfo.CompositeTensor(
      typeSpec = _root_.scala.None,
      components = _root_.scala.Seq.empty
    )
    implicit class CompositeTensorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, TensorInfo.CompositeTensor]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, TensorInfo.CompositeTensor](_l) {
      def typeSpec: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.struct.TypeSpecProto] = field(_.getTypeSpec)((c_, f_) => c_.copy(typeSpec = _root_.scala.Option(f_)))
      def optionalTypeSpec: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tensorboard.struct.TypeSpecProto]] = field(_.typeSpec)((c_, f_) => c_.copy(typeSpec = f_))
      def components: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[TensorInfo]] = field(_.components)((c_, f_) => c_.copy(components = f_))
    }
    final val TYPE_SPEC_FIELD_NUMBER = 1
    final val COMPONENTS_FIELD_NUMBER = 2
    def of(
      typeSpec: _root_.scala.Option[tensorboard.struct.TypeSpecProto],
      components: _root_.scala.Seq[TensorInfo]
    ): TensorInfo.CompositeTensor = meta_graph.TensorInfo.CompositeTensor(
      typeSpec,
      components
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.TensorInfo.CompositeTensor])
  }
  
  implicit class TensorInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, TensorInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, TensorInfo](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getName)((c_, f_) => c_.copy(encoding = meta_graph.TensorInfo.Encoding.Name(f_)))
    def cooSparse: _root_.scalapb.lenses.Lens[UpperPB, TensorInfo.CooSparse] = field(_.getCooSparse)((c_, f_) => c_.copy(encoding = meta_graph.TensorInfo.Encoding.CooSparse(f_)))
    def compositeTensor: _root_.scalapb.lenses.Lens[UpperPB, TensorInfo.CompositeTensor] = field(_.getCompositeTensor)((c_, f_) => c_.copy(encoding = meta_graph.TensorInfo.Encoding.CompositeTensor(f_)))
    def dtype: _root_.scalapb.lenses.Lens[UpperPB, DataType] = field(_.dtype)((c_, f_) => c_.copy(dtype = f_))
    def tensorShape: _root_.scalapb.lenses.Lens[UpperPB, TensorShapeProto] = field(_.getTensorShape)((c_, f_) => c_.copy(tensorShape = _root_.scala.Option(f_)))
    def optionalTensorShape: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[TensorShapeProto]] = field(_.tensorShape)((c_, f_) => c_.copy(tensorShape = f_))
    def encoding: _root_.scalapb.lenses.Lens[UpperPB, TensorInfo.Encoding] = field(_.encoding)((c_, f_) => c_.copy(encoding = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val COO_SPARSE_FIELD_NUMBER = 4
  final val COMPOSITE_TENSOR_FIELD_NUMBER = 5
  final val DTYPE_FIELD_NUMBER = 2
  final val TENSOR_SHAPE_FIELD_NUMBER = 3
  def of(
          encoding: TensorInfo.Encoding,
          dtype: DataType,
          tensorShape: _root_.scala.Option[TensorShapeProto]
  ): TensorInfo = TensorInfo(
    encoding,
    dtype,
    tensorShape
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.TensorInfo])
}
