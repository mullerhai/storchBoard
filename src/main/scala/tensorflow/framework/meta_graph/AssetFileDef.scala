// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorflow.framework.meta_graph

import tensorflow.framework.meta_graph

/** An asset file def for a single file or a set of sharded files with the same
  * name.
  *
  * @param tensorInfo
  *   The tensor to bind the asset filename to.
  * @param filename
  *   The filename within an assets directory. Note: does not include the path
  *   prefix, i.e. directories. For an asset at /tmp/path/vocab.txt, the filename
  *   would be "vocab.txt".
  */
@SerialVersionUID(0L)
final case class AssetFileDef(
                               tensorInfo: _root_.scala.Option[TensorInfo] = _root_.scala.None,
                               filename: _root_.scala.Predef.String = "",
                               unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AssetFileDef] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (tensorInfo.isDefined) {
        val __value = tensorInfo.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = filename
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      tensorInfo.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = filename
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getTensorInfo: TensorInfo = tensorInfo.getOrElse(meta_graph.TensorInfo.defaultInstance)
    def clearTensorInfo: AssetFileDef = copy(tensorInfo = _root_.scala.None)
    def withTensorInfo(__v: TensorInfo): AssetFileDef = copy(tensorInfo = Option(__v))
    def withFilename(__v: _root_.scala.Predef.String): AssetFileDef = copy(filename = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => tensorInfo.orNull
        case 2 => {
          val __t = filename
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => tensorInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PString(filename)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: AssetFileDef.type = meta_graph.AssetFileDef
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.AssetFileDef])
}

object AssetFileDef extends scalapb.GeneratedMessageCompanion[AssetFileDef] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[AssetFileDef] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): AssetFileDef = {
    var __tensorInfo: _root_.scala.Option[TensorInfo] = _root_.scala.None
    var __filename: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __tensorInfo = _root_.scala.Option(__tensorInfo.fold(_root_.scalapb.LiteParser.readMessage[TensorInfo](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __filename = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    AssetFileDef(
        tensorInfo = __tensorInfo,
        filename = __filename,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[AssetFileDef] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      AssetFileDef(
        tensorInfo = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[TensorInfo]]),
        filename = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.framework.meta_graph.MetaGraphProto.javaDescriptor.getMessageTypes().get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.framework.meta_graph.MetaGraphProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = meta_graph.TensorInfo
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = AssetFileDef(
    tensorInfo = _root_.scala.None,
    filename = ""
  )
  implicit class AssetFileDefLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, AssetFileDef]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, AssetFileDef](_l) {
    def tensorInfo: _root_.scalapb.lenses.Lens[UpperPB, TensorInfo] = field(_.getTensorInfo)((c_, f_) => c_.copy(tensorInfo = _root_.scala.Option(f_)))
    def optionalTensorInfo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[TensorInfo]] = field(_.tensorInfo)((c_, f_) => c_.copy(tensorInfo = f_))
    def filename: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.filename)((c_, f_) => c_.copy(filename = f_))
  }
  final val TENSOR_INFO_FIELD_NUMBER = 1
  final val FILENAME_FIELD_NUMBER = 2
  def of(
          tensorInfo: _root_.scala.Option[TensorInfo],
          filename: _root_.scala.Predef.String
  ): AssetFileDef = AssetFileDef(
    tensorInfo,
    filename
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.AssetFileDef])
}
