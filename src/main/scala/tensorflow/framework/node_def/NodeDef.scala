// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorflow.framework.node_def

import tensorflow.framework.attr_value.AttrValue
import tensorflow.framework.full_type.FullTypeDef
import tensorflow.framework.{attr_value, full_type, node_def}

/** @param name
  *   The name given to this operator. Used for naming inputs,
  *   logging, visualization, etc.  Unique within a single GraphDef.
  *   Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_&gt;./]*".
  * @param op
  *   The operation name.  There may be custom parameters in attrs.
  *   Op names starting with an underscore are reserved for internal use.
  * @param input
  *   Each input is "node:src_output" with "node" being a string name and
  *   "src_output" indicating which output tensor to use from "node". If
  *   "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
  *   may optionally be followed by control inputs that have the format
  *   "^node".
  * @param device
  *   A (possibly partial) specification for the device on which this
  *   node should be placed.
  *   The expected syntax for this string is as follows:
  *  
  *   DEVICE_SPEC ::= PARTIAL_SPEC
  *  
  *   PARTIAL_SPEC ::= ("/" CONSTRAINT) *
  *   CONSTRAINT ::= ("job:" JOB_NAME)
  *                | ("replica:" [1-9][0-9]*)
  *                | ("task:" [1-9][0-9]*)
  *                | ("device:" [A-Za-z]* ":" ([1-9][0-9]* | "*") )
  *  
  *   Valid values for this string include:
  *   * "/job:worker/replica:0/task:1/device:GPU:3"  (full specification)
  *   * "/job:worker/device:GPU:3"                   (partial specification)
  *   * ""                                    (no specification)
  *  
  *   If the constraints do not resolve to a single device (or if this
  *   field is empty or not present), the runtime will attempt to
  *   choose a device automatically.
  * @param attr
  *   Operation-specific graph-construction-time configuration.
  *   Note that this should include all attrs defined in the
  *   corresponding OpDef, including those with a value matching
  *   the default -- this allows the default to change and makes
  *   NodeDefs easier to interpret on their own.  However, if
  *   an attr with a default is not specified in this list, the
  *   default will be used.
  *   The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
  *   one of the names from the corresponding OpDef's attr field).
  *   The values must have a type matching the corresponding OpDef
  *   attr's type field.
  *   TODO(josh11b): Add some examples here showing best practices.
  * @param experimentalDebugInfo
  *   This stores debug information associated with the node.
  * @param experimentalType
  *   The complete type of this node. Experimental and subject to change.
  *   Currently, the field only contains the return types of the node. That will
  *   extend in the future to contain the entire signature of the node, as a
  *   function type.
  */
@SerialVersionUID(0L)
final case class NodeDef(
                          name: _root_.scala.Predef.String = "",
                          op: _root_.scala.Predef.String = "",
                          input: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
                          device: _root_.scala.Predef.String = "",
                          attr: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, AttrValue] = _root_.scala.collection.immutable.Map.empty,
                          experimentalDebugInfo: _root_.scala.Option[NodeDef.ExperimentalDebugInfo] = _root_.scala.None,
                          experimentalType: _root_.scala.Option[FullTypeDef] = _root_.scala.None,
                          unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[NodeDef] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = name
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = op
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      input.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      }
      
      {
        val __value = device
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      attr.foreach { __item =>
        val __value = node_def.NodeDef._typemapper_attr.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (experimentalDebugInfo.isDefined) {
        val __value = experimentalDebugInfo.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (experimentalType.isDefined) {
        val __value = experimentalType.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = name
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = op
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      input.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      {
        val __v = device
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      attr.foreach { __v =>
        val __m = node_def.NodeDef._typemapper_attr.toBase(__v)
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      experimentalDebugInfo.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      experimentalType.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withName(__v: _root_.scala.Predef.String): NodeDef = copy(name = __v)
    def withOp(__v: _root_.scala.Predef.String): NodeDef = copy(op = __v)
    def clearInput = copy(input = _root_.scala.Seq.empty)
    def addInput(__vs: _root_.scala.Predef.String *): NodeDef = addAllInput(__vs)
    def addAllInput(__vs: Iterable[_root_.scala.Predef.String]): NodeDef = copy(input = input ++ __vs)
    def withInput(__v: _root_.scala.Seq[_root_.scala.Predef.String]): NodeDef = copy(input = __v)
    def withDevice(__v: _root_.scala.Predef.String): NodeDef = copy(device = __v)
    def clearAttr = copy(attr = _root_.scala.collection.immutable.Map.empty)
    def addAttr(__vs: (_root_.scala.Predef.String, AttrValue) *): NodeDef = addAllAttr(__vs)
    def addAllAttr(__vs: Iterable[(_root_.scala.Predef.String, AttrValue)]): NodeDef = copy(attr = attr ++ __vs)
    def withAttr(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, AttrValue]): NodeDef = copy(attr = __v)
    def getExperimentalDebugInfo: NodeDef.ExperimentalDebugInfo = experimentalDebugInfo.getOrElse(node_def.NodeDef.ExperimentalDebugInfo.defaultInstance)
    def clearExperimentalDebugInfo: NodeDef = copy(experimentalDebugInfo = _root_.scala.None)
    def withExperimentalDebugInfo(__v: NodeDef.ExperimentalDebugInfo): NodeDef = copy(experimentalDebugInfo = Option(__v))
    def getExperimentalType: FullTypeDef = experimentalType.getOrElse(FullTypeDef.defaultInstance)
    def clearExperimentalType: NodeDef = copy(experimentalType = _root_.scala.None)
    def withExperimentalType(__v: FullTypeDef): NodeDef = copy(experimentalType = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = op
          if (__t != "") __t else null
        }
        case 3 => input
        case 4 => {
          val __t = device
          if (__t != "") __t else null
        }
        case 5 => attr.iterator.map(node_def.NodeDef._typemapper_attr.toBase(_)).toSeq
        case 6 => experimentalDebugInfo.orNull
        case 7 => experimentalType.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => _root_.scalapb.descriptors.PString(op)
        case 3 => _root_.scalapb.descriptors.PRepeated(input.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 4 => _root_.scalapb.descriptors.PString(device)
        case 5 => _root_.scalapb.descriptors.PRepeated(attr.iterator.map(node_def.NodeDef._typemapper_attr.toBase(_).toPMessage).toVector)
        case 6 => experimentalDebugInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => experimentalType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: NodeDef.type = node_def.NodeDef
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.NodeDef])
}

object NodeDef extends scalapb.GeneratedMessageCompanion[NodeDef] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[NodeDef] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): NodeDef = {
    var __name: _root_.scala.Predef.String = ""
    var __op: _root_.scala.Predef.String = ""
    val __input: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __device: _root_.scala.Predef.String = ""
    val __attr: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, AttrValue), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, AttrValue]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, AttrValue]
    var __experimentalDebugInfo: _root_.scala.Option[NodeDef.ExperimentalDebugInfo] = _root_.scala.None
    var __experimentalType: _root_.scala.Option[FullTypeDef] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __name = _input__.readStringRequireUtf8()
        case 18 =>
          __op = _input__.readStringRequireUtf8()
        case 26 =>
          __input += _input__.readStringRequireUtf8()
        case 34 =>
          __device = _input__.readStringRequireUtf8()
        case 42 =>
          __attr += node_def.NodeDef._typemapper_attr.toCustom(_root_.scalapb.LiteParser.readMessage[NodeDef.AttrEntry](_input__))
        case 50 =>
          __experimentalDebugInfo = _root_.scala.Option(__experimentalDebugInfo.fold(_root_.scalapb.LiteParser.readMessage[NodeDef.ExperimentalDebugInfo](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 58 =>
          __experimentalType = _root_.scala.Option(__experimentalType.fold(_root_.scalapb.LiteParser.readMessage[FullTypeDef](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    NodeDef(
        name = __name,
        op = __op,
        input = __input.result(),
        device = __device,
        attr = __attr.result(),
        experimentalDebugInfo = __experimentalDebugInfo,
        experimentalType = __experimentalType,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[NodeDef] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      NodeDef(
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        op = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        input = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        device = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        attr = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[NodeDef.AttrEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(node_def.NodeDef._typemapper_attr.toCustom(_)).toMap,
        experimentalDebugInfo = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[NodeDef.ExperimentalDebugInfo]]),
        experimentalType = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[FullTypeDef]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.framework.node_def.NodeDefProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.framework.node_def.NodeDefProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 5 => __out = node_def.NodeDef.AttrEntry
      case 6 => __out = node_def.NodeDef.ExperimentalDebugInfo
      case 7 => __out = full_type.FullTypeDef
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      node_def.NodeDef.AttrEntry,
      node_def.NodeDef.ExperimentalDebugInfo
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = NodeDef(
    name = "",
    op = "",
    input = _root_.scala.Seq.empty,
    device = "",
    attr = _root_.scala.collection.immutable.Map.empty,
    experimentalDebugInfo = _root_.scala.None,
    experimentalType = _root_.scala.None
  )
  @SerialVersionUID(0L)
  final case class AttrEntry(
                              key: _root_.scala.Predef.String = "",
                              value: _root_.scala.Option[AttrValue] = _root_.scala.None,
                              unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AttrEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): AttrEntry = copy(key = __v)
      def getValue: AttrValue = value.getOrElse(attr_value.AttrValue.defaultInstance)
      def clearValue: AttrEntry = copy(value = _root_.scala.None)
      def withValue(__v: AttrValue): AttrEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: NodeDef.AttrEntry.type = node_def.NodeDef.AttrEntry
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.NodeDef.AttrEntry])
  }
  
  object AttrEntry extends scalapb.GeneratedMessageCompanion[NodeDef.AttrEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[NodeDef.AttrEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): NodeDef.AttrEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Option[AttrValue] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = _root_.scala.Option(__value.fold(_root_.scalapb.LiteParser.readMessage[AttrValue](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      node_def.NodeDef.AttrEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[NodeDef.AttrEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        node_def.NodeDef.AttrEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[AttrValue]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = node_def.NodeDef.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = node_def.NodeDef.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = attr_value.AttrValue
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = node_def.NodeDef.AttrEntry(
      key = "",
      value = _root_.scala.None
    )
    implicit class AttrEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, NodeDef.AttrEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, NodeDef.AttrEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, AttrValue] = field(_.getValue)((c_, f_) => c_.copy(value = _root_.scala.Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[AttrValue]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[NodeDef.AttrEntry, (_root_.scala.Predef.String, AttrValue)] =
      _root_.scalapb.TypeMapper[NodeDef.AttrEntry, (_root_.scala.Predef.String, AttrValue)](__m => (__m.key, __m.getValue))(__p => node_def.NodeDef.AttrEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Option[AttrValue]
    ): NodeDef.AttrEntry = node_def.NodeDef.AttrEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.NodeDef.AttrEntry])
  }
  
  /** @param originalNodeNames
    *   Opaque string inserted into error messages created by the runtime.
    *  
    *   This is intended to store the list of names of the nodes from the
    *   original graph that this node was derived. For example if this node, say
    *   C, was result of a fusion of 2 nodes A and B, then 'original_node' would
    *   be {A, B}. This information can be used to map errors originating at the
    *   current node to some top level source code.
    * @param originalFuncNames
    *   This is intended to store the list of names of the functions from the
    *   original graph that this node was derived. For example if this node, say
    *   C, was result of a fusion of node A in function FA and node B in function
    *   FB, then `original_funcs` would be {FA, FB}. If the node is in the top
    *   level graph, the `original_func` is empty. This information, with the
    *   `original_node_names` can be used to map errors originating at the
    *   current ndoe to some top level source code.
    */
  @SerialVersionUID(0L)
  final case class ExperimentalDebugInfo(
      originalNodeNames: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
      originalFuncNames: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ExperimentalDebugInfo] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        originalNodeNames.foreach { __item =>
          val __value = __item
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
        originalFuncNames.foreach { __item =>
          val __value = __item
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        originalNodeNames.foreach { __v =>
          val __m = __v
          _output__.writeString(1, __m)
        };
        originalFuncNames.foreach { __v =>
          val __m = __v
          _output__.writeString(2, __m)
        };
        unknownFields.writeTo(_output__)
      }
      def clearOriginalNodeNames = copy(originalNodeNames = _root_.scala.Seq.empty)
      def addOriginalNodeNames(__vs: _root_.scala.Predef.String *): ExperimentalDebugInfo = addAllOriginalNodeNames(__vs)
      def addAllOriginalNodeNames(__vs: Iterable[_root_.scala.Predef.String]): ExperimentalDebugInfo = copy(originalNodeNames = originalNodeNames ++ __vs)
      def withOriginalNodeNames(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ExperimentalDebugInfo = copy(originalNodeNames = __v)
      def clearOriginalFuncNames = copy(originalFuncNames = _root_.scala.Seq.empty)
      def addOriginalFuncNames(__vs: _root_.scala.Predef.String *): ExperimentalDebugInfo = addAllOriginalFuncNames(__vs)
      def addAllOriginalFuncNames(__vs: Iterable[_root_.scala.Predef.String]): ExperimentalDebugInfo = copy(originalFuncNames = originalFuncNames ++ __vs)
      def withOriginalFuncNames(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ExperimentalDebugInfo = copy(originalFuncNames = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => originalNodeNames
          case 2 => originalFuncNames
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(originalNodeNames.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
          case 2 => _root_.scalapb.descriptors.PRepeated(originalFuncNames.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: NodeDef.ExperimentalDebugInfo.type = node_def.NodeDef.ExperimentalDebugInfo
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.NodeDef.ExperimentalDebugInfo])
  }
  
  object ExperimentalDebugInfo extends scalapb.GeneratedMessageCompanion[NodeDef.ExperimentalDebugInfo] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[NodeDef.ExperimentalDebugInfo] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): NodeDef.ExperimentalDebugInfo = {
      val __originalNodeNames: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
      val __originalFuncNames: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __originalNodeNames += _input__.readStringRequireUtf8()
          case 18 =>
            __originalFuncNames += _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      node_def.NodeDef.ExperimentalDebugInfo(
          originalNodeNames = __originalNodeNames.result(),
          originalFuncNames = __originalFuncNames.result(),
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[NodeDef.ExperimentalDebugInfo] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        node_def.NodeDef.ExperimentalDebugInfo(
          originalNodeNames = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
          originalFuncNames = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = node_def.NodeDef.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = node_def.NodeDef.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = node_def.NodeDef.ExperimentalDebugInfo(
      originalNodeNames = _root_.scala.Seq.empty,
      originalFuncNames = _root_.scala.Seq.empty
    )
    implicit class ExperimentalDebugInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, NodeDef.ExperimentalDebugInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, NodeDef.ExperimentalDebugInfo](_l) {
      def originalNodeNames: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.originalNodeNames)((c_, f_) => c_.copy(originalNodeNames = f_))
      def originalFuncNames: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.originalFuncNames)((c_, f_) => c_.copy(originalFuncNames = f_))
    }
    final val ORIGINAL_NODE_NAMES_FIELD_NUMBER = 1
    final val ORIGINAL_FUNC_NAMES_FIELD_NUMBER = 2
    def of(
      originalNodeNames: _root_.scala.Seq[_root_.scala.Predef.String],
      originalFuncNames: _root_.scala.Seq[_root_.scala.Predef.String]
    ): NodeDef.ExperimentalDebugInfo = node_def.NodeDef.ExperimentalDebugInfo(
      originalNodeNames,
      originalFuncNames
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.NodeDef.ExperimentalDebugInfo])
  }
  
  implicit class NodeDefLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, NodeDef]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, NodeDef](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def op: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.op)((c_, f_) => c_.copy(op = f_))
    def input: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.input)((c_, f_) => c_.copy(input = f_))
    def device: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.device)((c_, f_) => c_.copy(device = f_))
    def attr: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, AttrValue]] = field(_.attr)((c_, f_) => c_.copy(attr = f_))
    def experimentalDebugInfo: _root_.scalapb.lenses.Lens[UpperPB, NodeDef.ExperimentalDebugInfo] = field(_.getExperimentalDebugInfo)((c_, f_) => c_.copy(experimentalDebugInfo = _root_.scala.Option(f_)))
    def optionalExperimentalDebugInfo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[NodeDef.ExperimentalDebugInfo]] = field(_.experimentalDebugInfo)((c_, f_) => c_.copy(experimentalDebugInfo = f_))
    def experimentalType: _root_.scalapb.lenses.Lens[UpperPB, FullTypeDef] = field(_.getExperimentalType)((c_, f_) => c_.copy(experimentalType = _root_.scala.Option(f_)))
    def optionalExperimentalType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[FullTypeDef]] = field(_.experimentalType)((c_, f_) => c_.copy(experimentalType = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val OP_FIELD_NUMBER = 2
  final val INPUT_FIELD_NUMBER = 3
  final val DEVICE_FIELD_NUMBER = 4
  final val ATTR_FIELD_NUMBER = 5
  final val EXPERIMENTAL_DEBUG_INFO_FIELD_NUMBER = 6
  final val EXPERIMENTAL_TYPE_FIELD_NUMBER = 7
  @transient
  private[node_def] val _typemapper_attr: _root_.scalapb.TypeMapper[NodeDef.AttrEntry, (_root_.scala.Predef.String, AttrValue)] = implicitly[_root_.scalapb.TypeMapper[NodeDef.AttrEntry, (_root_.scala.Predef.String, AttrValue)]]
  def of(
          name: _root_.scala.Predef.String,
          op: _root_.scala.Predef.String,
          input: _root_.scala.Seq[_root_.scala.Predef.String],
          device: _root_.scala.Predef.String,
          attr: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, AttrValue],
          experimentalDebugInfo: _root_.scala.Option[NodeDef.ExperimentalDebugInfo],
          experimentalType: _root_.scala.Option[FullTypeDef]
  ): NodeDef = NodeDef(
    name,
    op,
    input,
    device,
    attr,
    experimentalDebugInfo,
    experimentalType
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.NodeDef])
}
