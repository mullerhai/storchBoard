// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorflow.framework.step_stats

import tensorflow.framework.step_stats

/** @param threadNames
  *   Its key is thread id.
  */
@SerialVersionUID(0L)
final case class DeviceStepStats(
                                  device: _root_.scala.Predef.String = "",
                                  nodeStats: _root_.scala.Seq[NodeExecStats] = _root_.scala.Seq.empty,
                                  threadNames: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Predef.String] = _root_.scala.collection.immutable.Map.empty,
                                  unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[DeviceStepStats] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = device
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      nodeStats.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      threadNames.foreach { __item =>
        val __value = step_stats.DeviceStepStats._typemapper_threadNames.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = device
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      nodeStats.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      threadNames.foreach { __v =>
        val __m = step_stats.DeviceStepStats._typemapper_threadNames.toBase(__v)
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withDevice(__v: _root_.scala.Predef.String): DeviceStepStats = copy(device = __v)
    def clearNodeStats = copy(nodeStats = _root_.scala.Seq.empty)
    def addNodeStats(__vs: NodeExecStats *): DeviceStepStats = addAllNodeStats(__vs)
    def addAllNodeStats(__vs: Iterable[NodeExecStats]): DeviceStepStats = copy(nodeStats = nodeStats ++ __vs)
    def withNodeStats(__v: _root_.scala.Seq[NodeExecStats]): DeviceStepStats = copy(nodeStats = __v)
    def clearThreadNames = copy(threadNames = _root_.scala.collection.immutable.Map.empty)
    def addThreadNames(__vs: (_root_.scala.Int, _root_.scala.Predef.String) *): DeviceStepStats = addAllThreadNames(__vs)
    def addAllThreadNames(__vs: Iterable[(_root_.scala.Int, _root_.scala.Predef.String)]): DeviceStepStats = copy(threadNames = threadNames ++ __vs)
    def withThreadNames(__v: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Predef.String]): DeviceStepStats = copy(threadNames = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = device
          if (__t != "") __t else null
        }
        case 2 => nodeStats
        case 3 => threadNames.iterator.map(step_stats.DeviceStepStats._typemapper_threadNames.toBase(_)).toSeq
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(device)
        case 2 => _root_.scalapb.descriptors.PRepeated(nodeStats.iterator.map(_.toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(threadNames.iterator.map(step_stats.DeviceStepStats._typemapper_threadNames.toBase(_).toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: DeviceStepStats.type = step_stats.DeviceStepStats
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.DeviceStepStats])
}

object DeviceStepStats extends scalapb.GeneratedMessageCompanion[DeviceStepStats] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[DeviceStepStats] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): DeviceStepStats = {
    var __device: _root_.scala.Predef.String = ""
    val __nodeStats: _root_.scala.collection.immutable.VectorBuilder[NodeExecStats] = new _root_.scala.collection.immutable.VectorBuilder[NodeExecStats]
    val __threadNames: _root_.scala.collection.mutable.Builder[(_root_.scala.Int, _root_.scala.Predef.String), _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Predef.String]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Int, _root_.scala.Predef.String]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __device = _input__.readStringRequireUtf8()
        case 18 =>
          __nodeStats += _root_.scalapb.LiteParser.readMessage[NodeExecStats](_input__)
        case 26 =>
          __threadNames += step_stats.DeviceStepStats._typemapper_threadNames.toCustom(_root_.scalapb.LiteParser.readMessage[DeviceStepStats.ThreadNamesEntry](_input__))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    DeviceStepStats(
        device = __device,
        nodeStats = __nodeStats.result(),
        threadNames = __threadNames.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[DeviceStepStats] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      DeviceStepStats(
        device = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        nodeStats = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[NodeExecStats]]).getOrElse(_root_.scala.Seq.empty),
        threadNames = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[DeviceStepStats.ThreadNamesEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(step_stats.DeviceStepStats._typemapper_threadNames.toCustom(_)).toMap
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.framework.step_stats.StepStatsProto.javaDescriptor.getMessageTypes().get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.framework.step_stats.StepStatsProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = step_stats.NodeExecStats
      case 3 => __out = step_stats.DeviceStepStats.ThreadNamesEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      step_stats.DeviceStepStats.ThreadNamesEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = DeviceStepStats(
    device = "",
    nodeStats = _root_.scala.Seq.empty,
    threadNames = _root_.scala.collection.immutable.Map.empty
  )
  @SerialVersionUID(0L)
  final case class ThreadNamesEntry(
      key: _root_.scala.Int = 0,
      value: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ThreadNamesEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
          }
        };
        
        {
          val __value = value
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != 0) {
            _output__.writeUInt32(1, __v)
          }
        };
        {
          val __v = value
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Int): ThreadNamesEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Predef.String): ThreadNamesEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != 0) __t else null
          }
          case 2 => {
            val __t = value
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(key)
          case 2 => _root_.scalapb.descriptors.PString(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: DeviceStepStats.ThreadNamesEntry.type = step_stats.DeviceStepStats.ThreadNamesEntry
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.DeviceStepStats.ThreadNamesEntry])
  }
  
  object ThreadNamesEntry extends scalapb.GeneratedMessageCompanion[DeviceStepStats.ThreadNamesEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[DeviceStepStats.ThreadNamesEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): DeviceStepStats.ThreadNamesEntry = {
      var __key: _root_.scala.Int = 0
      var __value: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __key = _input__.readUInt32()
          case 18 =>
            __value = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      step_stats.DeviceStepStats.ThreadNamesEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[DeviceStepStats.ThreadNamesEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        step_stats.DeviceStepStats.ThreadNamesEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = step_stats.DeviceStepStats.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = step_stats.DeviceStepStats.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = step_stats.DeviceStepStats.ThreadNamesEntry(
      key = 0,
      value = ""
    )
    implicit class ThreadNamesEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, DeviceStepStats.ThreadNamesEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, DeviceStepStats.ThreadNamesEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[DeviceStepStats.ThreadNamesEntry, (_root_.scala.Int, _root_.scala.Predef.String)] =
      _root_.scalapb.TypeMapper[DeviceStepStats.ThreadNamesEntry, (_root_.scala.Int, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => step_stats.DeviceStepStats.ThreadNamesEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Int,
      value: _root_.scala.Predef.String
    ): DeviceStepStats.ThreadNamesEntry = step_stats.DeviceStepStats.ThreadNamesEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.DeviceStepStats.ThreadNamesEntry])
  }
  
  implicit class DeviceStepStatsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, DeviceStepStats]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, DeviceStepStats](_l) {
    def device: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.device)((c_, f_) => c_.copy(device = f_))
    def nodeStats: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[NodeExecStats]] = field(_.nodeStats)((c_, f_) => c_.copy(nodeStats = f_))
    def threadNames: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Predef.String]] = field(_.threadNames)((c_, f_) => c_.copy(threadNames = f_))
  }
  final val DEVICE_FIELD_NUMBER = 1
  final val NODE_STATS_FIELD_NUMBER = 2
  final val THREAD_NAMES_FIELD_NUMBER = 3
  @transient
  private[step_stats] val _typemapper_threadNames: _root_.scalapb.TypeMapper[DeviceStepStats.ThreadNamesEntry, (_root_.scala.Int, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[DeviceStepStats.ThreadNamesEntry, (_root_.scala.Int, _root_.scala.Predef.String)]]
  def of(
          device: _root_.scala.Predef.String,
          nodeStats: _root_.scala.Seq[NodeExecStats],
          threadNames: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Predef.String]
  ): DeviceStepStats = DeviceStepStats(
    device,
    nodeStats,
    threadNames
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.DeviceStepStats])
}
