// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorflow.framework.config

import tensorflow.framework.config

/** Defines a subgraph in another `GraphDef` as a set of feed points and nodes
  * to be fetched or executed.
  *
  * Compare with the arguments to `Session::Run()`.
  *
  * @param feed
  *   Tensors to be fed in the callable. Each feed is the name of a tensor.
  * @param fetch
  *   Fetches. A list of tensor names. The caller of the callable expects a
  *   tensor to be returned for each fetch[i] (see RunStepResponse.tensor). The
  *   order of specified fetches does not change the execution order.
  * @param target
  *   Target Nodes. A list of node names. The named nodes will be run by the
  *   callable but their outputs will not be returned.
  * @param runOptions
  *   Options that will be applied to each run.
  * @param tensorConnection
  *   Tensors to be connected in the callable. Each TensorConnection denotes
  *   a pair of tensors in the graph, between which an edge will be created
  *   in the callable.
  * @param feedDevices
  *   The Tensor objects fed in the callable and fetched from the callable
  *   are expected to be backed by host (CPU) memory by default.
  *  
  *   The options below allow changing that - feeding tensors backed by
  *   device memory, or returning tensors that are backed by device memory.
  *  
  *   The maps below map the name of a feed/fetch tensor (which appears in
  *   'feed' or 'fetch' fields above), to the fully qualified name of the device
  *   owning the memory backing the contents of the tensor.
  *  
  *   For example, creating a callable with the following options:
  *  
  *   CallableOptions {
  *     feed: "a:0"
  *     feed: "b:0"
  *  
  *     fetch: "x:0"
  *     fetch: "y:0"
  *  
  *     feed_devices: {
  *       "a:0": "/job:localhost/replica:0/task:0/device:GPU:0"
  *     }
  *  
  *     fetch_devices: {
  *       "y:0": "/job:localhost/replica:0/task:0/device:GPU:0"
  *    }
  *   }
  *  
  *   means that the Callable expects:
  *   - The first argument ("a:0") is a Tensor backed by GPU memory.
  *   - The second argument ("b:0") is a Tensor backed by host memory.
  *   and of its return values:
  *   - The first output ("x:0") will be backed by host memory.
  *   - The second output ("y:0") will be backed by GPU memory.
  *  
  *   FEEDS:
  *   It is the responsibility of the caller to ensure that the memory of the fed
  *   tensors will be correctly initialized and synchronized before it is
  *   accessed by operations executed during the call to Session::RunCallable().
  *  
  *   This is typically ensured by using the TensorFlow memory allocators
  *   (Device::GetAllocator()) to create the Tensor to be fed.
  *  
  *   Alternatively, for CUDA-enabled GPU devices, this typically means that the
  *   operation that produced the contents of the tensor has completed, i.e., the
  *   CUDA stream has been synchronized (e.g., via cuCtxSynchronize() or
  *   cuStreamSynchronize()).
  * @param fetchSkipSync
  *   By default, RunCallable() will synchronize the GPU stream before returning
  *   fetched tensors on a GPU device, to ensure that the values in those tensors
  *   have been produced. This simplifies interacting with the tensors, but
  *   potentially incurs a performance hit.
  *  
  *   If this options is set to true, the caller is responsible for ensuring
  *   that the values in the fetched tensors have been produced before they are
  *   used. The caller can do this by invoking `Device::Sync()` on the underlying
  *   device(s), or by feeding the tensors back to the same Session using
  *   `feed_devices` with the same corresponding device name.
  */
@SerialVersionUID(0L)
final case class CallableOptions(
                                  feed: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
                                  fetch: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
                                  target: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
                                  runOptions: _root_.scala.Option[RunOptions] = _root_.scala.None,
                                  tensorConnection: _root_.scala.Seq[TensorConnection] = _root_.scala.Seq.empty,
                                  feedDevices: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String] = _root_.scala.collection.immutable.Map.empty,
                                  fetchDevices: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String] = _root_.scala.collection.immutable.Map.empty,
                                  fetchSkipSync: _root_.scala.Boolean = false,
                                  unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CallableOptions] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      feed.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      }
      fetch.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      }
      target.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      }
      if (runOptions.isDefined) {
        val __value = runOptions.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      tensorConnection.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      feedDevices.foreach { __item =>
        val __value = config.CallableOptions._typemapper_feedDevices.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      fetchDevices.foreach { __item =>
        val __value = config.CallableOptions._typemapper_fetchDevices.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = fetchSkipSync
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(8, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      feed.foreach { __v =>
        val __m = __v
        _output__.writeString(1, __m)
      };
      fetch.foreach { __v =>
        val __m = __v
        _output__.writeString(2, __m)
      };
      target.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      runOptions.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      tensorConnection.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      feedDevices.foreach { __v =>
        val __m = config.CallableOptions._typemapper_feedDevices.toBase(__v)
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      fetchDevices.foreach { __v =>
        val __m = config.CallableOptions._typemapper_fetchDevices.toBase(__v)
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = fetchSkipSync
        if (__v != false) {
          _output__.writeBool(8, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def clearFeed = copy(feed = _root_.scala.Seq.empty)
    def addFeed(__vs: _root_.scala.Predef.String *): CallableOptions = addAllFeed(__vs)
    def addAllFeed(__vs: Iterable[_root_.scala.Predef.String]): CallableOptions = copy(feed = feed ++ __vs)
    def withFeed(__v: _root_.scala.Seq[_root_.scala.Predef.String]): CallableOptions = copy(feed = __v)
    def clearFetch = copy(fetch = _root_.scala.Seq.empty)
    def addFetch(__vs: _root_.scala.Predef.String *): CallableOptions = addAllFetch(__vs)
    def addAllFetch(__vs: Iterable[_root_.scala.Predef.String]): CallableOptions = copy(fetch = fetch ++ __vs)
    def withFetch(__v: _root_.scala.Seq[_root_.scala.Predef.String]): CallableOptions = copy(fetch = __v)
    def clearTarget = copy(target = _root_.scala.Seq.empty)
    def addTarget(__vs: _root_.scala.Predef.String *): CallableOptions = addAllTarget(__vs)
    def addAllTarget(__vs: Iterable[_root_.scala.Predef.String]): CallableOptions = copy(target = target ++ __vs)
    def withTarget(__v: _root_.scala.Seq[_root_.scala.Predef.String]): CallableOptions = copy(target = __v)
    def getRunOptions: RunOptions = runOptions.getOrElse(config.RunOptions.defaultInstance)
    def clearRunOptions: CallableOptions = copy(runOptions = _root_.scala.None)
    def withRunOptions(__v: RunOptions): CallableOptions = copy(runOptions = Option(__v))
    def clearTensorConnection = copy(tensorConnection = _root_.scala.Seq.empty)
    def addTensorConnection(__vs: TensorConnection *): CallableOptions = addAllTensorConnection(__vs)
    def addAllTensorConnection(__vs: Iterable[TensorConnection]): CallableOptions = copy(tensorConnection = tensorConnection ++ __vs)
    def withTensorConnection(__v: _root_.scala.Seq[TensorConnection]): CallableOptions = copy(tensorConnection = __v)
    def clearFeedDevices = copy(feedDevices = _root_.scala.collection.immutable.Map.empty)
    def addFeedDevices(__vs: (_root_.scala.Predef.String, _root_.scala.Predef.String) *): CallableOptions = addAllFeedDevices(__vs)
    def addAllFeedDevices(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Predef.String)]): CallableOptions = copy(feedDevices = feedDevices ++ __vs)
    def withFeedDevices(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]): CallableOptions = copy(feedDevices = __v)
    def clearFetchDevices = copy(fetchDevices = _root_.scala.collection.immutable.Map.empty)
    def addFetchDevices(__vs: (_root_.scala.Predef.String, _root_.scala.Predef.String) *): CallableOptions = addAllFetchDevices(__vs)
    def addAllFetchDevices(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Predef.String)]): CallableOptions = copy(fetchDevices = fetchDevices ++ __vs)
    def withFetchDevices(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]): CallableOptions = copy(fetchDevices = __v)
    def withFetchSkipSync(__v: _root_.scala.Boolean): CallableOptions = copy(fetchSkipSync = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => feed
        case 2 => fetch
        case 3 => target
        case 4 => runOptions.orNull
        case 5 => tensorConnection
        case 6 => feedDevices.iterator.map(config.CallableOptions._typemapper_feedDevices.toBase(_)).toSeq
        case 7 => fetchDevices.iterator.map(config.CallableOptions._typemapper_fetchDevices.toBase(_)).toSeq
        case 8 => {
          val __t = fetchSkipSync
          if (__t != false) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(feed.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 2 => _root_.scalapb.descriptors.PRepeated(fetch.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(target.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 4 => runOptions.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => _root_.scalapb.descriptors.PRepeated(tensorConnection.iterator.map(_.toPMessage).toVector)
        case 6 => _root_.scalapb.descriptors.PRepeated(feedDevices.iterator.map(config.CallableOptions._typemapper_feedDevices.toBase(_).toPMessage).toVector)
        case 7 => _root_.scalapb.descriptors.PRepeated(fetchDevices.iterator.map(config.CallableOptions._typemapper_fetchDevices.toBase(_).toPMessage).toVector)
        case 8 => _root_.scalapb.descriptors.PBoolean(fetchSkipSync)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: CallableOptions.type = config.CallableOptions
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.CallableOptions])
}

object CallableOptions extends scalapb.GeneratedMessageCompanion[CallableOptions] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[CallableOptions] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): CallableOptions = {
    val __feed: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __fetch: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __target: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __runOptions: _root_.scala.Option[RunOptions] = _root_.scala.None
    val __tensorConnection: _root_.scala.collection.immutable.VectorBuilder[TensorConnection] = new _root_.scala.collection.immutable.VectorBuilder[TensorConnection]
    val __feedDevices: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Predef.String), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Predef.String]
    val __fetchDevices: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Predef.String), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Predef.String]
    var __fetchSkipSync: _root_.scala.Boolean = false
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __feed += _input__.readStringRequireUtf8()
        case 18 =>
          __fetch += _input__.readStringRequireUtf8()
        case 26 =>
          __target += _input__.readStringRequireUtf8()
        case 34 =>
          __runOptions = _root_.scala.Option(__runOptions.fold(_root_.scalapb.LiteParser.readMessage[RunOptions](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 42 =>
          __tensorConnection += _root_.scalapb.LiteParser.readMessage[TensorConnection](_input__)
        case 50 =>
          __feedDevices += config.CallableOptions._typemapper_feedDevices.toCustom(_root_.scalapb.LiteParser.readMessage[CallableOptions.FeedDevicesEntry](_input__))
        case 58 =>
          __fetchDevices += config.CallableOptions._typemapper_fetchDevices.toCustom(_root_.scalapb.LiteParser.readMessage[CallableOptions.FetchDevicesEntry](_input__))
        case 64 =>
          __fetchSkipSync = _input__.readBool()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    CallableOptions(
        feed = __feed.result(),
        fetch = __fetch.result(),
        target = __target.result(),
        runOptions = __runOptions,
        tensorConnection = __tensorConnection.result(),
        feedDevices = __feedDevices.result(),
        fetchDevices = __fetchDevices.result(),
        fetchSkipSync = __fetchSkipSync,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[CallableOptions] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      CallableOptions(
        feed = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        fetch = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        target = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        runOptions = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[RunOptions]]),
        tensorConnection = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[TensorConnection]]).getOrElse(_root_.scala.Seq.empty),
        feedDevices = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[CallableOptions.FeedDevicesEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(config.CallableOptions._typemapper_feedDevices.toCustom(_)).toMap,
        fetchDevices = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[CallableOptions.FetchDevicesEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(config.CallableOptions._typemapper_fetchDevices.toCustom(_)).toMap,
        fetchSkipSync = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.framework.config.ConfigProtoCompanion.javaDescriptor.getMessageTypes().get(9)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.framework.config.ConfigProtoCompanion.scalaDescriptor.messages(9)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = config.RunOptions
      case 5 => __out = config.TensorConnection
      case 6 => __out = config.CallableOptions.FeedDevicesEntry
      case 7 => __out = config.CallableOptions.FetchDevicesEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      config.CallableOptions.FeedDevicesEntry,
      config.CallableOptions.FetchDevicesEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = CallableOptions(
    feed = _root_.scala.Seq.empty,
    fetch = _root_.scala.Seq.empty,
    target = _root_.scala.Seq.empty,
    runOptions = _root_.scala.None,
    tensorConnection = _root_.scala.Seq.empty,
    feedDevices = _root_.scala.collection.immutable.Map.empty,
    fetchDevices = _root_.scala.collection.immutable.Map.empty,
    fetchSkipSync = false
  )
  @SerialVersionUID(0L)
  final case class FeedDevicesEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[FeedDevicesEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = value
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): FeedDevicesEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Predef.String): FeedDevicesEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PString(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: CallableOptions.FeedDevicesEntry.type = config.CallableOptions.FeedDevicesEntry
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.CallableOptions.FeedDevicesEntry])
  }
  
  object FeedDevicesEntry extends scalapb.GeneratedMessageCompanion[CallableOptions.FeedDevicesEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[CallableOptions.FeedDevicesEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): CallableOptions.FeedDevicesEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      config.CallableOptions.FeedDevicesEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[CallableOptions.FeedDevicesEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        config.CallableOptions.FeedDevicesEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = config.CallableOptions.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = config.CallableOptions.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = config.CallableOptions.FeedDevicesEntry(
      key = "",
      value = ""
    )
    implicit class FeedDevicesEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, CallableOptions.FeedDevicesEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, CallableOptions.FeedDevicesEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[CallableOptions.FeedDevicesEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] =
      _root_.scalapb.TypeMapper[CallableOptions.FeedDevicesEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => config.CallableOptions.FeedDevicesEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Predef.String
    ): CallableOptions.FeedDevicesEntry = config.CallableOptions.FeedDevicesEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.CallableOptions.FeedDevicesEntry])
  }
  
  @SerialVersionUID(0L)
  final case class FetchDevicesEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[FetchDevicesEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = value
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): FetchDevicesEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Predef.String): FetchDevicesEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PString(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: CallableOptions.FetchDevicesEntry.type = config.CallableOptions.FetchDevicesEntry
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.CallableOptions.FetchDevicesEntry])
  }
  
  object FetchDevicesEntry extends scalapb.GeneratedMessageCompanion[CallableOptions.FetchDevicesEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[CallableOptions.FetchDevicesEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): CallableOptions.FetchDevicesEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      config.CallableOptions.FetchDevicesEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[CallableOptions.FetchDevicesEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        config.CallableOptions.FetchDevicesEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = config.CallableOptions.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = config.CallableOptions.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = config.CallableOptions.FetchDevicesEntry(
      key = "",
      value = ""
    )
    implicit class FetchDevicesEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, CallableOptions.FetchDevicesEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, CallableOptions.FetchDevicesEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[CallableOptions.FetchDevicesEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] =
      _root_.scalapb.TypeMapper[CallableOptions.FetchDevicesEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => config.CallableOptions.FetchDevicesEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Predef.String
    ): CallableOptions.FetchDevicesEntry = config.CallableOptions.FetchDevicesEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.CallableOptions.FetchDevicesEntry])
  }
  
  implicit class CallableOptionsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, CallableOptions]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, CallableOptions](_l) {
    def feed: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.feed)((c_, f_) => c_.copy(feed = f_))
    def fetch: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.fetch)((c_, f_) => c_.copy(fetch = f_))
    def target: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.target)((c_, f_) => c_.copy(target = f_))
    def runOptions: _root_.scalapb.lenses.Lens[UpperPB, RunOptions] = field(_.getRunOptions)((c_, f_) => c_.copy(runOptions = _root_.scala.Option(f_)))
    def optionalRunOptions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[RunOptions]] = field(_.runOptions)((c_, f_) => c_.copy(runOptions = f_))
    def tensorConnection: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[TensorConnection]] = field(_.tensorConnection)((c_, f_) => c_.copy(tensorConnection = f_))
    def feedDevices: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = field(_.feedDevices)((c_, f_) => c_.copy(feedDevices = f_))
    def fetchDevices: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = field(_.fetchDevices)((c_, f_) => c_.copy(fetchDevices = f_))
    def fetchSkipSync: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.fetchSkipSync)((c_, f_) => c_.copy(fetchSkipSync = f_))
  }
  final val FEED_FIELD_NUMBER = 1
  final val FETCH_FIELD_NUMBER = 2
  final val TARGET_FIELD_NUMBER = 3
  final val RUN_OPTIONS_FIELD_NUMBER = 4
  final val TENSOR_CONNECTION_FIELD_NUMBER = 5
  final val FEED_DEVICES_FIELD_NUMBER = 6
  final val FETCH_DEVICES_FIELD_NUMBER = 7
  final val FETCH_SKIP_SYNC_FIELD_NUMBER = 8
  @transient
  private[config] val _typemapper_feedDevices: _root_.scalapb.TypeMapper[CallableOptions.FeedDevicesEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[CallableOptions.FeedDevicesEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)]]
  @transient
  private[config] val _typemapper_fetchDevices: _root_.scalapb.TypeMapper[CallableOptions.FetchDevicesEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[CallableOptions.FetchDevicesEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)]]
  def of(
          feed: _root_.scala.Seq[_root_.scala.Predef.String],
          fetch: _root_.scala.Seq[_root_.scala.Predef.String],
          target: _root_.scala.Seq[_root_.scala.Predef.String],
          runOptions: _root_.scala.Option[RunOptions],
          tensorConnection: _root_.scala.Seq[TensorConnection],
          feedDevices: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String],
          fetchDevices: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String],
          fetchSkipSync: _root_.scala.Boolean
  ): CallableOptions = CallableOptions(
    feed,
    fetch,
    target,
    runOptions,
    tensorConnection,
    feedDevices,
    fetchDevices,
    fetchSkipSync
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.CallableOptions])
}
