// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorflow.framework.config

import tensorflow.framework.config

/** @param numThreads
  *   The number of threads in the pool.
  *  
  *   0 means the system picks a value based on where this option proto is used
  *   (see the declaration of the specific field for more info).
  * @param globalName
  *   The global name of the threadpool.
  *  
  *   If empty, then the threadpool is made and used according to the scope it's
  *   in - e.g., for a session threadpool, it is used by that session only.
  *  
  *   If non-empty, then:
  *   - a global threadpool associated with this name is looked
  *     up or created. This allows, for example, sharing one threadpool across
  *     many sessions (e.g., like the default behavior, if
  *     inter_op_parallelism_threads is not configured), but still partitioning
  *     into a large and small pool.
  *   - if the threadpool for this global_name already exists, then it is an
  *     error if the existing pool was created using a different num_threads
  *     value as is specified on this call.
  *   - threadpools created this way are never garbage collected.
  */
@SerialVersionUID(0L)
final case class ThreadPoolOptionProto(
    numThreads: _root_.scala.Int = 0,
    globalName: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ThreadPoolOptionProto] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = numThreads
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
        }
      };
      
      {
        val __value = globalName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = numThreads
        if (__v != 0) {
          _output__.writeInt32(1, __v)
        }
      };
      {
        val __v = globalName
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withNumThreads(__v: _root_.scala.Int): ThreadPoolOptionProto = copy(numThreads = __v)
    def withGlobalName(__v: _root_.scala.Predef.String): ThreadPoolOptionProto = copy(globalName = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = numThreads
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = globalName
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(numThreads)
        case 2 => _root_.scalapb.descriptors.PString(globalName)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: ThreadPoolOptionProto.type = config.ThreadPoolOptionProto
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.ThreadPoolOptionProto])
}

object ThreadPoolOptionProto extends scalapb.GeneratedMessageCompanion[ThreadPoolOptionProto] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[ThreadPoolOptionProto] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): ThreadPoolOptionProto = {
    var __numThreads: _root_.scala.Int = 0
    var __globalName: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __numThreads = _input__.readInt32()
        case 18 =>
          __globalName = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    ThreadPoolOptionProto(
        numThreads = __numThreads,
        globalName = __globalName,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[ThreadPoolOptionProto] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      ThreadPoolOptionProto(
        numThreads = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        globalName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.framework.config.ConfigProtoCompanion.javaDescriptor.getMessageTypes().get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.framework.config.ConfigProtoCompanion.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = ThreadPoolOptionProto(
    numThreads = 0,
    globalName = ""
  )
  implicit class ThreadPoolOptionProtoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, ThreadPoolOptionProto]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, ThreadPoolOptionProto](_l) {
    def numThreads: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.numThreads)((c_, f_) => c_.copy(numThreads = f_))
    def globalName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.globalName)((c_, f_) => c_.copy(globalName = f_))
  }
  final val NUM_THREADS_FIELD_NUMBER = 1
  final val GLOBAL_NAME_FIELD_NUMBER = 2
  def of(
    numThreads: _root_.scala.Int,
    globalName: _root_.scala.Predef.String
  ): ThreadPoolOptionProto = ThreadPoolOptionProto(
    numThreads,
    globalName
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.ThreadPoolOptionProto])
}
