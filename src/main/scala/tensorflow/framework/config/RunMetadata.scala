// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorflow.framework.config

import tensorflow.framework.cost_graph.CostGraphDef
import tensorflow.framework.graph.GraphDef
import tensorflow.framework.step_stats.StepStats
import tensorflow.framework.{config, cost_graph, graph, step_stats}

/** Metadata output (i.e., non-Tensor) for a single Run() call.
  *
  * @param stepStats
  *   Statistics traced for this step. Populated if tracing is turned on via the
  *   "RunOptions" proto.
  *   EXPERIMENTAL: The format and set of events may change in future versions.
  * @param costGraph
  *   The cost graph for the computation defined by the run call.
  * @param partitionGraphs
  *   Graphs of the partitions executed by executors.
  * @param functionGraphs
  *   This is only populated for graphs that are run as functions in TensorFlow
  *   V2. There will be an entry below for each function that is traced.
  *   The main use cases of the post_optimization_graph and the partition_graphs
  *   is to give the caller insight into the graphs that were actually run by the
  *   runtime. Additional information (such as those in step_stats) will match
  *   these graphs.
  *   We also include the pre_optimization_graph since it is usually easier to
  *   read, and is helpful in situations where the caller wants to get a high
  *   level idea of what the built graph looks like (since the various graph
  *   optimization passes might change the structure of the graph significantly).
  * @param sessionMetadata
  *   Metadata about the session.
  */
@SerialVersionUID(0L)
final case class RunMetadata(
                              stepStats: _root_.scala.Option[StepStats] = _root_.scala.None,
                              costGraph: _root_.scala.Option[CostGraphDef] = _root_.scala.None,
                              partitionGraphs: _root_.scala.Seq[GraphDef] = _root_.scala.Seq.empty,
                              functionGraphs: _root_.scala.Seq[RunMetadata.FunctionGraphs] = _root_.scala.Seq.empty,
                              sessionMetadata: _root_.scala.Option[SessionMetadata] = _root_.scala.None,
                              unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[RunMetadata] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (stepStats.isDefined) {
        val __value = stepStats.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (costGraph.isDefined) {
        val __value = costGraph.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      partitionGraphs.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      functionGraphs.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (sessionMetadata.isDefined) {
        val __value = sessionMetadata.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      stepStats.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      costGraph.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      partitionGraphs.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      functionGraphs.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sessionMetadata.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getStepStats: StepStats = stepStats.getOrElse(step_stats.StepStats.defaultInstance)
    def clearStepStats: RunMetadata = copy(stepStats = _root_.scala.None)
    def withStepStats(__v: StepStats): RunMetadata = copy(stepStats = Option(__v))
    def getCostGraph: CostGraphDef = costGraph.getOrElse(cost_graph.CostGraphDef.defaultInstance)
    def clearCostGraph: RunMetadata = copy(costGraph = _root_.scala.None)
    def withCostGraph(__v: CostGraphDef): RunMetadata = copy(costGraph = Option(__v))
    def clearPartitionGraphs = copy(partitionGraphs = _root_.scala.Seq.empty)
    def addPartitionGraphs(__vs: GraphDef *): RunMetadata = addAllPartitionGraphs(__vs)
    def addAllPartitionGraphs(__vs: Iterable[GraphDef]): RunMetadata = copy(partitionGraphs = partitionGraphs ++ __vs)
    def withPartitionGraphs(__v: _root_.scala.Seq[GraphDef]): RunMetadata = copy(partitionGraphs = __v)
    def clearFunctionGraphs = copy(functionGraphs = _root_.scala.Seq.empty)
    def addFunctionGraphs(__vs: RunMetadata.FunctionGraphs *): RunMetadata = addAllFunctionGraphs(__vs)
    def addAllFunctionGraphs(__vs: Iterable[RunMetadata.FunctionGraphs]): RunMetadata = copy(functionGraphs = functionGraphs ++ __vs)
    def withFunctionGraphs(__v: _root_.scala.Seq[RunMetadata.FunctionGraphs]): RunMetadata = copy(functionGraphs = __v)
    def getSessionMetadata: SessionMetadata = sessionMetadata.getOrElse(config.SessionMetadata.defaultInstance)
    def clearSessionMetadata: RunMetadata = copy(sessionMetadata = _root_.scala.None)
    def withSessionMetadata(__v: SessionMetadata): RunMetadata = copy(sessionMetadata = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => stepStats.orNull
        case 2 => costGraph.orNull
        case 3 => partitionGraphs
        case 4 => functionGraphs
        case 5 => sessionMetadata.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => stepStats.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => costGraph.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(partitionGraphs.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(functionGraphs.iterator.map(_.toPMessage).toVector)
        case 5 => sessionMetadata.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: RunMetadata.type = config.RunMetadata
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.RunMetadata])
}

object RunMetadata extends scalapb.GeneratedMessageCompanion[RunMetadata] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[RunMetadata] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): RunMetadata = {
    var __stepStats: _root_.scala.Option[StepStats] = _root_.scala.None
    var __costGraph: _root_.scala.Option[CostGraphDef] = _root_.scala.None
    val __partitionGraphs: _root_.scala.collection.immutable.VectorBuilder[GraphDef] = new _root_.scala.collection.immutable.VectorBuilder[GraphDef]
    val __functionGraphs: _root_.scala.collection.immutable.VectorBuilder[RunMetadata.FunctionGraphs] = new _root_.scala.collection.immutable.VectorBuilder[RunMetadata.FunctionGraphs]
    var __sessionMetadata: _root_.scala.Option[SessionMetadata] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __stepStats = _root_.scala.Option(__stepStats.fold(_root_.scalapb.LiteParser.readMessage[StepStats](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __costGraph = _root_.scala.Option(__costGraph.fold(_root_.scalapb.LiteParser.readMessage[CostGraphDef](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __partitionGraphs += _root_.scalapb.LiteParser.readMessage[GraphDef](_input__)
        case 34 =>
          __functionGraphs += _root_.scalapb.LiteParser.readMessage[RunMetadata.FunctionGraphs](_input__)
        case 42 =>
          __sessionMetadata = _root_.scala.Option(__sessionMetadata.fold(_root_.scalapb.LiteParser.readMessage[SessionMetadata](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    RunMetadata(
        stepStats = __stepStats,
        costGraph = __costGraph,
        partitionGraphs = __partitionGraphs.result(),
        functionGraphs = __functionGraphs.result(),
        sessionMetadata = __sessionMetadata,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[RunMetadata] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      RunMetadata(
        stepStats = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[StepStats]]),
        costGraph = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[CostGraphDef]]),
        partitionGraphs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[GraphDef]]).getOrElse(_root_.scala.Seq.empty),
        functionGraphs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[RunMetadata.FunctionGraphs]]).getOrElse(_root_.scala.Seq.empty),
        sessionMetadata = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[SessionMetadata]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.framework.config.ConfigProtoCompanion.javaDescriptor.getMessageTypes().get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.framework.config.ConfigProtoCompanion.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = StepStats
      case 2 => __out = CostGraphDef
      case 3 => __out = graph.GraphDef
      case 4 => __out = config.RunMetadata.FunctionGraphs
      case 5 => __out = config.SessionMetadata
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      config.RunMetadata.FunctionGraphs
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = RunMetadata(
    stepStats = _root_.scala.None,
    costGraph = _root_.scala.None,
    partitionGraphs = _root_.scala.Seq.empty,
    functionGraphs = _root_.scala.Seq.empty,
    sessionMetadata = _root_.scala.None
  )
  /** @param partitionGraphs
    *   TODO(nareshmodi): Include some sort of function/cache-key identifier?
    */
  @SerialVersionUID(0L)
  final case class FunctionGraphs(
                                   partitionGraphs: _root_.scala.Seq[GraphDef] = _root_.scala.Seq.empty,
                                   preOptimizationGraph: _root_.scala.Option[GraphDef] = _root_.scala.None,
                                   postOptimizationGraph: _root_.scala.Option[GraphDef] = _root_.scala.None,
                                   unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[FunctionGraphs] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        partitionGraphs.foreach { __item =>
          val __value = __item
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        if (preOptimizationGraph.isDefined) {
          val __value = preOptimizationGraph.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (postOptimizationGraph.isDefined) {
          val __value = postOptimizationGraph.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        partitionGraphs.foreach { __v =>
          val __m = __v
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        preOptimizationGraph.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        postOptimizationGraph.foreach { __v =>
          val __m = __v
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def clearPartitionGraphs = copy(partitionGraphs = _root_.scala.Seq.empty)
      def addPartitionGraphs(__vs: GraphDef *): FunctionGraphs = addAllPartitionGraphs(__vs)
      def addAllPartitionGraphs(__vs: Iterable[GraphDef]): FunctionGraphs = copy(partitionGraphs = partitionGraphs ++ __vs)
      def withPartitionGraphs(__v: _root_.scala.Seq[GraphDef]): FunctionGraphs = copy(partitionGraphs = __v)
      def getPreOptimizationGraph: GraphDef = preOptimizationGraph.getOrElse(graph.GraphDef.defaultInstance)
      def clearPreOptimizationGraph: FunctionGraphs = copy(preOptimizationGraph = _root_.scala.None)
      def withPreOptimizationGraph(__v: GraphDef): FunctionGraphs = copy(preOptimizationGraph = Option(__v))
      def getPostOptimizationGraph: GraphDef = postOptimizationGraph.getOrElse(graph.GraphDef.defaultInstance)
      def clearPostOptimizationGraph: FunctionGraphs = copy(postOptimizationGraph = _root_.scala.None)
      def withPostOptimizationGraph(__v: GraphDef): FunctionGraphs = copy(postOptimizationGraph = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => partitionGraphs
          case 2 => preOptimizationGraph.orNull
          case 3 => postOptimizationGraph.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(partitionGraphs.iterator.map(_.toPMessage).toVector)
          case 2 => preOptimizationGraph.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => postOptimizationGraph.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: RunMetadata.FunctionGraphs.type = config.RunMetadata.FunctionGraphs
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.RunMetadata.FunctionGraphs])
  }
  
  object FunctionGraphs extends scalapb.GeneratedMessageCompanion[RunMetadata.FunctionGraphs] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[RunMetadata.FunctionGraphs] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): RunMetadata.FunctionGraphs = {
      val __partitionGraphs: _root_.scala.collection.immutable.VectorBuilder[GraphDef] = new _root_.scala.collection.immutable.VectorBuilder[GraphDef]
      var __preOptimizationGraph: _root_.scala.Option[GraphDef] = _root_.scala.None
      var __postOptimizationGraph: _root_.scala.Option[GraphDef] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __partitionGraphs += _root_.scalapb.LiteParser.readMessage[GraphDef](_input__)
          case 18 =>
            __preOptimizationGraph = _root_.scala.Option(__preOptimizationGraph.fold(_root_.scalapb.LiteParser.readMessage[GraphDef](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 26 =>
            __postOptimizationGraph = _root_.scala.Option(__postOptimizationGraph.fold(_root_.scalapb.LiteParser.readMessage[GraphDef](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      config.RunMetadata.FunctionGraphs(
          partitionGraphs = __partitionGraphs.result(),
          preOptimizationGraph = __preOptimizationGraph,
          postOptimizationGraph = __postOptimizationGraph,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[RunMetadata.FunctionGraphs] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        config.RunMetadata.FunctionGraphs(
          partitionGraphs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[GraphDef]]).getOrElse(_root_.scala.Seq.empty),
          preOptimizationGraph = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[GraphDef]]),
          postOptimizationGraph = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[GraphDef]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = config.RunMetadata.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = config.RunMetadata.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = graph.GraphDef
        case 2 => __out = graph.GraphDef
        case 3 => __out = graph.GraphDef
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = config.RunMetadata.FunctionGraphs(
      partitionGraphs = _root_.scala.Seq.empty,
      preOptimizationGraph = _root_.scala.None,
      postOptimizationGraph = _root_.scala.None
    )
    implicit class FunctionGraphsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, RunMetadata.FunctionGraphs]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, RunMetadata.FunctionGraphs](_l) {
      def partitionGraphs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[GraphDef]] = field(_.partitionGraphs)((c_, f_) => c_.copy(partitionGraphs = f_))
      def preOptimizationGraph: _root_.scalapb.lenses.Lens[UpperPB, GraphDef] = field(_.getPreOptimizationGraph)((c_, f_) => c_.copy(preOptimizationGraph = _root_.scala.Option(f_)))
      def optionalPreOptimizationGraph: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[GraphDef]] = field(_.preOptimizationGraph)((c_, f_) => c_.copy(preOptimizationGraph = f_))
      def postOptimizationGraph: _root_.scalapb.lenses.Lens[UpperPB, GraphDef] = field(_.getPostOptimizationGraph)((c_, f_) => c_.copy(postOptimizationGraph = _root_.scala.Option(f_)))
      def optionalPostOptimizationGraph: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[GraphDef]] = field(_.postOptimizationGraph)((c_, f_) => c_.copy(postOptimizationGraph = f_))
    }
    final val PARTITION_GRAPHS_FIELD_NUMBER = 1
    final val PRE_OPTIMIZATION_GRAPH_FIELD_NUMBER = 2
    final val POST_OPTIMIZATION_GRAPH_FIELD_NUMBER = 3
    def of(
            partitionGraphs: _root_.scala.Seq[GraphDef],
            preOptimizationGraph: _root_.scala.Option[GraphDef],
            postOptimizationGraph: _root_.scala.Option[GraphDef]
    ): RunMetadata.FunctionGraphs = config.RunMetadata.FunctionGraphs(
      partitionGraphs,
      preOptimizationGraph,
      postOptimizationGraph
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.RunMetadata.FunctionGraphs])
  }
  
  implicit class RunMetadataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, RunMetadata]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, RunMetadata](_l) {
    def stepStats: _root_.scalapb.lenses.Lens[UpperPB, StepStats] = field(_.getStepStats)((c_, f_) => c_.copy(stepStats = _root_.scala.Option(f_)))
    def optionalStepStats: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[StepStats]] = field(_.stepStats)((c_, f_) => c_.copy(stepStats = f_))
    def costGraph: _root_.scalapb.lenses.Lens[UpperPB, CostGraphDef] = field(_.getCostGraph)((c_, f_) => c_.copy(costGraph = _root_.scala.Option(f_)))
    def optionalCostGraph: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[CostGraphDef]] = field(_.costGraph)((c_, f_) => c_.copy(costGraph = f_))
    def partitionGraphs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[GraphDef]] = field(_.partitionGraphs)((c_, f_) => c_.copy(partitionGraphs = f_))
    def functionGraphs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[RunMetadata.FunctionGraphs]] = field(_.functionGraphs)((c_, f_) => c_.copy(functionGraphs = f_))
    def sessionMetadata: _root_.scalapb.lenses.Lens[UpperPB, SessionMetadata] = field(_.getSessionMetadata)((c_, f_) => c_.copy(sessionMetadata = _root_.scala.Option(f_)))
    def optionalSessionMetadata: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[SessionMetadata]] = field(_.sessionMetadata)((c_, f_) => c_.copy(sessionMetadata = f_))
  }
  final val STEP_STATS_FIELD_NUMBER = 1
  final val COST_GRAPH_FIELD_NUMBER = 2
  final val PARTITION_GRAPHS_FIELD_NUMBER = 3
  final val FUNCTION_GRAPHS_FIELD_NUMBER = 4
  final val SESSION_METADATA_FIELD_NUMBER = 5
  def of(
          stepStats: _root_.scala.Option[StepStats],
          costGraph: _root_.scala.Option[CostGraphDef],
          partitionGraphs: _root_.scala.Seq[GraphDef],
          functionGraphs: _root_.scala.Seq[RunMetadata.FunctionGraphs],
          sessionMetadata: _root_.scala.Option[SessionMetadata]
  ): RunMetadata = RunMetadata(
    stepStats,
    costGraph,
    partitionGraphs,
    functionGraphs,
    sessionMetadata
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.RunMetadata])
}
