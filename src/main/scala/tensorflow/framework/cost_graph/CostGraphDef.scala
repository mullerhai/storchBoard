// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorflow.framework.cost_graph

import tensorflow.framework.tensor_shape.TensorShapeProto
import tensorflow.framework.types.DataType
import tensorflow.framework.{cost_graph, tensor_shape, types}

@SerialVersionUID(0L)
final case class CostGraphDef(
                               node: _root_.scala.Seq[CostGraphDef.Node] = _root_.scala.Seq.empty,
                               cost: _root_.scala.Seq[CostGraphDef.AggregatedCost] = _root_.scala.Seq.empty,
                               unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CostGraphDef] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      node.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      cost.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      node.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      cost.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def clearNode = copy(node = _root_.scala.Seq.empty)
    def addNode(__vs: CostGraphDef.Node *): CostGraphDef = addAllNode(__vs)
    def addAllNode(__vs: Iterable[CostGraphDef.Node]): CostGraphDef = copy(node = node ++ __vs)
    def withNode(__v: _root_.scala.Seq[CostGraphDef.Node]): CostGraphDef = copy(node = __v)
    def clearCost = copy(cost = _root_.scala.Seq.empty)
    def addCost(__vs: CostGraphDef.AggregatedCost *): CostGraphDef = addAllCost(__vs)
    def addAllCost(__vs: Iterable[CostGraphDef.AggregatedCost]): CostGraphDef = copy(cost = cost ++ __vs)
    def withCost(__v: _root_.scala.Seq[CostGraphDef.AggregatedCost]): CostGraphDef = copy(cost = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => node
        case 2 => cost
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(node.iterator.map(_.toPMessage).toVector)
        case 2 => _root_.scalapb.descriptors.PRepeated(cost.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: CostGraphDef.type = cost_graph.CostGraphDef
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.CostGraphDef])
}

object CostGraphDef extends scalapb.GeneratedMessageCompanion[CostGraphDef] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[CostGraphDef] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): CostGraphDef = {
    val __node: _root_.scala.collection.immutable.VectorBuilder[CostGraphDef.Node] = new _root_.scala.collection.immutable.VectorBuilder[CostGraphDef.Node]
    val __cost: _root_.scala.collection.immutable.VectorBuilder[CostGraphDef.AggregatedCost] = new _root_.scala.collection.immutable.VectorBuilder[CostGraphDef.AggregatedCost]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __node += _root_.scalapb.LiteParser.readMessage[CostGraphDef.Node](_input__)
        case 18 =>
          __cost += _root_.scalapb.LiteParser.readMessage[CostGraphDef.AggregatedCost](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    CostGraphDef(
        node = __node.result(),
        cost = __cost.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[CostGraphDef] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      CostGraphDef(
        node = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[CostGraphDef.Node]]).getOrElse(_root_.scala.Seq.empty),
        cost = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[CostGraphDef.AggregatedCost]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.framework.cost_graph.CostGraphProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.framework.cost_graph.CostGraphProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = cost_graph.CostGraphDef.Node
      case 2 => __out = cost_graph.CostGraphDef.AggregatedCost
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      cost_graph.CostGraphDef.Node,
      cost_graph.CostGraphDef.AggregatedCost
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = CostGraphDef(
    node = _root_.scala.Seq.empty,
    cost = _root_.scala.Seq.empty
  )
  /** @param name
    *   The name of the node. Names are globally unique.
    * @param device
    *   The device of the node. Can be empty if the node is mapped to the
    *   default partition or partitioning hasn't been run yet.
    * @param id
    *   The id of the node. Node ids are only unique inside a partition.
    * @param temporaryMemorySize
    *   Temporary memory used by this node.
    * @param persistentMemorySize
    *   Persistent memory used by this node.
    * @param computeCost
    *   Estimate of the computational cost of this node, in microseconds.
    * @param computeTime
    *   Analytical estimate of the computational cost of this node, in
    *   microseconds.
    * @param memoryTime
    *   Analytical estimate of the memory access cost of this node, in
    *   microseconds.
    * @param isFinal
    *   If true, the output is permanent: it can't be discarded, because this
    *   node is part of the "final output". Nodes may depend on final nodes.
    * @param controlInput
    *   Ids of the control inputs for this node.
    * @param inaccurate
    *   Are the costs inaccurate?
    */
  @SerialVersionUID(0L)
  final case class Node(
                         name: _root_.scala.Predef.String = "",
                         device: _root_.scala.Predef.String = "",
                         id: _root_.scala.Int = 0,
                         inputInfo: _root_.scala.Seq[CostGraphDef.Node.InputInfo] = _root_.scala.Seq.empty,
                         outputInfo: _root_.scala.Seq[CostGraphDef.Node.OutputInfo] = _root_.scala.Seq.empty,
                         temporaryMemorySize: _root_.scala.Long = 0L,
                         persistentMemorySize: _root_.scala.Long = 0L,
                         @scala.deprecated(message="Marked as deprecated in proto file", "") hostTempMemorySize: _root_.scala.Long = 0L,
                         @scala.deprecated(message="Marked as deprecated in proto file", "") deviceTempMemorySize: _root_.scala.Long = 0L,
                         @scala.deprecated(message="Marked as deprecated in proto file", "") devicePersistentMemorySize: _root_.scala.Long = 0L,
                         computeCost: _root_.scala.Long = 0L,
                         computeTime: _root_.scala.Long = 0L,
                         memoryTime: _root_.scala.Long = 0L,
                         isFinal: _root_.scala.Boolean = false,
                         controlInput: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
                         inaccurate: _root_.scala.Boolean = false,
                         unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Node] {
      private[this] def controlInputSerializedSize = {
        if (__controlInputSerializedSizeField == 0) __controlInputSerializedSizeField = {
          var __s: _root_.scala.Int = 0
          controlInput.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(__i))
          __s
        }
        __controlInputSerializedSizeField
      }
      @transient private[this] var __controlInputSerializedSizeField: _root_.scala.Int = 0
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = name
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = device
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        
        {
          val __value = id
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
          }
        };
        inputInfo.foreach { __item =>
          val __value = __item
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        outputInfo.foreach { __item =>
          val __value = __item
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        
        {
          val __value = temporaryMemorySize
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, __value)
          }
        };
        
        {
          val __value = persistentMemorySize
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(12, __value)
          }
        };
        
        {
          val __value = hostTempMemorySize
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(10, __value)
          }
        };
        
        {
          val __value = deviceTempMemorySize
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(11, __value)
          }
        };
        
        {
          val __value = devicePersistentMemorySize
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(16, __value)
          }
        };
        
        {
          val __value = computeCost
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(9, __value)
          }
        };
        
        {
          val __value = computeTime
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(14, __value)
          }
        };
        
        {
          val __value = memoryTime
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(15, __value)
          }
        };
        
        {
          val __value = isFinal
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(7, __value)
          }
        };
        if (controlInput.nonEmpty) {
          val __localsize = controlInputSerializedSize
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
        }
        
        {
          val __value = inaccurate
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(17, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = name
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = device
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        {
          val __v = id
          if (__v != 0) {
            _output__.writeInt32(3, __v)
          }
        };
        inputInfo.foreach { __v =>
          val __m = __v
          _output__.writeTag(4, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        outputInfo.foreach { __v =>
          val __m = __v
          _output__.writeTag(5, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        {
          val __v = temporaryMemorySize
          if (__v != 0L) {
            _output__.writeInt64(6, __v)
          }
        };
        {
          val __v = isFinal
          if (__v != false) {
            _output__.writeBool(7, __v)
          }
        };
        if (controlInput.nonEmpty) {
          _output__.writeTag(8, 2)
          _output__.writeUInt32NoTag(controlInputSerializedSize)
          controlInput.foreach(_output__.writeInt32NoTag)
        };
        {
          val __v = computeCost
          if (__v != 0L) {
            _output__.writeInt64(9, __v)
          }
        };
        {
          val __v = hostTempMemorySize
          if (__v != 0L) {
            _output__.writeInt64(10, __v)
          }
        };
        {
          val __v = deviceTempMemorySize
          if (__v != 0L) {
            _output__.writeInt64(11, __v)
          }
        };
        {
          val __v = persistentMemorySize
          if (__v != 0L) {
            _output__.writeInt64(12, __v)
          }
        };
        {
          val __v = computeTime
          if (__v != 0L) {
            _output__.writeInt64(14, __v)
          }
        };
        {
          val __v = memoryTime
          if (__v != 0L) {
            _output__.writeInt64(15, __v)
          }
        };
        {
          val __v = devicePersistentMemorySize
          if (__v != 0L) {
            _output__.writeInt64(16, __v)
          }
        };
        {
          val __v = inaccurate
          if (__v != false) {
            _output__.writeBool(17, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withName(__v: _root_.scala.Predef.String): Node = copy(name = __v)
      def withDevice(__v: _root_.scala.Predef.String): Node = copy(device = __v)
      def withId(__v: _root_.scala.Int): Node = copy(id = __v)
      def clearInputInfo = copy(inputInfo = _root_.scala.Seq.empty)
      def addInputInfo(__vs: CostGraphDef.Node.InputInfo *): Node = addAllInputInfo(__vs)
      def addAllInputInfo(__vs: Iterable[CostGraphDef.Node.InputInfo]): Node = copy(inputInfo = inputInfo ++ __vs)
      def withInputInfo(__v: _root_.scala.Seq[CostGraphDef.Node.InputInfo]): Node = copy(inputInfo = __v)
      def clearOutputInfo = copy(outputInfo = _root_.scala.Seq.empty)
      def addOutputInfo(__vs: CostGraphDef.Node.OutputInfo *): Node = addAllOutputInfo(__vs)
      def addAllOutputInfo(__vs: Iterable[CostGraphDef.Node.OutputInfo]): Node = copy(outputInfo = outputInfo ++ __vs)
      def withOutputInfo(__v: _root_.scala.Seq[CostGraphDef.Node.OutputInfo]): Node = copy(outputInfo = __v)
      def withTemporaryMemorySize(__v: _root_.scala.Long): Node = copy(temporaryMemorySize = __v)
      def withPersistentMemorySize(__v: _root_.scala.Long): Node = copy(persistentMemorySize = __v)
      def withHostTempMemorySize(__v: _root_.scala.Long): Node = copy(hostTempMemorySize = __v)
      def withDeviceTempMemorySize(__v: _root_.scala.Long): Node = copy(deviceTempMemorySize = __v)
      def withDevicePersistentMemorySize(__v: _root_.scala.Long): Node = copy(devicePersistentMemorySize = __v)
      def withComputeCost(__v: _root_.scala.Long): Node = copy(computeCost = __v)
      def withComputeTime(__v: _root_.scala.Long): Node = copy(computeTime = __v)
      def withMemoryTime(__v: _root_.scala.Long): Node = copy(memoryTime = __v)
      def withIsFinal(__v: _root_.scala.Boolean): Node = copy(isFinal = __v)
      def clearControlInput = copy(controlInput = _root_.scala.Seq.empty)
      def addControlInput(__vs: _root_.scala.Int *): Node = addAllControlInput(__vs)
      def addAllControlInput(__vs: Iterable[_root_.scala.Int]): Node = copy(controlInput = controlInput ++ __vs)
      def withControlInput(__v: _root_.scala.Seq[_root_.scala.Int]): Node = copy(controlInput = __v)
      def withInaccurate(__v: _root_.scala.Boolean): Node = copy(inaccurate = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = name
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = device
            if (__t != "") __t else null
          }
          case 3 => {
            val __t = id
            if (__t != 0) __t else null
          }
          case 4 => inputInfo
          case 5 => outputInfo
          case 6 => {
            val __t = temporaryMemorySize
            if (__t != 0L) __t else null
          }
          case 12 => {
            val __t = persistentMemorySize
            if (__t != 0L) __t else null
          }
          case 10 => {
            val __t = hostTempMemorySize
            if (__t != 0L) __t else null
          }
          case 11 => {
            val __t = deviceTempMemorySize
            if (__t != 0L) __t else null
          }
          case 16 => {
            val __t = devicePersistentMemorySize
            if (__t != 0L) __t else null
          }
          case 9 => {
            val __t = computeCost
            if (__t != 0L) __t else null
          }
          case 14 => {
            val __t = computeTime
            if (__t != 0L) __t else null
          }
          case 15 => {
            val __t = memoryTime
            if (__t != 0L) __t else null
          }
          case 7 => {
            val __t = isFinal
            if (__t != false) __t else null
          }
          case 8 => controlInput
          case 17 => {
            val __t = inaccurate
            if (__t != false) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(name)
          case 2 => _root_.scalapb.descriptors.PString(device)
          case 3 => _root_.scalapb.descriptors.PInt(id)
          case 4 => _root_.scalapb.descriptors.PRepeated(inputInfo.iterator.map(_.toPMessage).toVector)
          case 5 => _root_.scalapb.descriptors.PRepeated(outputInfo.iterator.map(_.toPMessage).toVector)
          case 6 => _root_.scalapb.descriptors.PLong(temporaryMemorySize)
          case 12 => _root_.scalapb.descriptors.PLong(persistentMemorySize)
          case 10 => _root_.scalapb.descriptors.PLong(hostTempMemorySize)
          case 11 => _root_.scalapb.descriptors.PLong(deviceTempMemorySize)
          case 16 => _root_.scalapb.descriptors.PLong(devicePersistentMemorySize)
          case 9 => _root_.scalapb.descriptors.PLong(computeCost)
          case 14 => _root_.scalapb.descriptors.PLong(computeTime)
          case 15 => _root_.scalapb.descriptors.PLong(memoryTime)
          case 7 => _root_.scalapb.descriptors.PBoolean(isFinal)
          case 8 => _root_.scalapb.descriptors.PRepeated(controlInput.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
          case 17 => _root_.scalapb.descriptors.PBoolean(inaccurate)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: CostGraphDef.Node.type = cost_graph.CostGraphDef.Node
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.CostGraphDef.Node])
  }
  
  object Node extends scalapb.GeneratedMessageCompanion[CostGraphDef.Node] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[CostGraphDef.Node] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): CostGraphDef.Node = {
      var __name: _root_.scala.Predef.String = ""
      var __device: _root_.scala.Predef.String = ""
      var __id: _root_.scala.Int = 0
      val __inputInfo: _root_.scala.collection.immutable.VectorBuilder[CostGraphDef.Node.InputInfo] = new _root_.scala.collection.immutable.VectorBuilder[CostGraphDef.Node.InputInfo]
      val __outputInfo: _root_.scala.collection.immutable.VectorBuilder[CostGraphDef.Node.OutputInfo] = new _root_.scala.collection.immutable.VectorBuilder[CostGraphDef.Node.OutputInfo]
      var __temporaryMemorySize: _root_.scala.Long = 0L
      var __persistentMemorySize: _root_.scala.Long = 0L
      var __hostTempMemorySize: _root_.scala.Long = 0L
      var __deviceTempMemorySize: _root_.scala.Long = 0L
      var __devicePersistentMemorySize: _root_.scala.Long = 0L
      var __computeCost: _root_.scala.Long = 0L
      var __computeTime: _root_.scala.Long = 0L
      var __memoryTime: _root_.scala.Long = 0L
      var __isFinal: _root_.scala.Boolean = false
      val __controlInput: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
      var __inaccurate: _root_.scala.Boolean = false
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __name = _input__.readStringRequireUtf8()
          case 18 =>
            __device = _input__.readStringRequireUtf8()
          case 24 =>
            __id = _input__.readInt32()
          case 34 =>
            __inputInfo += _root_.scalapb.LiteParser.readMessage[CostGraphDef.Node.InputInfo](_input__)
          case 42 =>
            __outputInfo += _root_.scalapb.LiteParser.readMessage[CostGraphDef.Node.OutputInfo](_input__)
          case 48 =>
            __temporaryMemorySize = _input__.readInt64()
          case 96 =>
            __persistentMemorySize = _input__.readInt64()
          case 80 =>
            __hostTempMemorySize = _input__.readInt64()
          case 88 =>
            __deviceTempMemorySize = _input__.readInt64()
          case 128 =>
            __devicePersistentMemorySize = _input__.readInt64()
          case 72 =>
            __computeCost = _input__.readInt64()
          case 112 =>
            __computeTime = _input__.readInt64()
          case 120 =>
            __memoryTime = _input__.readInt64()
          case 56 =>
            __isFinal = _input__.readBool()
          case 64 =>
            __controlInput += _input__.readInt32()
          case 66 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __controlInput += _input__.readInt32()
            }
            _input__.popLimit(oldLimit)
          }
          case 136 =>
            __inaccurate = _input__.readBool()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      cost_graph.CostGraphDef.Node(
          name = __name,
          device = __device,
          id = __id,
          inputInfo = __inputInfo.result(),
          outputInfo = __outputInfo.result(),
          temporaryMemorySize = __temporaryMemorySize,
          persistentMemorySize = __persistentMemorySize,
          hostTempMemorySize = __hostTempMemorySize,
          deviceTempMemorySize = __deviceTempMemorySize,
          devicePersistentMemorySize = __devicePersistentMemorySize,
          computeCost = __computeCost,
          computeTime = __computeTime,
          memoryTime = __memoryTime,
          isFinal = __isFinal,
          controlInput = __controlInput.result(),
          inaccurate = __inaccurate,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[CostGraphDef.Node] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        cost_graph.CostGraphDef.Node(
          name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          device = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          inputInfo = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[CostGraphDef.Node.InputInfo]]).getOrElse(_root_.scala.Seq.empty),
          outputInfo = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[CostGraphDef.Node.OutputInfo]]).getOrElse(_root_.scala.Seq.empty),
          temporaryMemorySize = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
          persistentMemorySize = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
          hostTempMemorySize = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
          deviceTempMemorySize = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
          devicePersistentMemorySize = __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
          computeCost = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
          computeTime = __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
          memoryTime = __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
          isFinal = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
          controlInput = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
          inaccurate = __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cost_graph.CostGraphDef.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cost_graph.CostGraphDef.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 4 => __out = cost_graph.CostGraphDef.Node.InputInfo
        case 5 => __out = cost_graph.CostGraphDef.Node.OutputInfo
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
      Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
        cost_graph.CostGraphDef.Node.InputInfo,
        cost_graph.CostGraphDef.Node.OutputInfo
      )
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = cost_graph.CostGraphDef.Node(
      name = "",
      device = "",
      id = 0,
      inputInfo = _root_.scala.Seq.empty,
      outputInfo = _root_.scala.Seq.empty,
      temporaryMemorySize = 0L,
      persistentMemorySize = 0L,
      hostTempMemorySize = 0L,
      deviceTempMemorySize = 0L,
      devicePersistentMemorySize = 0L,
      computeCost = 0L,
      computeTime = 0L,
      memoryTime = 0L,
      isFinal = false,
      controlInput = _root_.scala.Seq.empty,
      inaccurate = false
    )
    /** Inputs of this node. They must be executed before this node can be
      * executed. An input is a particular output of another node, specified
      * by the node id and the output index.
      */
    @SerialVersionUID(0L)
    final case class InputInfo(
        precedingNode: _root_.scala.Int = 0,
        precedingPort: _root_.scala.Int = 0,
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[InputInfo] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          
          {
            val __value = precedingNode
            if (__value != 0) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
            }
          };
          
          {
            val __value = precedingPort
            if (__value != 0) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
            }
          };
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          {
            val __v = precedingNode
            if (__v != 0) {
              _output__.writeInt32(1, __v)
            }
          };
          {
            val __v = precedingPort
            if (__v != 0) {
              _output__.writeInt32(2, __v)
            }
          };
          unknownFields.writeTo(_output__)
        }
        def withPrecedingNode(__v: _root_.scala.Int): InputInfo = copy(precedingNode = __v)
        def withPrecedingPort(__v: _root_.scala.Int): InputInfo = copy(precedingPort = __v)
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => {
              val __t = precedingNode
              if (__t != 0) __t else null
            }
            case 2 => {
              val __t = precedingPort
              if (__t != 0) __t else null
            }
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PInt(precedingNode)
            case 2 => _root_.scalapb.descriptors.PInt(precedingPort)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: CostGraphDef.Node.InputInfo.type = cost_graph.CostGraphDef.Node.InputInfo
        // @@protoc_insertion_point(GeneratedMessage[tensorboard.CostGraphDef.Node.InputInfo])
    }
    
    object InputInfo extends scalapb.GeneratedMessageCompanion[CostGraphDef.Node.InputInfo] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[CostGraphDef.Node.InputInfo] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): CostGraphDef.Node.InputInfo = {
        var __precedingNode: _root_.scala.Int = 0
        var __precedingPort: _root_.scala.Int = 0
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __precedingNode = _input__.readInt32()
            case 16 =>
              __precedingPort = _input__.readInt32()
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        cost_graph.CostGraphDef.Node.InputInfo(
            precedingNode = __precedingNode,
            precedingPort = __precedingPort,
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[CostGraphDef.Node.InputInfo] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          cost_graph.CostGraphDef.Node.InputInfo(
            precedingNode = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
            precedingPort = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0)
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cost_graph.CostGraphDef.Node.javaDescriptor.getNestedTypes().get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cost_graph.CostGraphDef.Node.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = cost_graph.CostGraphDef.Node.InputInfo(
        precedingNode = 0,
        precedingPort = 0
      )
      implicit class InputInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, CostGraphDef.Node.InputInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, CostGraphDef.Node.InputInfo](_l) {
        def precedingNode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.precedingNode)((c_, f_) => c_.copy(precedingNode = f_))
        def precedingPort: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.precedingPort)((c_, f_) => c_.copy(precedingPort = f_))
      }
      final val PRECEDING_NODE_FIELD_NUMBER = 1
      final val PRECEDING_PORT_FIELD_NUMBER = 2
      def of(
        precedingNode: _root_.scala.Int,
        precedingPort: _root_.scala.Int
      ): CostGraphDef.Node.InputInfo = cost_graph.CostGraphDef.Node.InputInfo(
        precedingNode,
        precedingPort
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.CostGraphDef.Node.InputInfo])
    }
    
    /** Outputs of this node.
      *
      * @param aliasInputPort
      *   If &gt;= 0, the output is an alias of an input. Note that an alias input
      *   may itself be an alias. The algorithm will therefore need to follow
      *   those pointers.
      */
    @SerialVersionUID(0L)
    final case class OutputInfo(
                                 size: _root_.scala.Long = 0L,
                                 aliasInputPort: _root_.scala.Long = 0L,
                                 shape: _root_.scala.Option[TensorShapeProto] = _root_.scala.None,
                                 dtype: DataType = DataType.DT_INVALID,
                                 unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[OutputInfo] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          
          {
            val __value = size
            if (__value != 0L) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
            }
          };
          
          {
            val __value = aliasInputPort
            if (__value != 0L) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
            }
          };
          if (shape.isDefined) {
            val __value = shape.get
            __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
          };
          
          {
            val __value = dtype.value
            if (__value != 0) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(4, __value)
            }
          };
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          {
            val __v = size
            if (__v != 0L) {
              _output__.writeInt64(1, __v)
            }
          };
          {
            val __v = aliasInputPort
            if (__v != 0L) {
              _output__.writeInt64(2, __v)
            }
          };
          shape.foreach { __v =>
            val __m = __v
            _output__.writeTag(3, 2)
            _output__.writeUInt32NoTag(__m.serializedSize)
            __m.writeTo(_output__)
          };
          {
            val __v = dtype.value
            if (__v != 0) {
              _output__.writeEnum(4, __v)
            }
          };
          unknownFields.writeTo(_output__)
        }
        def withSize(__v: _root_.scala.Long): OutputInfo = copy(size = __v)
        def withAliasInputPort(__v: _root_.scala.Long): OutputInfo = copy(aliasInputPort = __v)
        def getShape: TensorShapeProto = shape.getOrElse(tensor_shape.TensorShapeProto.defaultInstance)
        def clearShape: OutputInfo = copy(shape = _root_.scala.None)
        def withShape(__v: TensorShapeProto): OutputInfo = copy(shape = Option(__v))
        def withDtype(__v: DataType): OutputInfo = copy(dtype = __v)
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => {
              val __t = size
              if (__t != 0L) __t else null
            }
            case 2 => {
              val __t = aliasInputPort
              if (__t != 0L) __t else null
            }
            case 3 => shape.orNull
            case 4 => {
              val __t = dtype.javaValueDescriptor
              if (__t.getNumber() != 0) __t else null
            }
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PLong(size)
            case 2 => _root_.scalapb.descriptors.PLong(aliasInputPort)
            case 3 => shape.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 4 => _root_.scalapb.descriptors.PEnum(dtype.scalaValueDescriptor)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: CostGraphDef.Node.OutputInfo.type = cost_graph.CostGraphDef.Node.OutputInfo
        // @@protoc_insertion_point(GeneratedMessage[tensorboard.CostGraphDef.Node.OutputInfo])
    }
    
    object OutputInfo extends scalapb.GeneratedMessageCompanion[CostGraphDef.Node.OutputInfo] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[CostGraphDef.Node.OutputInfo] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): CostGraphDef.Node.OutputInfo = {
        var __size: _root_.scala.Long = 0L
        var __aliasInputPort: _root_.scala.Long = 0L
        var __shape: _root_.scala.Option[TensorShapeProto] = _root_.scala.None
        var __dtype: DataType = types.DataType.DT_INVALID
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __size = _input__.readInt64()
            case 16 =>
              __aliasInputPort = _input__.readInt64()
            case 26 =>
              __shape = _root_.scala.Option(__shape.fold(_root_.scalapb.LiteParser.readMessage[TensorShapeProto](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
            case 32 =>
              __dtype = types.DataType.fromValue(_input__.readEnum())
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        cost_graph.CostGraphDef.Node.OutputInfo(
            size = __size,
            aliasInputPort = __aliasInputPort,
            shape = __shape,
            dtype = __dtype,
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[CostGraphDef.Node.OutputInfo] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          cost_graph.CostGraphDef.Node.OutputInfo(
            size = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
            aliasInputPort = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
            shape = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[TensorShapeProto]]),
            dtype = types.DataType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(types.DataType.DT_INVALID.scalaValueDescriptor).number)
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cost_graph.CostGraphDef.Node.javaDescriptor.getNestedTypes().get(1)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cost_graph.CostGraphDef.Node.scalaDescriptor.nestedMessages(1)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
        var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
        (__number: @_root_.scala.unchecked) match {
          case 3 => __out = tensor_shape.TensorShapeProto
        }
        __out
      }
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 4 => types.DataType
        }
      }
      lazy val defaultInstance = cost_graph.CostGraphDef.Node.OutputInfo(
        size = 0L,
        aliasInputPort = 0L,
        shape = _root_.scala.None,
        dtype = types.DataType.DT_INVALID
      )
      implicit class OutputInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, CostGraphDef.Node.OutputInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, CostGraphDef.Node.OutputInfo](_l) {
        def size: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.size)((c_, f_) => c_.copy(size = f_))
        def aliasInputPort: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.aliasInputPort)((c_, f_) => c_.copy(aliasInputPort = f_))
        def shape: _root_.scalapb.lenses.Lens[UpperPB, TensorShapeProto] = field(_.getShape)((c_, f_) => c_.copy(shape = _root_.scala.Option(f_)))
        def optionalShape: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[TensorShapeProto]] = field(_.shape)((c_, f_) => c_.copy(shape = f_))
        def dtype: _root_.scalapb.lenses.Lens[UpperPB, DataType] = field(_.dtype)((c_, f_) => c_.copy(dtype = f_))
      }
      final val SIZE_FIELD_NUMBER = 1
      final val ALIAS_INPUT_PORT_FIELD_NUMBER = 2
      final val SHAPE_FIELD_NUMBER = 3
      final val DTYPE_FIELD_NUMBER = 4
      def of(
              size: _root_.scala.Long,
              aliasInputPort: _root_.scala.Long,
              shape: _root_.scala.Option[TensorShapeProto],
              dtype: DataType
      ): CostGraphDef.Node.OutputInfo = cost_graph.CostGraphDef.Node.OutputInfo(
        size,
        aliasInputPort,
        shape,
        dtype
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.CostGraphDef.Node.OutputInfo])
    }
    
    implicit class NodeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, CostGraphDef.Node]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, CostGraphDef.Node](_l) {
      def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
      def device: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.device)((c_, f_) => c_.copy(device = f_))
      def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.id)((c_, f_) => c_.copy(id = f_))
      def inputInfo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[CostGraphDef.Node.InputInfo]] = field(_.inputInfo)((c_, f_) => c_.copy(inputInfo = f_))
      def outputInfo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[CostGraphDef.Node.OutputInfo]] = field(_.outputInfo)((c_, f_) => c_.copy(outputInfo = f_))
      def temporaryMemorySize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.temporaryMemorySize)((c_, f_) => c_.copy(temporaryMemorySize = f_))
      def persistentMemorySize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.persistentMemorySize)((c_, f_) => c_.copy(persistentMemorySize = f_))
      def hostTempMemorySize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.hostTempMemorySize)((c_, f_) => c_.copy(hostTempMemorySize = f_))
      def deviceTempMemorySize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.deviceTempMemorySize)((c_, f_) => c_.copy(deviceTempMemorySize = f_))
      def devicePersistentMemorySize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.devicePersistentMemorySize)((c_, f_) => c_.copy(devicePersistentMemorySize = f_))
      def computeCost: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.computeCost)((c_, f_) => c_.copy(computeCost = f_))
      def computeTime: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.computeTime)((c_, f_) => c_.copy(computeTime = f_))
      def memoryTime: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.memoryTime)((c_, f_) => c_.copy(memoryTime = f_))
      def isFinal: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.isFinal)((c_, f_) => c_.copy(isFinal = f_))
      def controlInput: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.controlInput)((c_, f_) => c_.copy(controlInput = f_))
      def inaccurate: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.inaccurate)((c_, f_) => c_.copy(inaccurate = f_))
    }
    final val NAME_FIELD_NUMBER = 1
    final val DEVICE_FIELD_NUMBER = 2
    final val ID_FIELD_NUMBER = 3
    final val INPUT_INFO_FIELD_NUMBER = 4
    final val OUTPUT_INFO_FIELD_NUMBER = 5
    final val TEMPORARY_MEMORY_SIZE_FIELD_NUMBER = 6
    final val PERSISTENT_MEMORY_SIZE_FIELD_NUMBER = 12
    final val HOST_TEMP_MEMORY_SIZE_FIELD_NUMBER = 10
    final val DEVICE_TEMP_MEMORY_SIZE_FIELD_NUMBER = 11
    final val DEVICE_PERSISTENT_MEMORY_SIZE_FIELD_NUMBER = 16
    final val COMPUTE_COST_FIELD_NUMBER = 9
    final val COMPUTE_TIME_FIELD_NUMBER = 14
    final val MEMORY_TIME_FIELD_NUMBER = 15
    final val IS_FINAL_FIELD_NUMBER = 7
    final val CONTROL_INPUT_FIELD_NUMBER = 8
    final val INACCURATE_FIELD_NUMBER = 17
    def of(
            name: _root_.scala.Predef.String,
            device: _root_.scala.Predef.String,
            id: _root_.scala.Int,
            inputInfo: _root_.scala.Seq[CostGraphDef.Node.InputInfo],
            outputInfo: _root_.scala.Seq[CostGraphDef.Node.OutputInfo],
            temporaryMemorySize: _root_.scala.Long,
            persistentMemorySize: _root_.scala.Long,
            hostTempMemorySize: _root_.scala.Long,
            deviceTempMemorySize: _root_.scala.Long,
            devicePersistentMemorySize: _root_.scala.Long,
            computeCost: _root_.scala.Long,
            computeTime: _root_.scala.Long,
            memoryTime: _root_.scala.Long,
            isFinal: _root_.scala.Boolean,
            controlInput: _root_.scala.Seq[_root_.scala.Int],
            inaccurate: _root_.scala.Boolean
    ): CostGraphDef.Node = cost_graph.CostGraphDef.Node(
      name,
      device,
      id,
      inputInfo,
      outputInfo,
      temporaryMemorySize,
      persistentMemorySize,
      hostTempMemorySize,
      deviceTempMemorySize,
      devicePersistentMemorySize,
      computeCost,
      computeTime,
      memoryTime,
      isFinal,
      controlInput,
      inaccurate
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.CostGraphDef.Node])
  }
  
  /** Total cost of this graph, typically used for balancing decisions.
    *
    * @param cost
    *   Aggregated cost value.
    * @param dimension
    *   Aggregated cost dimension (e.g. 'memory', 'compute', 'network').
    */
  @SerialVersionUID(0L)
  final case class AggregatedCost(
      cost: _root_.scala.Float = 0.0f,
      dimension: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggregatedCost] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = cost
          if (__value != 0.0f) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(1, __value)
          }
        };
        
        {
          val __value = dimension
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = cost
          if (__v != 0.0f) {
            _output__.writeFloat(1, __v)
          }
        };
        {
          val __v = dimension
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withCost(__v: _root_.scala.Float): AggregatedCost = copy(cost = __v)
      def withDimension(__v: _root_.scala.Predef.String): AggregatedCost = copy(dimension = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = cost
            if (__t != 0.0f) __t else null
          }
          case 2 => {
            val __t = dimension
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PFloat(cost)
          case 2 => _root_.scalapb.descriptors.PString(dimension)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: CostGraphDef.AggregatedCost.type = cost_graph.CostGraphDef.AggregatedCost
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.CostGraphDef.AggregatedCost])
  }
  
  object AggregatedCost extends scalapb.GeneratedMessageCompanion[CostGraphDef.AggregatedCost] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[CostGraphDef.AggregatedCost] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): CostGraphDef.AggregatedCost = {
      var __cost: _root_.scala.Float = 0.0f
      var __dimension: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 13 =>
            __cost = _input__.readFloat()
          case 18 =>
            __dimension = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      cost_graph.CostGraphDef.AggregatedCost(
          cost = __cost,
          dimension = __dimension,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[CostGraphDef.AggregatedCost] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        cost_graph.CostGraphDef.AggregatedCost(
          cost = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Float]).getOrElse(0.0f),
          dimension = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cost_graph.CostGraphDef.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cost_graph.CostGraphDef.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = cost_graph.CostGraphDef.AggregatedCost(
      cost = 0.0f,
      dimension = ""
    )
    implicit class AggregatedCostLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, CostGraphDef.AggregatedCost]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, CostGraphDef.AggregatedCost](_l) {
      def cost: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.cost)((c_, f_) => c_.copy(cost = f_))
      def dimension: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.dimension)((c_, f_) => c_.copy(dimension = f_))
    }
    final val COST_FIELD_NUMBER = 1
    final val DIMENSION_FIELD_NUMBER = 2
    def of(
      cost: _root_.scala.Float,
      dimension: _root_.scala.Predef.String
    ): CostGraphDef.AggregatedCost = cost_graph.CostGraphDef.AggregatedCost(
      cost,
      dimension
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.CostGraphDef.AggregatedCost])
  }
  
  implicit class CostGraphDefLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, CostGraphDef]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, CostGraphDef](_l) {
    def node: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[CostGraphDef.Node]] = field(_.node)((c_, f_) => c_.copy(node = f_))
    def cost: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[CostGraphDef.AggregatedCost]] = field(_.cost)((c_, f_) => c_.copy(cost = f_))
  }
  final val NODE_FIELD_NUMBER = 1
  final val COST_FIELD_NUMBER = 2
  def of(
          node: _root_.scala.Seq[CostGraphDef.Node],
          cost: _root_.scala.Seq[CostGraphDef.AggregatedCost]
  ): CostGraphDef = CostGraphDef(
    node,
    cost
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.CostGraphDef])
}
