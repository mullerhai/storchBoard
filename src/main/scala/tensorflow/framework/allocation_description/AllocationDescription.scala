// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorflow.framework.allocation_description

import tensorflow.framework.allocation_description

/** @param requestedBytes
  *   Total number of bytes requested
  * @param allocatedBytes
  *   Total number of bytes allocated if known
  * @param allocatorName
  *   Name of the allocator used
  * @param allocationId
  *   Identifier of the allocated buffer if known
  * @param hasSingleReference
  *   Set if this tensor only has one remaining reference
  * @param ptr
  *   Address of the allocation.
  */
@SerialVersionUID(0L)
final case class AllocationDescription(
    requestedBytes: _root_.scala.Long = 0L,
    allocatedBytes: _root_.scala.Long = 0L,
    allocatorName: _root_.scala.Predef.String = "",
    allocationId: _root_.scala.Long = 0L,
    hasSingleReference: _root_.scala.Boolean = false,
    ptr: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AllocationDescription] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = requestedBytes
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
        }
      };
      
      {
        val __value = allocatedBytes
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      
      {
        val __value = allocatorName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = allocationId
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, __value)
        }
      };
      
      {
        val __value = hasSingleReference
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
        }
      };
      
      {
        val __value = ptr
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(6, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = requestedBytes
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
      {
        val __v = allocatedBytes
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      {
        val __v = allocatorName
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = allocationId
        if (__v != 0L) {
          _output__.writeInt64(4, __v)
        }
      };
      {
        val __v = hasSingleReference
        if (__v != false) {
          _output__.writeBool(5, __v)
        }
      };
      {
        val __v = ptr
        if (__v != 0L) {
          _output__.writeUInt64(6, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withRequestedBytes(__v: _root_.scala.Long): AllocationDescription = copy(requestedBytes = __v)
    def withAllocatedBytes(__v: _root_.scala.Long): AllocationDescription = copy(allocatedBytes = __v)
    def withAllocatorName(__v: _root_.scala.Predef.String): AllocationDescription = copy(allocatorName = __v)
    def withAllocationId(__v: _root_.scala.Long): AllocationDescription = copy(allocationId = __v)
    def withHasSingleReference(__v: _root_.scala.Boolean): AllocationDescription = copy(hasSingleReference = __v)
    def withPtr(__v: _root_.scala.Long): AllocationDescription = copy(ptr = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = requestedBytes
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = allocatedBytes
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = allocatorName
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = allocationId
          if (__t != 0L) __t else null
        }
        case 5 => {
          val __t = hasSingleReference
          if (__t != false) __t else null
        }
        case 6 => {
          val __t = ptr
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(requestedBytes)
        case 2 => _root_.scalapb.descriptors.PLong(allocatedBytes)
        case 3 => _root_.scalapb.descriptors.PString(allocatorName)
        case 4 => _root_.scalapb.descriptors.PLong(allocationId)
        case 5 => _root_.scalapb.descriptors.PBoolean(hasSingleReference)
        case 6 => _root_.scalapb.descriptors.PLong(ptr)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: AllocationDescription.type = allocation_description.AllocationDescription
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.AllocationDescription])
}

object AllocationDescription extends scalapb.GeneratedMessageCompanion[AllocationDescription] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[AllocationDescription] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): AllocationDescription = {
    var __requestedBytes: _root_.scala.Long = 0L
    var __allocatedBytes: _root_.scala.Long = 0L
    var __allocatorName: _root_.scala.Predef.String = ""
    var __allocationId: _root_.scala.Long = 0L
    var __hasSingleReference: _root_.scala.Boolean = false
    var __ptr: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __requestedBytes = _input__.readInt64()
        case 16 =>
          __allocatedBytes = _input__.readInt64()
        case 26 =>
          __allocatorName = _input__.readStringRequireUtf8()
        case 32 =>
          __allocationId = _input__.readInt64()
        case 40 =>
          __hasSingleReference = _input__.readBool()
        case 48 =>
          __ptr = _input__.readUInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    AllocationDescription(
        requestedBytes = __requestedBytes,
        allocatedBytes = __allocatedBytes,
        allocatorName = __allocatorName,
        allocationId = __allocationId,
        hasSingleReference = __hasSingleReference,
        ptr = __ptr,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[AllocationDescription] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      AllocationDescription(
        requestedBytes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        allocatedBytes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        allocatorName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        allocationId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        hasSingleReference = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        ptr = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.framework.allocation_description.AllocationDescriptionProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.framework.allocation_description.AllocationDescriptionProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = AllocationDescription(
    requestedBytes = 0L,
    allocatedBytes = 0L,
    allocatorName = "",
    allocationId = 0L,
    hasSingleReference = false,
    ptr = 0L
  )
  implicit class AllocationDescriptionLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, AllocationDescription]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, AllocationDescription](_l) {
    def requestedBytes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.requestedBytes)((c_, f_) => c_.copy(requestedBytes = f_))
    def allocatedBytes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.allocatedBytes)((c_, f_) => c_.copy(allocatedBytes = f_))
    def allocatorName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.allocatorName)((c_, f_) => c_.copy(allocatorName = f_))
    def allocationId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.allocationId)((c_, f_) => c_.copy(allocationId = f_))
    def hasSingleReference: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.hasSingleReference)((c_, f_) => c_.copy(hasSingleReference = f_))
    def ptr: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.ptr)((c_, f_) => c_.copy(ptr = f_))
  }
  final val REQUESTED_BYTES_FIELD_NUMBER = 1
  final val ALLOCATED_BYTES_FIELD_NUMBER = 2
  final val ALLOCATOR_NAME_FIELD_NUMBER = 3
  final val ALLOCATION_ID_FIELD_NUMBER = 4
  final val HAS_SINGLE_REFERENCE_FIELD_NUMBER = 5
  final val PTR_FIELD_NUMBER = 6
  def of(
    requestedBytes: _root_.scala.Long,
    allocatedBytes: _root_.scala.Long,
    allocatorName: _root_.scala.Predef.String,
    allocationId: _root_.scala.Long,
    hasSingleReference: _root_.scala.Boolean,
    ptr: _root_.scala.Long
  ): AllocationDescription = AllocationDescription(
    requestedBytes,
    allocatedBytes,
    allocatorName,
    allocationId,
    hasSingleReference,
    ptr
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.AllocationDescription])
}
