// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorflow.framework.graph_debug_info

import tensorflow.framework.graph_debug_info

/** @param files
  *   This stores all the source code file names and can be indexed by the
  *   `file_index`.
  * @param framesById
  *   Stack traces and frames are uniqueified during construction. These maps
  *   index from the unique id for a frame/trace to the value.
  * @param traces
  *   Deprecated.
  * @param nameToTraceId
  *   This maps a node name to a trace id contained in `traces_by_id`.
  *  
  *   The map key is a mangling of the containing function and op name with
  *   syntax:
  *     op.name '&#64;' func_name
  *   For ops in the top-level graph, the func_name is the empty string and hence
  *   the `&#64;` may be ommitted.
  *   Note that op names are restricted to a small number of characters which
  *   exclude '&#64;', making it impossible to collide keys of this form. Function
  *   names accept a much wider set of characters.
  *   It would be preferable to avoid mangling and use a tuple key of (op.name,
  *   func_name), but this is not supported with protocol buffers.
  */
@SerialVersionUID(0L)
final case class GraphDebugInfo(
                                 files: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
                                 framesById: _root_.scala.collection.immutable.Map[_root_.scala.Long, GraphDebugInfo.FileLineCol] = _root_.scala.collection.immutable.Map.empty,
                                 tracesById: _root_.scala.collection.immutable.Map[_root_.scala.Long, GraphDebugInfo.StackTrace] = _root_.scala.collection.immutable.Map.empty,
                                 traces: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, GraphDebugInfo.StackTrace] = _root_.scala.collection.immutable.Map.empty,
                                 nameToTraceId: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Long] = _root_.scala.collection.immutable.Map.empty,
                                 unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GraphDebugInfo] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      files.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      }
      framesById.foreach { __item =>
        val __value = graph_debug_info.GraphDebugInfo._typemapper_framesById.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      tracesById.foreach { __item =>
        val __value = graph_debug_info.GraphDebugInfo._typemapper_tracesById.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      traces.foreach { __item =>
        val __value = graph_debug_info.GraphDebugInfo._typemapper_traces.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      nameToTraceId.foreach { __item =>
        val __value = graph_debug_info.GraphDebugInfo._typemapper_nameToTraceId.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      files.foreach { __v =>
        val __m = __v
        _output__.writeString(1, __m)
      };
      traces.foreach { __v =>
        val __m = graph_debug_info.GraphDebugInfo._typemapper_traces.toBase(__v)
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      framesById.foreach { __v =>
        val __m = graph_debug_info.GraphDebugInfo._typemapper_framesById.toBase(__v)
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      nameToTraceId.foreach { __v =>
        val __m = graph_debug_info.GraphDebugInfo._typemapper_nameToTraceId.toBase(__v)
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      tracesById.foreach { __v =>
        val __m = graph_debug_info.GraphDebugInfo._typemapper_tracesById.toBase(__v)
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def clearFiles = copy(files = _root_.scala.Seq.empty)
    def addFiles(__vs: _root_.scala.Predef.String *): GraphDebugInfo = addAllFiles(__vs)
    def addAllFiles(__vs: Iterable[_root_.scala.Predef.String]): GraphDebugInfo = copy(files = files ++ __vs)
    def withFiles(__v: _root_.scala.Seq[_root_.scala.Predef.String]): GraphDebugInfo = copy(files = __v)
    def clearFramesById = copy(framesById = _root_.scala.collection.immutable.Map.empty)
    def addFramesById(__vs: (_root_.scala.Long, GraphDebugInfo.FileLineCol) *): GraphDebugInfo = addAllFramesById(__vs)
    def addAllFramesById(__vs: Iterable[(_root_.scala.Long, GraphDebugInfo.FileLineCol)]): GraphDebugInfo = copy(framesById = framesById ++ __vs)
    def withFramesById(__v: _root_.scala.collection.immutable.Map[_root_.scala.Long, GraphDebugInfo.FileLineCol]): GraphDebugInfo = copy(framesById = __v)
    def clearTracesById = copy(tracesById = _root_.scala.collection.immutable.Map.empty)
    def addTracesById(__vs: (_root_.scala.Long, GraphDebugInfo.StackTrace) *): GraphDebugInfo = addAllTracesById(__vs)
    def addAllTracesById(__vs: Iterable[(_root_.scala.Long, GraphDebugInfo.StackTrace)]): GraphDebugInfo = copy(tracesById = tracesById ++ __vs)
    def withTracesById(__v: _root_.scala.collection.immutable.Map[_root_.scala.Long, GraphDebugInfo.StackTrace]): GraphDebugInfo = copy(tracesById = __v)
    def clearTraces = copy(traces = _root_.scala.collection.immutable.Map.empty)
    def addTraces(__vs: (_root_.scala.Predef.String, GraphDebugInfo.StackTrace) *): GraphDebugInfo = addAllTraces(__vs)
    def addAllTraces(__vs: Iterable[(_root_.scala.Predef.String, GraphDebugInfo.StackTrace)]): GraphDebugInfo = copy(traces = traces ++ __vs)
    def withTraces(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, GraphDebugInfo.StackTrace]): GraphDebugInfo = copy(traces = __v)
    def clearNameToTraceId = copy(nameToTraceId = _root_.scala.collection.immutable.Map.empty)
    def addNameToTraceId(__vs: (_root_.scala.Predef.String, _root_.scala.Long) *): GraphDebugInfo = addAllNameToTraceId(__vs)
    def addAllNameToTraceId(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Long)]): GraphDebugInfo = copy(nameToTraceId = nameToTraceId ++ __vs)
    def withNameToTraceId(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Long]): GraphDebugInfo = copy(nameToTraceId = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => files
        case 4 => framesById.iterator.map(graph_debug_info.GraphDebugInfo._typemapper_framesById.toBase(_)).toSeq
        case 6 => tracesById.iterator.map(graph_debug_info.GraphDebugInfo._typemapper_tracesById.toBase(_)).toSeq
        case 2 => traces.iterator.map(graph_debug_info.GraphDebugInfo._typemapper_traces.toBase(_)).toSeq
        case 5 => nameToTraceId.iterator.map(graph_debug_info.GraphDebugInfo._typemapper_nameToTraceId.toBase(_)).toSeq
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(files.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(framesById.iterator.map(graph_debug_info.GraphDebugInfo._typemapper_framesById.toBase(_).toPMessage).toVector)
        case 6 => _root_.scalapb.descriptors.PRepeated(tracesById.iterator.map(graph_debug_info.GraphDebugInfo._typemapper_tracesById.toBase(_).toPMessage).toVector)
        case 2 => _root_.scalapb.descriptors.PRepeated(traces.iterator.map(graph_debug_info.GraphDebugInfo._typemapper_traces.toBase(_).toPMessage).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(nameToTraceId.iterator.map(graph_debug_info.GraphDebugInfo._typemapper_nameToTraceId.toBase(_).toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: GraphDebugInfo.type = graph_debug_info.GraphDebugInfo
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.GraphDebugInfo])
}

object GraphDebugInfo extends scalapb.GeneratedMessageCompanion[GraphDebugInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[GraphDebugInfo] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): GraphDebugInfo = {
    val __files: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __framesById: _root_.scala.collection.mutable.Builder[(_root_.scala.Long, GraphDebugInfo.FileLineCol), _root_.scala.collection.immutable.Map[_root_.scala.Long, GraphDebugInfo.FileLineCol]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Long, GraphDebugInfo.FileLineCol]
    val __tracesById: _root_.scala.collection.mutable.Builder[(_root_.scala.Long, GraphDebugInfo.StackTrace), _root_.scala.collection.immutable.Map[_root_.scala.Long, GraphDebugInfo.StackTrace]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Long, GraphDebugInfo.StackTrace]
    val __traces: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, GraphDebugInfo.StackTrace), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, GraphDebugInfo.StackTrace]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, GraphDebugInfo.StackTrace]
    val __nameToTraceId: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Long), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Long]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Long]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __files += _input__.readStringRequireUtf8()
        case 34 =>
          __framesById += graph_debug_info.GraphDebugInfo._typemapper_framesById.toCustom(_root_.scalapb.LiteParser.readMessage[GraphDebugInfo.FramesByIdEntry](_input__))
        case 50 =>
          __tracesById += graph_debug_info.GraphDebugInfo._typemapper_tracesById.toCustom(_root_.scalapb.LiteParser.readMessage[GraphDebugInfo.TracesByIdEntry](_input__))
        case 18 =>
          __traces += graph_debug_info.GraphDebugInfo._typemapper_traces.toCustom(_root_.scalapb.LiteParser.readMessage[GraphDebugInfo.TracesEntry](_input__))
        case 42 =>
          __nameToTraceId += graph_debug_info.GraphDebugInfo._typemapper_nameToTraceId.toCustom(_root_.scalapb.LiteParser.readMessage[GraphDebugInfo.NameToTraceIdEntry](_input__))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    GraphDebugInfo(
        files = __files.result(),
        framesById = __framesById.result(),
        tracesById = __tracesById.result(),
        traces = __traces.result(),
        nameToTraceId = __nameToTraceId.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[GraphDebugInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      GraphDebugInfo(
        files = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        framesById = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[GraphDebugInfo.FramesByIdEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(graph_debug_info.GraphDebugInfo._typemapper_framesById.toCustom(_)).toMap,
        tracesById = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[GraphDebugInfo.TracesByIdEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(graph_debug_info.GraphDebugInfo._typemapper_tracesById.toCustom(_)).toMap,
        traces = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[GraphDebugInfo.TracesEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(graph_debug_info.GraphDebugInfo._typemapper_traces.toCustom(_)).toMap,
        nameToTraceId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[GraphDebugInfo.NameToTraceIdEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(graph_debug_info.GraphDebugInfo._typemapper_nameToTraceId.toCustom(_)).toMap
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.framework.graph_debug_info.GraphDebugInfoProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.framework.graph_debug_info.GraphDebugInfoProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = graph_debug_info.GraphDebugInfo.FramesByIdEntry
      case 6 => __out = graph_debug_info.GraphDebugInfo.TracesByIdEntry
      case 2 => __out = graph_debug_info.GraphDebugInfo.TracesEntry
      case 5 => __out = graph_debug_info.GraphDebugInfo.NameToTraceIdEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      graph_debug_info.GraphDebugInfo.FileLineCol,
      graph_debug_info.GraphDebugInfo.StackTrace,
      graph_debug_info.GraphDebugInfo.FramesByIdEntry,
      graph_debug_info.GraphDebugInfo.TracesByIdEntry,
      graph_debug_info.GraphDebugInfo.TracesEntry,
      graph_debug_info.GraphDebugInfo.NameToTraceIdEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = GraphDebugInfo(
    files = _root_.scala.Seq.empty,
    framesById = _root_.scala.collection.immutable.Map.empty,
    tracesById = _root_.scala.collection.immutable.Map.empty,
    traces = _root_.scala.collection.immutable.Map.empty,
    nameToTraceId = _root_.scala.collection.immutable.Map.empty
  )
  /** This represents a file/line location in the source code.
    *
    * @param fileIndex
    *   File name index, which can be used to retrieve the file name string from
    *   `files`. The value should be between 0 and (len(files)-1)
    * @param line
    *   Line number in the file.
    * @param col
    *   Col number in the file line.
    * @param func
    *   Name of function contains the file line.
    * @param code
    *   Source code contained in this file line.
    */
  @SerialVersionUID(0L)
  final case class FileLineCol(
      fileIndex: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None,
      line: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None,
      col: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None,
      func: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
      code: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[FileLineCol] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (fileIndex.isDefined) {
          val __value = fileIndex.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
        };
        if (line.isDefined) {
          val __value = line.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
        };
        if (col.isDefined) {
          val __value = col.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
        };
        if (func.isDefined) {
          val __value = func.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        };
        if (code.isDefined) {
          val __value = code.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        fileIndex.foreach { __v =>
          val __m = __v
          _output__.writeInt32(1, __m)
        };
        line.foreach { __v =>
          val __m = __v
          _output__.writeInt32(2, __m)
        };
        col.foreach { __v =>
          val __m = __v
          _output__.writeInt32(3, __m)
        };
        func.foreach { __v =>
          val __m = __v
          _output__.writeString(4, __m)
        };
        code.foreach { __v =>
          val __m = __v
          _output__.writeString(5, __m)
        };
        unknownFields.writeTo(_output__)
      }
      def getFileIndex: _root_.scala.Int = fileIndex.getOrElse(0)
      def clearFileIndex: FileLineCol = copy(fileIndex = _root_.scala.None)
      def withFileIndex(__v: _root_.scala.Int): FileLineCol = copy(fileIndex = Option(__v))
      def getLine: _root_.scala.Int = line.getOrElse(0)
      def clearLine: FileLineCol = copy(line = _root_.scala.None)
      def withLine(__v: _root_.scala.Int): FileLineCol = copy(line = Option(__v))
      def getCol: _root_.scala.Int = col.getOrElse(0)
      def clearCol: FileLineCol = copy(col = _root_.scala.None)
      def withCol(__v: _root_.scala.Int): FileLineCol = copy(col = Option(__v))
      def getFunc: _root_.scala.Predef.String = func.getOrElse("")
      def clearFunc: FileLineCol = copy(func = _root_.scala.None)
      def withFunc(__v: _root_.scala.Predef.String): FileLineCol = copy(func = Option(__v))
      def getCode: _root_.scala.Predef.String = code.getOrElse("")
      def clearCode: FileLineCol = copy(code = _root_.scala.None)
      def withCode(__v: _root_.scala.Predef.String): FileLineCol = copy(code = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => fileIndex.orNull
          case 2 => line.orNull
          case 3 => col.orNull
          case 4 => func.orNull
          case 5 => code.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => fileIndex.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => line.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => col.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 4 => func.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 5 => code.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: GraphDebugInfo.FileLineCol.type = graph_debug_info.GraphDebugInfo.FileLineCol
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.GraphDebugInfo.FileLineCol])
  }
  
  object FileLineCol extends scalapb.GeneratedMessageCompanion[GraphDebugInfo.FileLineCol] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[GraphDebugInfo.FileLineCol] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): GraphDebugInfo.FileLineCol = {
      var __fileIndex: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None
      var __line: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None
      var __col: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None
      var __func: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
      var __code: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __fileIndex = _root_.scala.Option(_input__.readInt32())
          case 16 =>
            __line = _root_.scala.Option(_input__.readInt32())
          case 24 =>
            __col = _root_.scala.Option(_input__.readInt32())
          case 34 =>
            __func = _root_.scala.Option(_input__.readStringRequireUtf8())
          case 42 =>
            __code = _root_.scala.Option(_input__.readStringRequireUtf8())
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      graph_debug_info.GraphDebugInfo.FileLineCol(
          fileIndex = __fileIndex,
          line = __line,
          col = __col,
          func = __func,
          code = __code,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[GraphDebugInfo.FileLineCol] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        graph_debug_info.GraphDebugInfo.FileLineCol(
          fileIndex = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]),
          line = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]),
          col = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]),
          func = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
          code = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = graph_debug_info.GraphDebugInfo.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = graph_debug_info.GraphDebugInfo.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = graph_debug_info.GraphDebugInfo.FileLineCol(
      fileIndex = _root_.scala.None,
      line = _root_.scala.None,
      col = _root_.scala.None,
      func = _root_.scala.None,
      code = _root_.scala.None
    )
    implicit class FileLineColLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, GraphDebugInfo.FileLineCol]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, GraphDebugInfo.FileLineCol](_l) {
      def fileIndex: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getFileIndex)((c_, f_) => c_.copy(fileIndex = _root_.scala.Option(f_)))
      def optionalFileIndex: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Int]] = field(_.fileIndex)((c_, f_) => c_.copy(fileIndex = f_))
      def line: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getLine)((c_, f_) => c_.copy(line = _root_.scala.Option(f_)))
      def optionalLine: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Int]] = field(_.line)((c_, f_) => c_.copy(line = f_))
      def col: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getCol)((c_, f_) => c_.copy(col = _root_.scala.Option(f_)))
      def optionalCol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Int]] = field(_.col)((c_, f_) => c_.copy(col = f_))
      def func: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getFunc)((c_, f_) => c_.copy(func = _root_.scala.Option(f_)))
      def optionalFunc: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.func)((c_, f_) => c_.copy(func = f_))
      def code: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCode)((c_, f_) => c_.copy(code = _root_.scala.Option(f_)))
      def optionalCode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.code)((c_, f_) => c_.copy(code = f_))
    }
    final val FILE_INDEX_FIELD_NUMBER = 1
    final val LINE_FIELD_NUMBER = 2
    final val COL_FIELD_NUMBER = 3
    final val FUNC_FIELD_NUMBER = 4
    final val CODE_FIELD_NUMBER = 5
    def of(
      fileIndex: _root_.scala.Option[_root_.scala.Int],
      line: _root_.scala.Option[_root_.scala.Int],
      col: _root_.scala.Option[_root_.scala.Int],
      func: _root_.scala.Option[_root_.scala.Predef.String],
      code: _root_.scala.Option[_root_.scala.Predef.String]
    ): GraphDebugInfo.FileLineCol = graph_debug_info.GraphDebugInfo.FileLineCol(
      fileIndex,
      line,
      col,
      func,
      code
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.GraphDebugInfo.FileLineCol])
  }
  
  /** This represents a stack trace which is a ordered list of `FileLineCol`.
    *
    * @param fileLineCols
    *   Deprecated.
    */
  @SerialVersionUID(0L)
  final case class StackTrace(
                               fileLineCols: _root_.scala.Seq[GraphDebugInfo.FileLineCol] = _root_.scala.Seq.empty,
                               frameId: _root_.scala.Seq[_root_.scala.Long] = _root_.scala.Seq.empty,
                               unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[StackTrace] {
      private[this] def frameIdSerializedSize = {
        8 * frameId.size
      }
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        fileLineCols.foreach { __item =>
          val __value = __item
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        if (frameId.nonEmpty) {
          val __localsize = frameIdSerializedSize
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
        }
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        fileLineCols.foreach { __v =>
          val __m = __v
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        if (frameId.nonEmpty) {
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(frameIdSerializedSize)
          frameId.foreach(_output__.writeFixed64NoTag)
        };
        unknownFields.writeTo(_output__)
      }
      def clearFileLineCols = copy(fileLineCols = _root_.scala.Seq.empty)
      def addFileLineCols(__vs: GraphDebugInfo.FileLineCol *): StackTrace = addAllFileLineCols(__vs)
      def addAllFileLineCols(__vs: Iterable[GraphDebugInfo.FileLineCol]): StackTrace = copy(fileLineCols = fileLineCols ++ __vs)
      def withFileLineCols(__v: _root_.scala.Seq[GraphDebugInfo.FileLineCol]): StackTrace = copy(fileLineCols = __v)
      def clearFrameId = copy(frameId = _root_.scala.Seq.empty)
      def addFrameId(__vs: _root_.scala.Long *): StackTrace = addAllFrameId(__vs)
      def addAllFrameId(__vs: Iterable[_root_.scala.Long]): StackTrace = copy(frameId = frameId ++ __vs)
      def withFrameId(__v: _root_.scala.Seq[_root_.scala.Long]): StackTrace = copy(frameId = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => fileLineCols
          case 2 => frameId
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(fileLineCols.iterator.map(_.toPMessage).toVector)
          case 2 => _root_.scalapb.descriptors.PRepeated(frameId.iterator.map(_root_.scalapb.descriptors.PLong(_)).toVector)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: GraphDebugInfo.StackTrace.type = graph_debug_info.GraphDebugInfo.StackTrace
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.GraphDebugInfo.StackTrace])
  }
  
  object StackTrace extends scalapb.GeneratedMessageCompanion[GraphDebugInfo.StackTrace] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[GraphDebugInfo.StackTrace] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): GraphDebugInfo.StackTrace = {
      val __fileLineCols: _root_.scala.collection.immutable.VectorBuilder[GraphDebugInfo.FileLineCol] = new _root_.scala.collection.immutable.VectorBuilder[GraphDebugInfo.FileLineCol]
      val __frameId: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long]
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __fileLineCols += _root_.scalapb.LiteParser.readMessage[GraphDebugInfo.FileLineCol](_input__)
          case 17 =>
            __frameId += _input__.readFixed64()
          case 18 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __frameId += _input__.readFixed64()
            }
            _input__.popLimit(oldLimit)
          }
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      graph_debug_info.GraphDebugInfo.StackTrace(
          fileLineCols = __fileLineCols.result(),
          frameId = __frameId.result(),
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[GraphDebugInfo.StackTrace] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        graph_debug_info.GraphDebugInfo.StackTrace(
          fileLineCols = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[GraphDebugInfo.FileLineCol]]).getOrElse(_root_.scala.Seq.empty),
          frameId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Long]]).getOrElse(_root_.scala.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = graph_debug_info.GraphDebugInfo.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = graph_debug_info.GraphDebugInfo.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = graph_debug_info.GraphDebugInfo.FileLineCol
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = graph_debug_info.GraphDebugInfo.StackTrace(
      fileLineCols = _root_.scala.Seq.empty,
      frameId = _root_.scala.Seq.empty
    )
    implicit class StackTraceLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, GraphDebugInfo.StackTrace]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, GraphDebugInfo.StackTrace](_l) {
      def fileLineCols: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[GraphDebugInfo.FileLineCol]] = field(_.fileLineCols)((c_, f_) => c_.copy(fileLineCols = f_))
      def frameId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Long]] = field(_.frameId)((c_, f_) => c_.copy(frameId = f_))
    }
    final val FILE_LINE_COLS_FIELD_NUMBER = 1
    final val FRAME_ID_FIELD_NUMBER = 2
    def of(
            fileLineCols: _root_.scala.Seq[GraphDebugInfo.FileLineCol],
            frameId: _root_.scala.Seq[_root_.scala.Long]
    ): GraphDebugInfo.StackTrace = graph_debug_info.GraphDebugInfo.StackTrace(
      fileLineCols,
      frameId
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.GraphDebugInfo.StackTrace])
  }
  
  @SerialVersionUID(0L)
  final case class FramesByIdEntry(
                                    key: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None,
                                    value: _root_.scala.Option[GraphDebugInfo.FileLineCol] = _root_.scala.None,
                                    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[FramesByIdEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (key.isDefined) {
          val __value = key.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeFixed64Size(1, __value)
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        key.foreach { __v =>
          val __m = __v
          _output__.writeFixed64(1, __m)
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def getKey: _root_.scala.Long = key.getOrElse(0L)
      def clearKey: FramesByIdEntry = copy(key = _root_.scala.None)
      def withKey(__v: _root_.scala.Long): FramesByIdEntry = copy(key = Option(__v))
      def getValue: GraphDebugInfo.FileLineCol = value.getOrElse(graph_debug_info.GraphDebugInfo.FileLineCol.defaultInstance)
      def clearValue: FramesByIdEntry = copy(value = _root_.scala.None)
      def withValue(__v: GraphDebugInfo.FileLineCol): FramesByIdEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => key.orNull
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => key.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: GraphDebugInfo.FramesByIdEntry.type = graph_debug_info.GraphDebugInfo.FramesByIdEntry
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.GraphDebugInfo.FramesByIdEntry])
  }
  
  object FramesByIdEntry extends scalapb.GeneratedMessageCompanion[GraphDebugInfo.FramesByIdEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[GraphDebugInfo.FramesByIdEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): GraphDebugInfo.FramesByIdEntry = {
      var __key: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
      var __value: _root_.scala.Option[GraphDebugInfo.FileLineCol] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 9 =>
            __key = _root_.scala.Option(_input__.readFixed64())
          case 18 =>
            __value = _root_.scala.Option(__value.fold(_root_.scalapb.LiteParser.readMessage[GraphDebugInfo.FileLineCol](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      graph_debug_info.GraphDebugInfo.FramesByIdEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[GraphDebugInfo.FramesByIdEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        graph_debug_info.GraphDebugInfo.FramesByIdEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[GraphDebugInfo.FileLineCol]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = graph_debug_info.GraphDebugInfo.javaDescriptor.getNestedTypes().get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = graph_debug_info.GraphDebugInfo.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = graph_debug_info.GraphDebugInfo.FileLineCol
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = graph_debug_info.GraphDebugInfo.FramesByIdEntry(
      key = _root_.scala.None,
      value = _root_.scala.None
    )
    implicit class FramesByIdEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, GraphDebugInfo.FramesByIdEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, GraphDebugInfo.FramesByIdEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getKey)((c_, f_) => c_.copy(key = _root_.scala.Option(f_)))
      def optionalKey: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Long]] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, GraphDebugInfo.FileLineCol] = field(_.getValue)((c_, f_) => c_.copy(value = _root_.scala.Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[GraphDebugInfo.FileLineCol]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[GraphDebugInfo.FramesByIdEntry, (_root_.scala.Long, GraphDebugInfo.FileLineCol)] =
      _root_.scalapb.TypeMapper[GraphDebugInfo.FramesByIdEntry, (_root_.scala.Long, GraphDebugInfo.FileLineCol)](__m => (__m.getKey, __m.getValue))(__p => graph_debug_info.GraphDebugInfo.FramesByIdEntry(Some(__p._1), Some(__p._2)))
    def of(
      key: _root_.scala.Option[_root_.scala.Long],
      value: _root_.scala.Option[GraphDebugInfo.FileLineCol]
    ): GraphDebugInfo.FramesByIdEntry = graph_debug_info.GraphDebugInfo.FramesByIdEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.GraphDebugInfo.FramesByIdEntry])
  }
  
  @SerialVersionUID(0L)
  final case class TracesByIdEntry(
                                    key: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None,
                                    value: _root_.scala.Option[GraphDebugInfo.StackTrace] = _root_.scala.None,
                                    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TracesByIdEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (key.isDefined) {
          val __value = key.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeFixed64Size(1, __value)
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        key.foreach { __v =>
          val __m = __v
          _output__.writeFixed64(1, __m)
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def getKey: _root_.scala.Long = key.getOrElse(0L)
      def clearKey: TracesByIdEntry = copy(key = _root_.scala.None)
      def withKey(__v: _root_.scala.Long): TracesByIdEntry = copy(key = Option(__v))
      def getValue: GraphDebugInfo.StackTrace = value.getOrElse(graph_debug_info.GraphDebugInfo.StackTrace.defaultInstance)
      def clearValue: TracesByIdEntry = copy(value = _root_.scala.None)
      def withValue(__v: GraphDebugInfo.StackTrace): TracesByIdEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => key.orNull
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => key.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: GraphDebugInfo.TracesByIdEntry.type = graph_debug_info.GraphDebugInfo.TracesByIdEntry
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.GraphDebugInfo.TracesByIdEntry])
  }
  
  object TracesByIdEntry extends scalapb.GeneratedMessageCompanion[GraphDebugInfo.TracesByIdEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[GraphDebugInfo.TracesByIdEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): GraphDebugInfo.TracesByIdEntry = {
      var __key: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
      var __value: _root_.scala.Option[GraphDebugInfo.StackTrace] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 9 =>
            __key = _root_.scala.Option(_input__.readFixed64())
          case 18 =>
            __value = _root_.scala.Option(__value.fold(_root_.scalapb.LiteParser.readMessage[GraphDebugInfo.StackTrace](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      graph_debug_info.GraphDebugInfo.TracesByIdEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[GraphDebugInfo.TracesByIdEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        graph_debug_info.GraphDebugInfo.TracesByIdEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[GraphDebugInfo.StackTrace]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = graph_debug_info.GraphDebugInfo.javaDescriptor.getNestedTypes().get(3)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = graph_debug_info.GraphDebugInfo.scalaDescriptor.nestedMessages(3)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = graph_debug_info.GraphDebugInfo.StackTrace
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = graph_debug_info.GraphDebugInfo.TracesByIdEntry(
      key = _root_.scala.None,
      value = _root_.scala.None
    )
    implicit class TracesByIdEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, GraphDebugInfo.TracesByIdEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, GraphDebugInfo.TracesByIdEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getKey)((c_, f_) => c_.copy(key = _root_.scala.Option(f_)))
      def optionalKey: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Long]] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, GraphDebugInfo.StackTrace] = field(_.getValue)((c_, f_) => c_.copy(value = _root_.scala.Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[GraphDebugInfo.StackTrace]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[GraphDebugInfo.TracesByIdEntry, (_root_.scala.Long, GraphDebugInfo.StackTrace)] =
      _root_.scalapb.TypeMapper[GraphDebugInfo.TracesByIdEntry, (_root_.scala.Long, GraphDebugInfo.StackTrace)](__m => (__m.getKey, __m.getValue))(__p => graph_debug_info.GraphDebugInfo.TracesByIdEntry(Some(__p._1), Some(__p._2)))
    def of(
      key: _root_.scala.Option[_root_.scala.Long],
      value: _root_.scala.Option[GraphDebugInfo.StackTrace]
    ): GraphDebugInfo.TracesByIdEntry = graph_debug_info.GraphDebugInfo.TracesByIdEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.GraphDebugInfo.TracesByIdEntry])
  }
  
  @SerialVersionUID(0L)
  final case class TracesEntry(
                                key: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
                                value: _root_.scala.Option[GraphDebugInfo.StackTrace] = _root_.scala.None,
                                unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TracesEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (key.isDefined) {
          val __value = key.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        key.foreach { __v =>
          val __m = __v
          _output__.writeString(1, __m)
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def getKey: _root_.scala.Predef.String = key.getOrElse("")
      def clearKey: TracesEntry = copy(key = _root_.scala.None)
      def withKey(__v: _root_.scala.Predef.String): TracesEntry = copy(key = Option(__v))
      def getValue: GraphDebugInfo.StackTrace = value.getOrElse(graph_debug_info.GraphDebugInfo.StackTrace.defaultInstance)
      def clearValue: TracesEntry = copy(value = _root_.scala.None)
      def withValue(__v: GraphDebugInfo.StackTrace): TracesEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => key.orNull
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => key.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: GraphDebugInfo.TracesEntry.type = graph_debug_info.GraphDebugInfo.TracesEntry
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.GraphDebugInfo.TracesEntry])
  }
  
  object TracesEntry extends scalapb.GeneratedMessageCompanion[GraphDebugInfo.TracesEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[GraphDebugInfo.TracesEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): GraphDebugInfo.TracesEntry = {
      var __key: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
      var __value: _root_.scala.Option[GraphDebugInfo.StackTrace] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _root_.scala.Option(_input__.readStringRequireUtf8())
          case 18 =>
            __value = _root_.scala.Option(__value.fold(_root_.scalapb.LiteParser.readMessage[GraphDebugInfo.StackTrace](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      graph_debug_info.GraphDebugInfo.TracesEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[GraphDebugInfo.TracesEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        graph_debug_info.GraphDebugInfo.TracesEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[GraphDebugInfo.StackTrace]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = graph_debug_info.GraphDebugInfo.javaDescriptor.getNestedTypes().get(4)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = graph_debug_info.GraphDebugInfo.scalaDescriptor.nestedMessages(4)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = graph_debug_info.GraphDebugInfo.StackTrace
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = graph_debug_info.GraphDebugInfo.TracesEntry(
      key = _root_.scala.None,
      value = _root_.scala.None
    )
    implicit class TracesEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, GraphDebugInfo.TracesEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, GraphDebugInfo.TracesEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getKey)((c_, f_) => c_.copy(key = _root_.scala.Option(f_)))
      def optionalKey: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, GraphDebugInfo.StackTrace] = field(_.getValue)((c_, f_) => c_.copy(value = _root_.scala.Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[GraphDebugInfo.StackTrace]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[GraphDebugInfo.TracesEntry, (_root_.scala.Predef.String, GraphDebugInfo.StackTrace)] =
      _root_.scalapb.TypeMapper[GraphDebugInfo.TracesEntry, (_root_.scala.Predef.String, GraphDebugInfo.StackTrace)](__m => (__m.getKey, __m.getValue))(__p => graph_debug_info.GraphDebugInfo.TracesEntry(Some(__p._1), Some(__p._2)))
    def of(
      key: _root_.scala.Option[_root_.scala.Predef.String],
      value: _root_.scala.Option[GraphDebugInfo.StackTrace]
    ): GraphDebugInfo.TracesEntry = graph_debug_info.GraphDebugInfo.TracesEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.GraphDebugInfo.TracesEntry])
  }
  
  @SerialVersionUID(0L)
  final case class NameToTraceIdEntry(
      key: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
      value: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[NameToTraceIdEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (key.isDefined) {
          val __value = key.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        };
        if (value.isDefined) {
          val __value = value.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeFixed64Size(2, __value)
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        key.foreach { __v =>
          val __m = __v
          _output__.writeString(1, __m)
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeFixed64(2, __m)
        };
        unknownFields.writeTo(_output__)
      }
      def getKey: _root_.scala.Predef.String = key.getOrElse("")
      def clearKey: NameToTraceIdEntry = copy(key = _root_.scala.None)
      def withKey(__v: _root_.scala.Predef.String): NameToTraceIdEntry = copy(key = Option(__v))
      def getValue: _root_.scala.Long = value.getOrElse(0L)
      def clearValue: NameToTraceIdEntry = copy(value = _root_.scala.None)
      def withValue(__v: _root_.scala.Long): NameToTraceIdEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => key.orNull
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => key.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => value.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: GraphDebugInfo.NameToTraceIdEntry.type = graph_debug_info.GraphDebugInfo.NameToTraceIdEntry
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.GraphDebugInfo.NameToTraceIdEntry])
  }
  
  object NameToTraceIdEntry extends scalapb.GeneratedMessageCompanion[GraphDebugInfo.NameToTraceIdEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[GraphDebugInfo.NameToTraceIdEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): GraphDebugInfo.NameToTraceIdEntry = {
      var __key: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
      var __value: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _root_.scala.Option(_input__.readStringRequireUtf8())
          case 17 =>
            __value = _root_.scala.Option(_input__.readFixed64())
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      graph_debug_info.GraphDebugInfo.NameToTraceIdEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[GraphDebugInfo.NameToTraceIdEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        graph_debug_info.GraphDebugInfo.NameToTraceIdEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = graph_debug_info.GraphDebugInfo.javaDescriptor.getNestedTypes().get(5)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = graph_debug_info.GraphDebugInfo.scalaDescriptor.nestedMessages(5)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = graph_debug_info.GraphDebugInfo.NameToTraceIdEntry(
      key = _root_.scala.None,
      value = _root_.scala.None
    )
    implicit class NameToTraceIdEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, GraphDebugInfo.NameToTraceIdEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, GraphDebugInfo.NameToTraceIdEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getKey)((c_, f_) => c_.copy(key = _root_.scala.Option(f_)))
      def optionalKey: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getValue)((c_, f_) => c_.copy(value = _root_.scala.Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Long]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[GraphDebugInfo.NameToTraceIdEntry, (_root_.scala.Predef.String, _root_.scala.Long)] =
      _root_.scalapb.TypeMapper[GraphDebugInfo.NameToTraceIdEntry, (_root_.scala.Predef.String, _root_.scala.Long)](__m => (__m.getKey, __m.getValue))(__p => graph_debug_info.GraphDebugInfo.NameToTraceIdEntry(Some(__p._1), Some(__p._2)))
    def of(
      key: _root_.scala.Option[_root_.scala.Predef.String],
      value: _root_.scala.Option[_root_.scala.Long]
    ): GraphDebugInfo.NameToTraceIdEntry = graph_debug_info.GraphDebugInfo.NameToTraceIdEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.GraphDebugInfo.NameToTraceIdEntry])
  }
  
  implicit class GraphDebugInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, GraphDebugInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, GraphDebugInfo](_l) {
    def files: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.files)((c_, f_) => c_.copy(files = f_))
    def framesById: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Long, GraphDebugInfo.FileLineCol]] = field(_.framesById)((c_, f_) => c_.copy(framesById = f_))
    def tracesById: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Long, GraphDebugInfo.StackTrace]] = field(_.tracesById)((c_, f_) => c_.copy(tracesById = f_))
    def traces: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, GraphDebugInfo.StackTrace]] = field(_.traces)((c_, f_) => c_.copy(traces = f_))
    def nameToTraceId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Long]] = field(_.nameToTraceId)((c_, f_) => c_.copy(nameToTraceId = f_))
  }
  final val FILES_FIELD_NUMBER = 1
  final val FRAMES_BY_ID_FIELD_NUMBER = 4
  final val TRACES_BY_ID_FIELD_NUMBER = 6
  final val TRACES_FIELD_NUMBER = 2
  final val NAME_TO_TRACE_ID_FIELD_NUMBER = 5
  @transient
  private[graph_debug_info] val _typemapper_framesById: _root_.scalapb.TypeMapper[GraphDebugInfo.FramesByIdEntry, (_root_.scala.Long, GraphDebugInfo.FileLineCol)] = implicitly[_root_.scalapb.TypeMapper[GraphDebugInfo.FramesByIdEntry, (_root_.scala.Long, GraphDebugInfo.FileLineCol)]]
  @transient
  private[graph_debug_info] val _typemapper_tracesById: _root_.scalapb.TypeMapper[GraphDebugInfo.TracesByIdEntry, (_root_.scala.Long, GraphDebugInfo.StackTrace)] = implicitly[_root_.scalapb.TypeMapper[GraphDebugInfo.TracesByIdEntry, (_root_.scala.Long, GraphDebugInfo.StackTrace)]]
  @transient
  private[graph_debug_info] val _typemapper_traces: _root_.scalapb.TypeMapper[GraphDebugInfo.TracesEntry, (_root_.scala.Predef.String, GraphDebugInfo.StackTrace)] = implicitly[_root_.scalapb.TypeMapper[GraphDebugInfo.TracesEntry, (_root_.scala.Predef.String, GraphDebugInfo.StackTrace)]]
  @transient
  private[graph_debug_info] val _typemapper_nameToTraceId: _root_.scalapb.TypeMapper[GraphDebugInfo.NameToTraceIdEntry, (_root_.scala.Predef.String, _root_.scala.Long)] = implicitly[_root_.scalapb.TypeMapper[GraphDebugInfo.NameToTraceIdEntry, (_root_.scala.Predef.String, _root_.scala.Long)]]
  def of(
          files: _root_.scala.Seq[_root_.scala.Predef.String],
          framesById: _root_.scala.collection.immutable.Map[_root_.scala.Long, GraphDebugInfo.FileLineCol],
          tracesById: _root_.scala.collection.immutable.Map[_root_.scala.Long, GraphDebugInfo.StackTrace],
          traces: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, GraphDebugInfo.StackTrace],
          nameToTraceId: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Long]
  ): GraphDebugInfo = GraphDebugInfo(
    files,
    framesById,
    tracesById,
    traces,
    nameToTraceId
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.GraphDebugInfo])
}
