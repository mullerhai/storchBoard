// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorflow.framework.resource_handle

import tensorflow.framework.tensor_shape.TensorShapeProto
import tensorflow.framework.types.DataType
import tensorflow.framework.{resource_handle, tensor_shape, types}

/** Protocol buffer representing a handle to a tensorflow resource. Handles are
  * not valid across executions, but can be serialized back and forth from within
  * a single run.
  *
  * @param device
  *   Unique name for the device containing the resource.
  * @param container
  *   Container in which this resource is placed.
  * @param name
  *   Unique name of this resource.
  * @param _hashCode
  *   Hash code for the type of the resource. Is only valid in the same device
  *   and in the same execution.
  * @param maybeTypeName
  *   For debug-only, the name of the type pointed to by this handle, if
  *   available.
  * @param dtypesAndShapes
  *   Data types and shapes for the underlying resource.
  */
@SerialVersionUID(0L)
final case class ResourceHandleProto(
                                      device: _root_.scala.Predef.String = "",
                                      container: _root_.scala.Predef.String = "",
                                      name: _root_.scala.Predef.String = "",
                                      _hashCode: _root_.scala.Long = 0L,
                                      maybeTypeName: _root_.scala.Predef.String = "",
                                      dtypesAndShapes: _root_.scala.Seq[ResourceHandleProto.DtypeAndShape] = _root_.scala.Seq.empty,
                                      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ResourceHandleProto] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = device
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = container
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = name
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = _hashCode
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(4, __value)
        }
      };
      
      {
        val __value = maybeTypeName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      dtypesAndShapes.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = device
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = container
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = name
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = _hashCode
        if (__v != 0L) {
          _output__.writeUInt64(4, __v)
        }
      };
      {
        val __v = maybeTypeName
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      dtypesAndShapes.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withDevice(__v: _root_.scala.Predef.String): ResourceHandleProto = copy(device = __v)
    def withContainer(__v: _root_.scala.Predef.String): ResourceHandleProto = copy(container = __v)
    def withName(__v: _root_.scala.Predef.String): ResourceHandleProto = copy(name = __v)
    def withHashCode(__v: _root_.scala.Long): ResourceHandleProto = copy(_hashCode = __v)
    def withMaybeTypeName(__v: _root_.scala.Predef.String): ResourceHandleProto = copy(maybeTypeName = __v)
    def clearDtypesAndShapes = copy(dtypesAndShapes = _root_.scala.Seq.empty)
    def addDtypesAndShapes(__vs: ResourceHandleProto.DtypeAndShape *): ResourceHandleProto = addAllDtypesAndShapes(__vs)
    def addAllDtypesAndShapes(__vs: Iterable[ResourceHandleProto.DtypeAndShape]): ResourceHandleProto = copy(dtypesAndShapes = dtypesAndShapes ++ __vs)
    def withDtypesAndShapes(__v: _root_.scala.Seq[ResourceHandleProto.DtypeAndShape]): ResourceHandleProto = copy(dtypesAndShapes = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = device
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = container
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = _hashCode
          if (__t != 0L) __t else null
        }
        case 5 => {
          val __t = maybeTypeName
          if (__t != "") __t else null
        }
        case 6 => dtypesAndShapes
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(device)
        case 2 => _root_.scalapb.descriptors.PString(container)
        case 3 => _root_.scalapb.descriptors.PString(name)
        case 4 => _root_.scalapb.descriptors.PLong(_hashCode)
        case 5 => _root_.scalapb.descriptors.PString(maybeTypeName)
        case 6 => _root_.scalapb.descriptors.PRepeated(dtypesAndShapes.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: ResourceHandleProto.type = resource_handle.ResourceHandleProto
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.ResourceHandleProto])
}

object ResourceHandleProto extends scalapb.GeneratedMessageCompanion[ResourceHandleProto] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[ResourceHandleProto] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): ResourceHandleProto = {
    var __device: _root_.scala.Predef.String = ""
    var __container: _root_.scala.Predef.String = ""
    var __name: _root_.scala.Predef.String = ""
    var ___hashCode: _root_.scala.Long = 0L
    var __maybeTypeName: _root_.scala.Predef.String = ""
    val __dtypesAndShapes: _root_.scala.collection.immutable.VectorBuilder[ResourceHandleProto.DtypeAndShape] = new _root_.scala.collection.immutable.VectorBuilder[ResourceHandleProto.DtypeAndShape]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __device = _input__.readStringRequireUtf8()
        case 18 =>
          __container = _input__.readStringRequireUtf8()
        case 26 =>
          __name = _input__.readStringRequireUtf8()
        case 32 =>
          ___hashCode = _input__.readUInt64()
        case 42 =>
          __maybeTypeName = _input__.readStringRequireUtf8()
        case 50 =>
          __dtypesAndShapes += _root_.scalapb.LiteParser.readMessage[ResourceHandleProto.DtypeAndShape](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    ResourceHandleProto(
        device = __device,
        container = __container,
        name = __name,
        _hashCode = ___hashCode,
        maybeTypeName = __maybeTypeName,
        dtypesAndShapes = __dtypesAndShapes.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[ResourceHandleProto] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      ResourceHandleProto(
        device = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        container = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        _hashCode = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        maybeTypeName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        dtypesAndShapes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[ResourceHandleProto.DtypeAndShape]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.framework.resource_handle.ResourceHandleProtoCompanion.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.framework.resource_handle.ResourceHandleProtoCompanion.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 6 => __out = resource_handle.ResourceHandleProto.DtypeAndShape
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      resource_handle.ResourceHandleProto.DtypeAndShape
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = ResourceHandleProto(
    device = "",
    container = "",
    name = "",
    _hashCode = 0L,
    maybeTypeName = "",
    dtypesAndShapes = _root_.scala.Seq.empty
  )
  /** Protocol buffer representing a pair of (data type, tensor shape).
    *
    * @param dtype
    *   Data type of the tensor.
    * @param shape
    *   Shape of the tensor.
    */
  @SerialVersionUID(0L)
  final case class DtypeAndShape(
                                  dtype: DataType = DataType.DT_INVALID,
                                  shape: _root_.scala.Option[TensorShapeProto] = _root_.scala.None,
                                  unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[DtypeAndShape] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = dtype.value
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
          }
        };
        if (shape.isDefined) {
          val __value = shape.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = dtype.value
          if (__v != 0) {
            _output__.writeEnum(1, __v)
          }
        };
        shape.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withDtype(__v: DataType): DtypeAndShape = copy(dtype = __v)
      def getShape: TensorShapeProto = shape.getOrElse(tensor_shape.TensorShapeProto.defaultInstance)
      def clearShape: DtypeAndShape = copy(shape = _root_.scala.None)
      def withShape(__v: TensorShapeProto): DtypeAndShape = copy(shape = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = dtype.javaValueDescriptor
            if (__t.getNumber() != 0) __t else null
          }
          case 2 => shape.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PEnum(dtype.scalaValueDescriptor)
          case 2 => shape.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: ResourceHandleProto.DtypeAndShape.type = resource_handle.ResourceHandleProto.DtypeAndShape
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.ResourceHandleProto.DtypeAndShape])
  }
  
  object DtypeAndShape extends scalapb.GeneratedMessageCompanion[ResourceHandleProto.DtypeAndShape] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[ResourceHandleProto.DtypeAndShape] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): ResourceHandleProto.DtypeAndShape = {
      var __dtype: DataType = types.DataType.DT_INVALID
      var __shape: _root_.scala.Option[TensorShapeProto] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __dtype = types.DataType.fromValue(_input__.readEnum())
          case 18 =>
            __shape = _root_.scala.Option(__shape.fold(_root_.scalapb.LiteParser.readMessage[TensorShapeProto](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      resource_handle.ResourceHandleProto.DtypeAndShape(
          dtype = __dtype,
          shape = __shape,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[ResourceHandleProto.DtypeAndShape] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        resource_handle.ResourceHandleProto.DtypeAndShape(
          dtype = types.DataType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(types.DataType.DT_INVALID.scalaValueDescriptor).number),
          shape = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[TensorShapeProto]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = resource_handle.ResourceHandleProto.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = resource_handle.ResourceHandleProto.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = tensor_shape.TensorShapeProto
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => types.DataType
      }
    }
    lazy val defaultInstance = resource_handle.ResourceHandleProto.DtypeAndShape(
      dtype = types.DataType.DT_INVALID,
      shape = _root_.scala.None
    )
    implicit class DtypeAndShapeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, ResourceHandleProto.DtypeAndShape]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, ResourceHandleProto.DtypeAndShape](_l) {
      def dtype: _root_.scalapb.lenses.Lens[UpperPB, DataType] = field(_.dtype)((c_, f_) => c_.copy(dtype = f_))
      def shape: _root_.scalapb.lenses.Lens[UpperPB, TensorShapeProto] = field(_.getShape)((c_, f_) => c_.copy(shape = _root_.scala.Option(f_)))
      def optionalShape: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[TensorShapeProto]] = field(_.shape)((c_, f_) => c_.copy(shape = f_))
    }
    final val DTYPE_FIELD_NUMBER = 1
    final val SHAPE_FIELD_NUMBER = 2
    def of(
            dtype: DataType,
            shape: _root_.scala.Option[TensorShapeProto]
    ): ResourceHandleProto.DtypeAndShape = resource_handle.ResourceHandleProto.DtypeAndShape(
      dtype,
      shape
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.ResourceHandleProto.DtypeAndShape])
  }
  
  implicit class ResourceHandleProtoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, ResourceHandleProto]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, ResourceHandleProto](_l) {
    def device: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.device)((c_, f_) => c_.copy(device = f_))
    def container: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.container)((c_, f_) => c_.copy(container = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def _hashCode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_._hashCode)((c_, f_) => c_.copy(_hashCode = f_))
    def maybeTypeName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.maybeTypeName)((c_, f_) => c_.copy(maybeTypeName = f_))
    def dtypesAndShapes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[ResourceHandleProto.DtypeAndShape]] = field(_.dtypesAndShapes)((c_, f_) => c_.copy(dtypesAndShapes = f_))
  }
  final val DEVICE_FIELD_NUMBER = 1
  final val CONTAINER_FIELD_NUMBER = 2
  final val NAME_FIELD_NUMBER = 3
  final val HASH_CODE_FIELD_NUMBER = 4
  final val MAYBE_TYPE_NAME_FIELD_NUMBER = 5
  final val DTYPES_AND_SHAPES_FIELD_NUMBER = 6
  def of(
    device: _root_.scala.Predef.String,
    container: _root_.scala.Predef.String,
    name: _root_.scala.Predef.String,
    _hashCode: _root_.scala.Long,
    maybeTypeName: _root_.scala.Predef.String,
    dtypesAndShapes: _root_.scala.Seq[ResourceHandleProto.DtypeAndShape]
  ): ResourceHandleProto = ResourceHandleProto(
    device,
    container,
    name,
    _hashCode,
    maybeTypeName,
    dtypesAndShapes
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.ResourceHandleProto])
}
