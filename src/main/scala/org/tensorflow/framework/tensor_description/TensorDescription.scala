// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package org.tensorflow.framework.tensor_description

/** @param dtype
  *   Data type of tensor elements
  * @param shape
  *   Shape of the tensor.
  * @param allocationDescription
  *   Information about the size and allocator used for the data
  */
@SerialVersionUID(0L)
final case class TensorDescription(
    dtype: org.tensorflow.framework.types.DataType = org.tensorflow.framework.types.DataType.DT_INVALID,
    shape: _root_.scala.Option[org.tensorflow.framework.tensor_shape.TensorShapeProto] = _root_.scala.None,
    allocationDescription: _root_.scala.Option[org.tensorflow.framework.allocation_description.AllocationDescription] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TensorDescription] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = dtype.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
        }
      };
      if (shape.isDefined) {
        val __value = shape.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (allocationDescription.isDefined) {
        val __value = allocationDescription.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = dtype.value
        if (__v != 0) {
          _output__.writeEnum(1, __v)
        }
      };
      shape.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      allocationDescription.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withDtype(__v: org.tensorflow.framework.types.DataType): TensorDescription = copy(dtype = __v)
    def getShape: org.tensorflow.framework.tensor_shape.TensorShapeProto = shape.getOrElse(org.tensorflow.framework.tensor_shape.TensorShapeProto.defaultInstance)
    def clearShape: TensorDescription = copy(shape = _root_.scala.None)
    def withShape(__v: org.tensorflow.framework.tensor_shape.TensorShapeProto): TensorDescription = copy(shape = Option(__v))
    def getAllocationDescription: org.tensorflow.framework.allocation_description.AllocationDescription = allocationDescription.getOrElse(org.tensorflow.framework.allocation_description.AllocationDescription.defaultInstance)
    def clearAllocationDescription: TensorDescription = copy(allocationDescription = _root_.scala.None)
    def withAllocationDescription(__v: org.tensorflow.framework.allocation_description.AllocationDescription): TensorDescription = copy(allocationDescription = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = dtype.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => shape.orNull
        case 4 => allocationDescription.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(dtype.scalaValueDescriptor)
        case 2 => shape.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => allocationDescription.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: org.tensorflow.framework.tensor_description.TensorDescription.type = org.tensorflow.framework.tensor_description.TensorDescription
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.TensorDescription])
}

object TensorDescription extends scalapb.GeneratedMessageCompanion[org.tensorflow.framework.tensor_description.TensorDescription] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.tensorflow.framework.tensor_description.TensorDescription] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.tensorflow.framework.tensor_description.TensorDescription = {
    var __dtype: org.tensorflow.framework.types.DataType = org.tensorflow.framework.types.DataType.DT_INVALID
    var __shape: _root_.scala.Option[org.tensorflow.framework.tensor_shape.TensorShapeProto] = _root_.scala.None
    var __allocationDescription: _root_.scala.Option[org.tensorflow.framework.allocation_description.AllocationDescription] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __dtype = org.tensorflow.framework.types.DataType.fromValue(_input__.readEnum())
        case 18 =>
          __shape = _root_.scala.Option(__shape.fold(_root_.scalapb.LiteParser.readMessage[org.tensorflow.framework.tensor_shape.TensorShapeProto](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __allocationDescription = _root_.scala.Option(__allocationDescription.fold(_root_.scalapb.LiteParser.readMessage[org.tensorflow.framework.allocation_description.AllocationDescription](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    org.tensorflow.framework.tensor_description.TensorDescription(
        dtype = __dtype,
        shape = __shape,
        allocationDescription = __allocationDescription,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.tensorflow.framework.tensor_description.TensorDescription] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      org.tensorflow.framework.tensor_description.TensorDescription(
        dtype = org.tensorflow.framework.types.DataType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(org.tensorflow.framework.types.DataType.DT_INVALID.scalaValueDescriptor).number),
        shape = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[org.tensorflow.framework.tensor_shape.TensorShapeProto]]),
        allocationDescription = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[org.tensorflow.framework.allocation_description.AllocationDescription]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.framework.tensor_description.TensorDescriptionProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.framework.tensor_description.TensorDescriptionProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?]= {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?]= null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = org.tensorflow.framework.tensor_shape.TensorShapeProto
      case 4 => __out = org.tensorflow.framework.allocation_description.AllocationDescription
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?]= {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => org.tensorflow.framework.types.DataType
    }
  }
  lazy val defaultInstance = org.tensorflow.framework.tensor_description.TensorDescription(
    dtype = org.tensorflow.framework.types.DataType.DT_INVALID,
    shape = _root_.scala.None,
    allocationDescription = _root_.scala.None
  )
  implicit class TensorDescriptionLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.tensor_description.TensorDescription]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.tensorflow.framework.tensor_description.TensorDescription](_l) {
    def dtype: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.types.DataType] = field(_.dtype)((c_, f_) => c_.copy(dtype = f_))
    def shape: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.tensor_shape.TensorShapeProto] = field(_.getShape)((c_, f_) => c_.copy(shape = _root_.scala.Option(f_)))
    def optionalShape: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[org.tensorflow.framework.tensor_shape.TensorShapeProto]] = field(_.shape)((c_, f_) => c_.copy(shape = f_))
    def allocationDescription: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.allocation_description.AllocationDescription] = field(_.getAllocationDescription)((c_, f_) => c_.copy(allocationDescription = _root_.scala.Option(f_)))
    def optionalAllocationDescription: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[org.tensorflow.framework.allocation_description.AllocationDescription]] = field(_.allocationDescription)((c_, f_) => c_.copy(allocationDescription = f_))
  }
  final val DTYPE_FIELD_NUMBER = 1
  final val SHAPE_FIELD_NUMBER = 2
  final val ALLOCATION_DESCRIPTION_FIELD_NUMBER = 4
  def of(
    dtype: org.tensorflow.framework.types.DataType,
    shape: _root_.scala.Option[org.tensorflow.framework.tensor_shape.TensorShapeProto],
    allocationDescription: _root_.scala.Option[org.tensorflow.framework.allocation_description.AllocationDescription]
  ): _root_.org.tensorflow.framework.tensor_description.TensorDescription = _root_.org.tensorflow.framework.tensor_description.TensorDescription(
    dtype,
    shape,
    allocationDescription
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.TensorDescription])
}
