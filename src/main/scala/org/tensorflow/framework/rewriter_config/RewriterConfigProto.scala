// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package org.tensorflow.framework.rewriter_config

object RewriterConfigProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    org.tensorflow.framework.attr_value.AttrValueProto,
    org.tensorflow.framework.verifier_config.VerifierConfigProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]](
      org.tensorflow.framework.rewriter_config.AutoParallelOptions,
      org.tensorflow.framework.rewriter_config.ScopedAllocatorOptions,
      org.tensorflow.framework.rewriter_config.RewriterConfig
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """Ci50ZW5zb3Jib2FyZC9jb21wYXQvcHJvdG8vcmV3cml0ZXJfY29uZmlnLnByb3RvEgt0ZW5zb3Jib2FyZBopdGVuc29yYm9hc
  mQvY29tcGF0L3Byb3RvL2F0dHJfdmFsdWUucHJvdG8aLnRlbnNvcmJvYXJkL2NvbXBhdC9wcm90by92ZXJpZmllcl9jb25maWcuc
  HJvdG8ibwoTQXV0b1BhcmFsbGVsT3B0aW9ucxIjCgZlbmFibGUYASABKAhCC+I/CBIGZW5hYmxlUgZlbmFibGUSMwoMbnVtX3Jlc
  GxpY2FzGAIgASgFQhDiPw0SC251bVJlcGxpY2FzUgtudW1SZXBsaWNhcyJEChZTY29wZWRBbGxvY2F0b3JPcHRpb25zEioKCWVuY
  WJsZV9vcBgBIAMoCUIN4j8KEghlbmFibGVPcFIIZW5hYmxlT3AikSkKDlJld3JpdGVyQ29uZmlnEnMKFWNwdV9sYXlvdXRfY29ud
  mVyc2lvbhgyIAEoDjIlLnRlbnNvcmJvYXJkLlJld3JpdGVyQ29uZmlnLkNwdUxheW91dEIY4j8VEhNjcHVMYXlvdXRDb252ZXJza
  W9uUhNjcHVMYXlvdXRDb252ZXJzaW9uEmMKEGxheW91dF9vcHRpbWl6ZXIYASABKA4yIi50ZW5zb3Jib2FyZC5SZXdyaXRlckNvb
  mZpZy5Ub2dnbGVCFOI/ERIPbGF5b3V0T3B0aW1pemVyUg9sYXlvdXRPcHRpbWl6ZXISYwoQY29uc3RhbnRfZm9sZGluZxgDIAEoD
  jIiLnRlbnNvcmJvYXJkLlJld3JpdGVyQ29uZmlnLlRvZ2dsZUIU4j8REg9jb25zdGFudEZvbGRpbmdSD2NvbnN0YW50Rm9sZGluZ
  xJpChJzaGFwZV9vcHRpbWl6YXRpb24YDSABKA4yIi50ZW5zb3Jib2FyZC5SZXdyaXRlckNvbmZpZy5Ub2dnbGVCFuI/ExIRc2hhc
  GVPcHRpbWl6YXRpb25SEXNoYXBlT3B0aW1pemF0aW9uElAKCXJlbWFwcGluZxgOIAEoDjIiLnRlbnNvcmJvYXJkLlJld3JpdGVyQ
  29uZmlnLlRvZ2dsZUIO4j8LEglyZW1hcHBpbmdSCXJlbWFwcGluZxKCAQobY29tbW9uX3N1YmdyYXBoX2VsaW1pbmF0aW9uGBggA
  SgOMiIudGVuc29yYm9hcmQuUmV3cml0ZXJDb25maWcuVG9nZ2xlQh7iPxsSGWNvbW1vblN1YmdyYXBoRWxpbWluYXRpb25SGWNvb
  W1vblN1YmdyYXBoRWxpbWluYXRpb24SeAoXYXJpdGhtZXRpY19vcHRpbWl6YXRpb24YByABKA4yIi50ZW5zb3Jib2FyZC5SZXdya
  XRlckNvbmZpZy5Ub2dnbGVCG+I/GBIWYXJpdGhtZXRpY09wdGltaXphdGlvblIWYXJpdGhtZXRpY09wdGltaXphdGlvbhJ4ChdkZ
  XBlbmRlbmN5X29wdGltaXphdGlvbhgIIAEoDjIiLnRlbnNvcmJvYXJkLlJld3JpdGVyQ29uZmlnLlRvZ2dsZUIb4j8YEhZkZXBlb
  mRlbmN5T3B0aW1pemF0aW9uUhZkZXBlbmRlbmN5T3B0aW1pemF0aW9uEmYKEWxvb3Bfb3B0aW1pemF0aW9uGAkgASgOMiIudGVuc
  29yYm9hcmQuUmV3cml0ZXJDb25maWcuVG9nZ2xlQhXiPxISEGxvb3BPcHRpbWl6YXRpb25SEGxvb3BPcHRpbWl6YXRpb24ScgoVZ
  nVuY3Rpb25fb3B0aW1pemF0aW9uGAogASgOMiIudGVuc29yYm9hcmQuUmV3cml0ZXJDb25maWcuVG9nZ2xlQhniPxYSFGZ1bmN0a
  W9uT3B0aW1pemF0aW9uUhRmdW5jdGlvbk9wdGltaXphdGlvbhJdCg5kZWJ1Z19zdHJpcHBlchgLIAEoDjIiLnRlbnNvcmJvYXJkL
  lJld3JpdGVyQ29uZmlnLlRvZ2dsZUIS4j8PEg1kZWJ1Z1N0cmlwcGVyUg1kZWJ1Z1N0cmlwcGVyEkwKFWRpc2FibGVfbW9kZWxfc
  HJ1bmluZxgCIAEoCEIY4j8VEhNkaXNhYmxlTW9kZWxQcnVuaW5nUhNkaXNhYmxlTW9kZWxQcnVuaW5nEogBCh1zY29wZWRfYWxsb
  2NhdG9yX29wdGltaXphdGlvbhgPIAEoDjIiLnRlbnNvcmJvYXJkLlJld3JpdGVyQ29uZmlnLlRvZ2dsZUIg4j8dEhtzY29wZWRBb
  GxvY2F0b3JPcHRpbWl6YXRpb25SG3Njb3BlZEFsbG9jYXRvck9wdGltaXphdGlvbhJ3ChhwaW5fdG9faG9zdF9vcHRpbWl6YXRpb
  24YEiABKA4yIi50ZW5zb3Jib2FyZC5SZXdyaXRlckNvbmZpZy5Ub2dnbGVCGuI/FxIVcGluVG9Ib3N0T3B0aW1pemF0aW9uUhVwa
  W5Ub0hvc3RPcHRpbWl6YXRpb24SeAoXaW1wbGVtZW50YXRpb25fc2VsZWN0b3IYFiABKA4yIi50ZW5zb3Jib2FyZC5SZXdyaXRlc
  kNvbmZpZy5Ub2dnbGVCG+I/GBIWaW1wbGVtZW50YXRpb25TZWxlY3RvclIWaW1wbGVtZW50YXRpb25TZWxlY3RvchJtChRhdXRvX
  21peGVkX3ByZWNpc2lvbhgXIAEoDjIiLnRlbnNvcmJvYXJkLlJld3JpdGVyQ29uZmlnLlRvZ2dsZUIX4j8UEhJhdXRvTWl4ZWRQc
  mVjaXNpb25SEmF1dG9NaXhlZFByZWNpc2lvbhJ3ChhhdXRvX21peGVkX3ByZWNpc2lvbl9ta2wYGSABKA4yIi50ZW5zb3Jib2FyZ
  C5SZXdyaXRlckNvbmZpZy5Ub2dnbGVCGuI/FxIVYXV0b01peGVkUHJlY2lzaW9uTWtsUhVhdXRvTWl4ZWRQcmVjaXNpb25Na2wSm
  QEKJGF1dG9fbWl4ZWRfcHJlY2lzaW9uX29uZWRubl9iZmxvYXQxNhgfIAEoDjIiLnRlbnNvcmJvYXJkLlJld3JpdGVyQ29uZmlnL
  lRvZ2dsZUIl4j8iEiBhdXRvTWl4ZWRQcmVjaXNpb25PbmVkbm5CZmxvYXQxNlIgYXV0b01peGVkUHJlY2lzaW9uT25lZG5uQmZsb
  2F0MTYSdwoYYXV0b19taXhlZF9wcmVjaXNpb25fY3B1GB0gASgOMiIudGVuc29yYm9hcmQuUmV3cml0ZXJDb25maWcuVG9nZ2xlQ
  hriPxcSFWF1dG9NaXhlZFByZWNpc2lvbkNwdVIVYXV0b01peGVkUHJlY2lzaW9uQ3B1Ek8KFmRpc2FibGVfbWV0YV9vcHRpbWl6Z
  XIYEyABKAhCGeI/FhIUZGlzYWJsZU1ldGFPcHRpbWl6ZXJSFGRpc2FibGVNZXRhT3B0aW1pemVyEkwKFWRpc2FibGVfdGZnX29wd
  GltaXplchggIAEoCEIY4j8VEhNkaXNhYmxlVGZnT3B0aW1pemVyUhNkaXNhYmxlVGZnT3B0aW1pemVyEnAKFXVzZV9wbHVnaW5fb
  3B0aW1pemVycxgcIAEoDjIiLnRlbnNvcmJvYXJkLlJld3JpdGVyQ29uZmlnLlRvZ2dsZUIY4j8VEhN1c2VQbHVnaW5PcHRpbWl6Z
  XJzUhN1c2VQbHVnaW5PcHRpbWl6ZXJzEpsBCiRleHBlcmltZW50YWxfY29uZGl0aW9uYWxfY29kZV9tb3Rpb24YHiABKA4yIi50Z
  W5zb3Jib2FyZC5SZXdyaXRlckNvbmZpZy5Ub2dnbGVCJuI/IxIhZXhwZXJpbWVudGFsQ29uZGl0aW9uYWxDb2RlTW90aW9uUiFle
  HBlcmltZW50YWxDb25kaXRpb25hbENvZGVNb3Rpb24ShwEKGW1ldGFfb3B0aW1pemVyX2l0ZXJhdGlvbnMYDCABKA4yLS50ZW5zb
  3Jib2FyZC5SZXdyaXRlckNvbmZpZy5OdW1JdGVyYXRpb25zVHlwZUIc4j8ZEhdtZXRhT3B0aW1pemVySXRlcmF0aW9uc1IXbWV0Y
  U9wdGltaXplckl0ZXJhdGlvbnMSOgoPbWluX2dyYXBoX25vZGVzGBEgASgFQhLiPw8SDW1pbkdyYXBoTm9kZXNSDW1pbkdyYXBoT
  m9kZXMSogEKM2V4cGVyaW1lbnRhbF9kaXNhYmxlX2NvbXByZXNzZWRfdGVuc29yX29wdGltaXphdGlvbhgaIAEoCEI04j8xEi9le
  HBlcmltZW50YWxEaXNhYmxlQ29tcHJlc3NlZFRlbnNvck9wdGltaXphdGlvblIvZXhwZXJpbWVudGFsRGlzYWJsZUNvbXByZXNzZ
  WRUZW5zb3JPcHRpbWl6YXRpb24SogEKM2V4cGVyaW1lbnRhbF9kaXNhYmxlX2ZvbGRpbmdfcXVhbnRpemF0aW9uX2VtdWxhdGlvb
  hgbIAEoCEI04j8xEi9leHBlcmltZW50YWxEaXNhYmxlRm9sZGluZ1F1YW50aXphdGlvbkVtdWxhdGlvblIvZXhwZXJpbWVudGFsR
  GlzYWJsZUZvbGRpbmdRdWFudGl6YXRpb25FbXVsYXRpb24ScAoTbWVtb3J5X29wdGltaXphdGlvbhgEIAEoDjImLnRlbnNvcmJvY
  XJkLlJld3JpdGVyQ29uZmlnLk1lbU9wdFR5cGVCF+I/FBISbWVtb3J5T3B0aW1pemF0aW9uUhJtZW1vcnlPcHRpbWl6YXRpb24Sf
  AonbWVtb3J5X29wdGltaXplcl90YXJnZXRfbm9kZV9uYW1lX3Njb3BlGAYgASgJQifiPyQSIm1lbW9yeU9wdGltaXplclRhcmdld
  E5vZGVOYW1lU2NvcGVSIm1lbW9yeU9wdGltaXplclRhcmdldE5vZGVOYW1lU2NvcGUSVgoZbWV0YV9vcHRpbWl6ZXJfdGltZW91d
  F9tcxgUIAEoA0Ib4j8YEhZtZXRhT3B0aW1pemVyVGltZW91dE1zUhZtZXRhT3B0aW1pemVyVGltZW91dE1zElgKDWF1dG9fcGFyY
  WxsZWwYBSABKAsyIC50ZW5zb3Jib2FyZC5BdXRvUGFyYWxsZWxPcHRpb25zQhHiPw4SDGF1dG9QYXJhbGxlbFIMYXV0b1BhcmFsb
  GVsElMKGGZhaWxfb25fb3B0aW1pemVyX2Vycm9ycxgVIAEoCEIa4j8XEhVmYWlsT25PcHRpbWl6ZXJFcnJvcnNSFWZhaWxPbk9wd
  GltaXplckVycm9ycxJxChVzY29wZWRfYWxsb2NhdG9yX29wdHMYECABKAsyIy50ZW5zb3Jib2FyZC5TY29wZWRBbGxvY2F0b3JPc
  HRpb25zQhjiPxUSE3Njb3BlZEFsbG9jYXRvck9wdHNSE3Njb3BlZEFsbG9jYXRvck9wdHMSLwoKb3B0aW1pemVycxhkIAMoCUIP4
  j8MEgpvcHRpbWl6ZXJzUgpvcHRpbWl6ZXJzEnUKEWN1c3RvbV9vcHRpbWl6ZXJzGMgBIAMoCzIwLnRlbnNvcmJvYXJkLlJld3Jpd
  GVyQ29uZmlnLkN1c3RvbUdyYXBoT3B0aW1pemVyQhXiPxISEGN1c3RvbU9wdGltaXplcnNSEGN1c3RvbU9wdGltaXplcnMShgEKH
  2ludGVyX29wdGltaXplcl92ZXJpZmllcl9jb25maWcYrAIgASgLMhsudGVuc29yYm9hcmQuVmVyaWZpZXJDb25maWdCIeI/HhIca
  W50ZXJPcHRpbWl6ZXJWZXJpZmllckNvbmZpZ1IcaW50ZXJPcHRpbWl6ZXJWZXJpZmllckNvbmZpZxKMAQohcG9zdF9vcHRpbWl6Y
  XRpb25fdmVyaWZpZXJfY29uZmlnGK0CIAEoCzIbLnRlbnNvcmJvYXJkLlZlcmlmaWVyQ29uZmlnQiPiPyASHnBvc3RPcHRpbWl6Y
  XRpb25WZXJpZmllckNvbmZpZ1IecG9zdE9wdGltaXphdGlvblZlcmlmaWVyQ29uZmlnGqACChRDdXN0b21HcmFwaE9wdGltaXplc
  hIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSegoNcGFyYW1ldGVyX21hcBgCIAMoCzJCLnRlbnNvcmJvYXJkLlJld3Jpd
  GVyQ29uZmlnLkN1c3RvbUdyYXBoT3B0aW1pemVyLlBhcmFtZXRlck1hcEVudHJ5QhHiPw4SDHBhcmFtZXRlck1hcFIMcGFyYW1ld
  GVyTWFwGm0KEVBhcmFtZXRlck1hcEVudHJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRI4CgV2YWx1ZRgCIAEoCzIWLnRlb
  nNvcmJvYXJkLkF0dHJWYWx1ZUIK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBIsYBCgZUb2dnbGUSGQoHREVGQVVMVBAAGgziPwkSB0RFR
  kFVTFQSDwoCT04QARoH4j8EEgJPThIRCgNPRkYQAhoI4j8FEgNPRkYSHwoKQUdHUkVTU0lWRRADGg/iPwwSCkFHR1JFU1NJVkUSL
  QoRRVhQRVJJTUVOVEFMX01MSVIQBBoW4j8TEhFFWFBFUklNRU5UQUxfTUxJUhItChFFWFBFUklNRU5UQUxfQk9USBAFGhbiPxMSE
  UVYUEVSSU1FTlRBTF9CT1RIIooBCglDcHVMYXlvdXQSMwoUTk9fQ09OVkVSU0lPTl9PTl9DUFUQABoZ4j8WEhROT19DT05WRVJTS
  U9OX09OX0NQVRIjCgxOQ0hXX1RPX05IV0MQARoR4j8OEgxOQ0hXX1RPX05IV0MSIwoMTkhXQ19UT19OQ0hXEAIaEeI/DhIMTkhXQ
  19UT19OQ0hXImgKEU51bUl0ZXJhdGlvbnNUeXBlEi0KEURFRkFVTFRfTlVNX0lURVJTEAAaFuI/ExIRREVGQVVMVF9OVU1fSVRFU
  lMSEQoDT05FEAEaCOI/BRIDT05FEhEKA1RXTxACGgjiPwUSA1RXTyK5AgoKTWVtT3B0VHlwZRIpCg9ERUZBVUxUX01FTV9PUFQQA
  BoU4j8REg9ERUZBVUxUX01FTV9PUFQSHwoKTk9fTUVNX09QVBABGg/iPwwSCk5PX01FTV9PUFQSFwoGTUFOVUFMEAIaC+I/CBIGT
  UFOVUFMEjEKE1NXQVBQSU5HX0hFVVJJU1RJQ1MQBBoY4j8VEhNTV0FQUElOR19IRVVSSVNUSUNTEjsKGFJFQ09NUFVUQVRJT05fS
  EVVUklTVElDUxAFGh3iPxoSGFJFQ09NUFVUQVRJT05fSEVVUklTVElDUxI1ChVTQ0hFRFVMSU5HX0hFVVJJU1RJQ1MQBhoa4j8XE
  hVTQ0hFRFVMSU5HX0hFVVJJU1RJQ1MSHwoKSEVVUklTVElDUxADGg/iPwwSCkhFVVJJU1RJQ1NCjAEKGG9yZy50ZW5zb3JmbG93L
  mZyYW1ld29ya0IUUmV3cml0ZXJDb25maWdQcm90b3NQAVpVZ2l0aHViLmNvbS90ZW5zb3JmbG93L3RlbnNvcmZsb3cvdGVuc29yZ
  mxvdy9nby9jb3JlL3Byb3RvYnVmL2Zvcl9jb3JlX3Byb3Rvc19nb19wcm90b/gBAWIGcHJvdG8z"""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      org.tensorflow.framework.attr_value.AttrValueProto.javaDescriptor,
      org.tensorflow.framework.verifier_config.VerifierConfigProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}