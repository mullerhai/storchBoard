// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package org.tensorflow.framework.config

/** @param enableRecvScheduling
  *   If true, use control flow to schedule the activation of Recv nodes.
  *   (Currently ignored.)
  * @param optimizerOptions
  *   Options controlling how graph is optimized.
  * @param buildCostModel
  *   The number of steps to run before returning a cost model detailing
  *   the memory usage and performance of each node of the graph. 0 means
  *   no cost model.
  * @param buildCostModelAfter
  *   The number of steps to skip before collecting statistics for the
  *   cost model.
  * @param inferShapes
  *   Annotate each Node with Op output shape data, to the extent it can
  *   be statically inferred.
  * @param placePrunedGraph
  *   Only place the subgraphs that are run, rather than the entire graph.
  *  
  *   This is useful for interactive graph building, where one might
  *   produce graphs that cannot be placed during the debugging
  *   process.  In particular, it allows the client to continue work in
  *   a session after adding a node to a graph whose placement
  *   constraints are unsatisfiable.
  * @param enableBfloat16Sendrecv
  *   If true, transfer float values between processes as bfloat16.
  * @param timelineStep
  *   If &gt; 0, record a timeline every this many steps.
  *   EXPERIMENTAL: This currently has no effect in MasterSession.
  * @param rewriteOptions
  *   Options that control the type and amount of graph rewriting.
  *   Not currently configurable via the public Python API (i.e. there is no API
  *   stability guarantee if you import RewriterConfig explicitly).
  */
@SerialVersionUID(0L)
final case class GraphOptions(
    enableRecvScheduling: _root_.scala.Boolean = false,
    optimizerOptions: _root_.scala.Option[org.tensorflow.framework.config.OptimizerOptions] = _root_.scala.None,
    buildCostModel: _root_.scala.Long = 0L,
    buildCostModelAfter: _root_.scala.Long = 0L,
    inferShapes: _root_.scala.Boolean = false,
    placePrunedGraph: _root_.scala.Boolean = false,
    enableBfloat16Sendrecv: _root_.scala.Boolean = false,
    timelineStep: _root_.scala.Int = 0,
    rewriteOptions: _root_.scala.Option[org.tensorflow.framework.rewriter_config.RewriterConfig] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GraphOptions] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = enableRecvScheduling
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(2, __value)
        }
      };
      if (optimizerOptions.isDefined) {
        val __value = optimizerOptions.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = buildCostModel
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, __value)
        }
      };
      
      {
        val __value = buildCostModelAfter
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(9, __value)
        }
      };
      
      {
        val __value = inferShapes
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
        }
      };
      
      {
        val __value = placePrunedGraph
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(6, __value)
        }
      };
      
      {
        val __value = enableBfloat16Sendrecv
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(7, __value)
        }
      };
      
      {
        val __value = timelineStep
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(8, __value)
        }
      };
      if (rewriteOptions.isDefined) {
        val __value = rewriteOptions.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = enableRecvScheduling
        if (__v != false) {
          _output__.writeBool(2, __v)
        }
      };
      optimizerOptions.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = buildCostModel
        if (__v != 0L) {
          _output__.writeInt64(4, __v)
        }
      };
      {
        val __v = inferShapes
        if (__v != false) {
          _output__.writeBool(5, __v)
        }
      };
      {
        val __v = placePrunedGraph
        if (__v != false) {
          _output__.writeBool(6, __v)
        }
      };
      {
        val __v = enableBfloat16Sendrecv
        if (__v != false) {
          _output__.writeBool(7, __v)
        }
      };
      {
        val __v = timelineStep
        if (__v != 0) {
          _output__.writeInt32(8, __v)
        }
      };
      {
        val __v = buildCostModelAfter
        if (__v != 0L) {
          _output__.writeInt64(9, __v)
        }
      };
      rewriteOptions.foreach { __v =>
        val __m = __v
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withEnableRecvScheduling(__v: _root_.scala.Boolean): GraphOptions = copy(enableRecvScheduling = __v)
    def getOptimizerOptions: org.tensorflow.framework.config.OptimizerOptions = optimizerOptions.getOrElse(org.tensorflow.framework.config.OptimizerOptions.defaultInstance)
    def clearOptimizerOptions: GraphOptions = copy(optimizerOptions = _root_.scala.None)
    def withOptimizerOptions(__v: org.tensorflow.framework.config.OptimizerOptions): GraphOptions = copy(optimizerOptions = Option(__v))
    def withBuildCostModel(__v: _root_.scala.Long): GraphOptions = copy(buildCostModel = __v)
    def withBuildCostModelAfter(__v: _root_.scala.Long): GraphOptions = copy(buildCostModelAfter = __v)
    def withInferShapes(__v: _root_.scala.Boolean): GraphOptions = copy(inferShapes = __v)
    def withPlacePrunedGraph(__v: _root_.scala.Boolean): GraphOptions = copy(placePrunedGraph = __v)
    def withEnableBfloat16Sendrecv(__v: _root_.scala.Boolean): GraphOptions = copy(enableBfloat16Sendrecv = __v)
    def withTimelineStep(__v: _root_.scala.Int): GraphOptions = copy(timelineStep = __v)
    def getRewriteOptions: org.tensorflow.framework.rewriter_config.RewriterConfig = rewriteOptions.getOrElse(org.tensorflow.framework.rewriter_config.RewriterConfig.defaultInstance)
    def clearRewriteOptions: GraphOptions = copy(rewriteOptions = _root_.scala.None)
    def withRewriteOptions(__v: org.tensorflow.framework.rewriter_config.RewriterConfig): GraphOptions = copy(rewriteOptions = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => {
          val __t = enableRecvScheduling
          if (__t != false) __t else null
        }
        case 3 => optimizerOptions.orNull
        case 4 => {
          val __t = buildCostModel
          if (__t != 0L) __t else null
        }
        case 9 => {
          val __t = buildCostModelAfter
          if (__t != 0L) __t else null
        }
        case 5 => {
          val __t = inferShapes
          if (__t != false) __t else null
        }
        case 6 => {
          val __t = placePrunedGraph
          if (__t != false) __t else null
        }
        case 7 => {
          val __t = enableBfloat16Sendrecv
          if (__t != false) __t else null
        }
        case 8 => {
          val __t = timelineStep
          if (__t != 0) __t else null
        }
        case 10 => rewriteOptions.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => _root_.scalapb.descriptors.PBoolean(enableRecvScheduling)
        case 3 => optimizerOptions.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PLong(buildCostModel)
        case 9 => _root_.scalapb.descriptors.PLong(buildCostModelAfter)
        case 5 => _root_.scalapb.descriptors.PBoolean(inferShapes)
        case 6 => _root_.scalapb.descriptors.PBoolean(placePrunedGraph)
        case 7 => _root_.scalapb.descriptors.PBoolean(enableBfloat16Sendrecv)
        case 8 => _root_.scalapb.descriptors.PInt(timelineStep)
        case 10 => rewriteOptions.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: org.tensorflow.framework.config.GraphOptions.type = org.tensorflow.framework.config.GraphOptions
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.GraphOptions])
}

object GraphOptions extends scalapb.GeneratedMessageCompanion[org.tensorflow.framework.config.GraphOptions] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.tensorflow.framework.config.GraphOptions] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.tensorflow.framework.config.GraphOptions = {
    var __enableRecvScheduling: _root_.scala.Boolean = false
    var __optimizerOptions: _root_.scala.Option[org.tensorflow.framework.config.OptimizerOptions] = _root_.scala.None
    var __buildCostModel: _root_.scala.Long = 0L
    var __buildCostModelAfter: _root_.scala.Long = 0L
    var __inferShapes: _root_.scala.Boolean = false
    var __placePrunedGraph: _root_.scala.Boolean = false
    var __enableBfloat16Sendrecv: _root_.scala.Boolean = false
    var __timelineStep: _root_.scala.Int = 0
    var __rewriteOptions: _root_.scala.Option[org.tensorflow.framework.rewriter_config.RewriterConfig] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 16 =>
          __enableRecvScheduling = _input__.readBool()
        case 26 =>
          __optimizerOptions = _root_.scala.Option(__optimizerOptions.fold(_root_.scalapb.LiteParser.readMessage[org.tensorflow.framework.config.OptimizerOptions](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 32 =>
          __buildCostModel = _input__.readInt64()
        case 72 =>
          __buildCostModelAfter = _input__.readInt64()
        case 40 =>
          __inferShapes = _input__.readBool()
        case 48 =>
          __placePrunedGraph = _input__.readBool()
        case 56 =>
          __enableBfloat16Sendrecv = _input__.readBool()
        case 64 =>
          __timelineStep = _input__.readInt32()
        case 82 =>
          __rewriteOptions = _root_.scala.Option(__rewriteOptions.fold(_root_.scalapb.LiteParser.readMessage[org.tensorflow.framework.rewriter_config.RewriterConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    org.tensorflow.framework.config.GraphOptions(
        enableRecvScheduling = __enableRecvScheduling,
        optimizerOptions = __optimizerOptions,
        buildCostModel = __buildCostModel,
        buildCostModelAfter = __buildCostModelAfter,
        inferShapes = __inferShapes,
        placePrunedGraph = __placePrunedGraph,
        enableBfloat16Sendrecv = __enableBfloat16Sendrecv,
        timelineStep = __timelineStep,
        rewriteOptions = __rewriteOptions,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.tensorflow.framework.config.GraphOptions] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      org.tensorflow.framework.config.GraphOptions(
        enableRecvScheduling = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        optimizerOptions = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[org.tensorflow.framework.config.OptimizerOptions]]),
        buildCostModel = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        buildCostModelAfter = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        inferShapes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        placePrunedGraph = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        enableBfloat16Sendrecv = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        timelineStep = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        rewriteOptions = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[org.tensorflow.framework.rewriter_config.RewriterConfig]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.framework.config.ConfigProtoCompanion.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.framework.config.ConfigProtoCompanion.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?]= {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?]= null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = org.tensorflow.framework.config.OptimizerOptions
      case 10 => __out = org.tensorflow.framework.rewriter_config.RewriterConfig
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?]= throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.tensorflow.framework.config.GraphOptions(
    enableRecvScheduling = false,
    optimizerOptions = _root_.scala.None,
    buildCostModel = 0L,
    buildCostModelAfter = 0L,
    inferShapes = false,
    placePrunedGraph = false,
    enableBfloat16Sendrecv = false,
    timelineStep = 0,
    rewriteOptions = _root_.scala.None
  )
  implicit class GraphOptionsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.config.GraphOptions]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.tensorflow.framework.config.GraphOptions](_l) {
    def enableRecvScheduling: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.enableRecvScheduling)((c_, f_) => c_.copy(enableRecvScheduling = f_))
    def optimizerOptions: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.config.OptimizerOptions] = field(_.getOptimizerOptions)((c_, f_) => c_.copy(optimizerOptions = _root_.scala.Option(f_)))
    def optionalOptimizerOptions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[org.tensorflow.framework.config.OptimizerOptions]] = field(_.optimizerOptions)((c_, f_) => c_.copy(optimizerOptions = f_))
    def buildCostModel: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.buildCostModel)((c_, f_) => c_.copy(buildCostModel = f_))
    def buildCostModelAfter: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.buildCostModelAfter)((c_, f_) => c_.copy(buildCostModelAfter = f_))
    def inferShapes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.inferShapes)((c_, f_) => c_.copy(inferShapes = f_))
    def placePrunedGraph: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.placePrunedGraph)((c_, f_) => c_.copy(placePrunedGraph = f_))
    def enableBfloat16Sendrecv: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.enableBfloat16Sendrecv)((c_, f_) => c_.copy(enableBfloat16Sendrecv = f_))
    def timelineStep: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.timelineStep)((c_, f_) => c_.copy(timelineStep = f_))
    def rewriteOptions: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.rewriter_config.RewriterConfig] = field(_.getRewriteOptions)((c_, f_) => c_.copy(rewriteOptions = _root_.scala.Option(f_)))
    def optionalRewriteOptions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[org.tensorflow.framework.rewriter_config.RewriterConfig]] = field(_.rewriteOptions)((c_, f_) => c_.copy(rewriteOptions = f_))
  }
  final val ENABLE_RECV_SCHEDULING_FIELD_NUMBER = 2
  final val OPTIMIZER_OPTIONS_FIELD_NUMBER = 3
  final val BUILD_COST_MODEL_FIELD_NUMBER = 4
  final val BUILD_COST_MODEL_AFTER_FIELD_NUMBER = 9
  final val INFER_SHAPES_FIELD_NUMBER = 5
  final val PLACE_PRUNED_GRAPH_FIELD_NUMBER = 6
  final val ENABLE_BFLOAT16_SENDRECV_FIELD_NUMBER = 7
  final val TIMELINE_STEP_FIELD_NUMBER = 8
  final val REWRITE_OPTIONS_FIELD_NUMBER = 10
  def of(
    enableRecvScheduling: _root_.scala.Boolean,
    optimizerOptions: _root_.scala.Option[org.tensorflow.framework.config.OptimizerOptions],
    buildCostModel: _root_.scala.Long,
    buildCostModelAfter: _root_.scala.Long,
    inferShapes: _root_.scala.Boolean,
    placePrunedGraph: _root_.scala.Boolean,
    enableBfloat16Sendrecv: _root_.scala.Boolean,
    timelineStep: _root_.scala.Int,
    rewriteOptions: _root_.scala.Option[org.tensorflow.framework.rewriter_config.RewriterConfig]
  ): _root_.org.tensorflow.framework.config.GraphOptions = _root_.org.tensorflow.framework.config.GraphOptions(
    enableRecvScheduling,
    optimizerOptions,
    buildCostModel,
    buildCostModelAfter,
    inferShapes,
    placePrunedGraph,
    enableBfloat16Sendrecv,
    timelineStep,
    rewriteOptions
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.GraphOptions])
}
