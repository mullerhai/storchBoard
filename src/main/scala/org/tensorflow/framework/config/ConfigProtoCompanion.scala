// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package org.tensorflow.framework.config

object ConfigProtoCompanion extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    tensorboard.coordination_config.CoordinationConfigProto,
    org.tensorflow.framework.cost_graph.CostGraphProto,
    org.tensorflow.framework.graph.GraphProto,
    org.tensorflow.framework.step_stats.StepStatsProto,
    org.tensorflow.distruntime.cluster.ClusterProto,
    org.tensorflow.framework.debug.DebugProto,
    org.tensorflow.framework.rewriter_config.RewriterConfigProto,
    tensorboard.rpc_options.RpcOptionsProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]](
      org.tensorflow.framework.config.GPUOptions,
      org.tensorflow.framework.config.OptimizerOptions,
      org.tensorflow.framework.config.GraphOptions,
      org.tensorflow.framework.config.ThreadPoolOptionProto,
      org.tensorflow.framework.config.SessionMetadata,
      org.tensorflow.framework.config.ConfigProto,
      org.tensorflow.framework.config.RunOptions,
      org.tensorflow.framework.config.RunMetadata,
      org.tensorflow.framework.config.TensorConnection,
      org.tensorflow.framework.config.CallableOptions,
      org.tensorflow.framework.config.BatchingOptions
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """CiV0ZW5zb3Jib2FyZC9jb21wYXQvcHJvdG8vY29uZmlnLnByb3RvEgt0ZW5zb3Jib2FyZBoydGVuc29yYm9hcmQvY29tcGF0L
  3Byb3RvL2Nvb3JkaW5hdGlvbl9jb25maWcucHJvdG8aKXRlbnNvcmJvYXJkL2NvbXBhdC9wcm90by9jb3N0X2dyYXBoLnByb3RvG
  iR0ZW5zb3Jib2FyZC9jb21wYXQvcHJvdG8vZ3JhcGgucHJvdG8aKXRlbnNvcmJvYXJkL2NvbXBhdC9wcm90by9zdGVwX3N0YXRzL
  nByb3RvGiZ0ZW5zb3Jib2FyZC9jb21wYXQvcHJvdG8vY2x1c3Rlci5wcm90bxokdGVuc29yYm9hcmQvY29tcGF0L3Byb3RvL2RlY
  nVnLnByb3RvGi50ZW5zb3Jib2FyZC9jb21wYXQvcHJvdG8vcmV3cml0ZXJfY29uZmlnLnByb3RvGip0ZW5zb3Jib2FyZC9jb21wY
  XQvcHJvdG8vcnBjX29wdGlvbnMucHJvdG8i1xYKCkdQVU9wdGlvbnMSZgofcGVyX3Byb2Nlc3NfZ3B1X21lbW9yeV9mcmFjdGlvb
  hgBIAEoAUIg4j8dEhtwZXJQcm9jZXNzR3B1TWVtb3J5RnJhY3Rpb25SG3BlclByb2Nlc3NHcHVNZW1vcnlGcmFjdGlvbhIzCgxhb
  Gxvd19ncm93dGgYBCABKAhCEOI/DRILYWxsb3dHcm93dGhSC2FsbG93R3Jvd3RoEjkKDmFsbG9jYXRvcl90eXBlGAIgASgJQhLiP
  w8SDWFsbG9jYXRvclR5cGVSDWFsbG9jYXRvclR5cGUSUgoXZGVmZXJyZWRfZGVsZXRpb25fYnl0ZXMYAyABKANCGuI/FxIVZGVmZ
  XJyZWREZWxldGlvbkJ5dGVzUhVkZWZlcnJlZERlbGV0aW9uQnl0ZXMSRgoTdmlzaWJsZV9kZXZpY2VfbGlzdBgFIAEoCUIW4j8TE
  hF2aXNpYmxlRGV2aWNlTGlzdFIRdmlzaWJsZURldmljZUxpc3QSWQoacG9sbGluZ19hY3RpdmVfZGVsYXlfdXNlY3MYBiABKAVCH
  OI/GRIXcG9sbGluZ0FjdGl2ZURlbGF5VXNlY3NSF3BvbGxpbmdBY3RpdmVEZWxheVVzZWNzEl8KHHBvbGxpbmdfaW5hY3RpdmVfZ
  GVsYXlfbXNlY3MYByABKAVCHuI/GxIZcG9sbGluZ0luYWN0aXZlRGVsYXlNc2Vjc1IZcG9sbGluZ0luYWN0aXZlRGVsYXlNc2Vjc
  xJJChRmb3JjZV9ncHVfY29tcGF0aWJsZRgIIAEoCEIX4j8UEhJmb3JjZUdwdUNvbXBhdGlibGVSEmZvcmNlR3B1Q29tcGF0aWJsZ
  RJbCgxleHBlcmltZW50YWwYCSABKAsyJC50ZW5zb3Jib2FyZC5HUFVPcHRpb25zLkV4cGVyaW1lbnRhbEIR4j8OEgxleHBlcmltZ
  W50YWxSDGV4cGVyaW1lbnRhbBrwEAoMRXhwZXJpbWVudGFsEnEKD3ZpcnR1YWxfZGV2aWNlcxgBIAMoCzIzLnRlbnNvcmJvYXJkL
  kdQVU9wdGlvbnMuRXhwZXJpbWVudGFsLlZpcnR1YWxEZXZpY2VzQhPiPxASDnZpcnR1YWxEZXZpY2VzUg52aXJ0dWFsRGV2aWNlc
  xJaChtudW1fdmlydHVhbF9kZXZpY2VzX3Blcl9ncHUYDyABKAVCHOI/GRIXbnVtVmlydHVhbERldmljZXNQZXJHcHVSF251bVZpc
  nR1YWxEZXZpY2VzUGVyR3B1EkMKEnVzZV91bmlmaWVkX21lbW9yeRgCIAEoCEIV4j8SEhB1c2VVbmlmaWVkTWVtb3J5UhB1c2VVb
  mlmaWVkTWVtb3J5ElgKG251bV9kZXZfdG9fZGV2X2NvcHlfc3RyZWFtcxgDIAEoBUIb4j8YEhZudW1EZXZUb0RldkNvcHlTdHJlY
  W1zUhZudW1EZXZUb0RldkNvcHlTdHJlYW1zEkwKFWNvbGxlY3RpdmVfcmluZ19vcmRlchgEIAEoCUIY4j8VEhNjb2xsZWN0aXZlU
  mluZ09yZGVyUhNjb2xsZWN0aXZlUmluZ09yZGVyEk4KFXRpbWVzdGFtcGVkX2FsbG9jYXRvchgFIAEoCEIZ4j8WEhR0aW1lc3Rhb
  XBlZEFsbG9jYXRvclIUdGltZXN0YW1wZWRBbGxvY2F0b3ISXAoba2VybmVsX3RyYWNrZXJfbWF4X2ludGVydmFsGAcgASgFQh3iP
  xoSGGtlcm5lbFRyYWNrZXJNYXhJbnRlcnZhbFIYa2VybmVsVHJhY2tlck1heEludGVydmFsElMKGGtlcm5lbF90cmFja2VyX21he
  F9ieXRlcxgIIAEoBUIa4j8XEhVrZXJuZWxUcmFja2VyTWF4Qnl0ZXNSFWtlcm5lbFRyYWNrZXJNYXhCeXRlcxJZChprZXJuZWxfd
  HJhY2tlcl9tYXhfcGVuZGluZxgJIAEoBUIc4j8ZEhdrZXJuZWxUcmFja2VyTWF4UGVuZGluZ1IXa2VybmVsVHJhY2tlck1heFBlb
  mRpbmcSagofaW50ZXJuYWxfZnJhZ21lbnRhdGlvbl9mcmFjdGlvbhgKIAEoAUIi4j8fEh1pbnRlcm5hbEZyYWdtZW50YXRpb25Gc
  mFjdGlvblIdaW50ZXJuYWxGcmFnbWVudGF0aW9uRnJhY3Rpb24SSgoVdXNlX2N1ZGFfbWFsbG9jX2FzeW5jGAsgASgIQhfiPxQSE
  nVzZUN1ZGFNYWxsb2NBc3luY1ISdXNlQ3VkYU1hbGxvY0FzeW5jEnUKJGRpc2FsbG93X3JldHJ5X29uX2FsbG9jYXRpb25fZmFpb
  HVyZRgMIAEoCEIl4j8iEiBkaXNhbGxvd1JldHJ5T25BbGxvY2F0aW9uRmFpbHVyZVIgZGlzYWxsb3dSZXRyeU9uQWxsb2NhdGlvb
  kZhaWx1cmUSTwoYZ3B1X2hvc3RfbWVtX2xpbWl0X2luX21iGA0gASgCQhjiPxUSE2dwdUhvc3RNZW1MaW1pdEluTWJSE2dwdUhvc
  3RNZW1MaW1pdEluTWISXQocZ3B1X2hvc3RfbWVtX2Rpc2FsbG93X2dyb3d0aBgOIAEoCEId4j8aEhhncHVIb3N0TWVtRGlzYWxsb
  3dHcm93dGhSGGdwdUhvc3RNZW1EaXNhbGxvd0dyb3d0aBJbChxncHVfc3lzdGVtX21lbW9yeV9zaXplX2luX21iGBAgASgFQhziP
  xkSF2dwdVN5c3RlbU1lbW9yeVNpemVJbk1iUhdncHVTeXN0ZW1NZW1vcnlTaXplSW5NYhJ5CiZwb3B1bGF0ZV9wanJ0X2dwdV9jb
  GllbnRfY3JlYXRpb25faW5mbxgRIAEoCEIm4j8jEiFwb3B1bGF0ZVBqcnRHcHVDbGllbnRDcmVhdGlvbkluZm9SIXBvcHVsYXRlU
  GpydEdwdUNsaWVudENyZWF0aW9uSW5mbxIkCgdub2RlX2lkGBIgASgFQgviPwgSBm5vZGVJZFIGbm9kZUlkEoIBChRzdHJlYW1fb
  WVyZ2Vfb3B0aW9ucxgTIAEoCzI3LnRlbnNvcmJvYXJkLkdQVU9wdGlvbnMuRXhwZXJpbWVudGFsLlN0cmVhbU1lcmdlT3B0aW9uc
  0IX4j8UEhJzdHJlYW1NZXJnZU9wdGlvbnNSEnN0cmVhbU1lcmdlT3B0aW9ucxqyAQoOVmlydHVhbERldmljZXMSOgoPbWVtb3J5X
  2xpbWl0X21iGAEgAygCQhLiPw8SDW1lbW9yeUxpbWl0TWJSDW1lbW9yeUxpbWl0TWISKQoIcHJpb3JpdHkYAiADKAVCDeI/ChIIc
  HJpb3JpdHlSCHByaW9yaXR5EjkKDmRldmljZV9vcmRpbmFsGAMgAygFQhLiPw8SDWRldmljZU9yZGluYWxSDWRldmljZU9yZGluY
  WwargIKElN0cmVhbU1lcmdlT3B0aW9ucxJaChttZXJnZV9ob3N0X3RvX2RldmljZV9zdHJlYW0YASABKAhCHOI/GRIXbWVyZ2VIb
  3N0VG9EZXZpY2VTdHJlYW1SF21lcmdlSG9zdFRvRGV2aWNlU3RyZWFtEloKG21lcmdlX2RldmljZV90b19ob3N0X3N0cmVhbRgCI
  AEoCEIc4j8ZEhdtZXJnZURldmljZVRvSG9zdFN0cmVhbVIXbWVyZ2VEZXZpY2VUb0hvc3RTdHJlYW0SYAodbWVyZ2VfZGV2aWNlX
  3RvX2RldmljZV9zdHJlYW0YAyABKAhCHuI/GxIZbWVyZ2VEZXZpY2VUb0RldmljZVN0cmVhbVIZbWVyZ2VEZXZpY2VUb0RldmljZ
  VN0cmVhbSKYBgoQT3B0aW1pemVyT3B0aW9ucxJ0CiNkb19jb21tb25fc3ViZXhwcmVzc2lvbl9lbGltaW5hdGlvbhgBIAEoCEIl4
  j8iEiBkb0NvbW1vblN1YmV4cHJlc3Npb25FbGltaW5hdGlvblIgZG9Db21tb25TdWJleHByZXNzaW9uRWxpbWluYXRpb24SRgoTZ
  G9fY29uc3RhbnRfZm9sZGluZxgCIAEoCEIW4j8TEhFkb0NvbnN0YW50Rm9sZGluZ1IRZG9Db25zdGFudEZvbGRpbmcSXQocbWF4X
  2ZvbGRlZF9jb25zdGFudF9pbl9ieXRlcxgGIAEoA0Id4j8aEhhtYXhGb2xkZWRDb25zdGFudEluQnl0ZXNSGG1heEZvbGRlZENvb
  nN0YW50SW5CeXRlcxJJChRkb19mdW5jdGlvbl9pbmxpbmluZxgEIAEoCEIX4j8UEhJkb0Z1bmN0aW9uSW5saW5pbmdSEmRvRnVuY
  3Rpb25JbmxpbmluZxJPCglvcHRfbGV2ZWwYAyABKA4yIy50ZW5zb3Jib2FyZC5PcHRpbWl6ZXJPcHRpb25zLkxldmVsQg3iPwoSC
  G9wdExldmVsUghvcHRMZXZlbBJrChBnbG9iYWxfaml0X2xldmVsGAUgASgOMiwudGVuc29yYm9hcmQuT3B0aW1pemVyT3B0aW9uc
  y5HbG9iYWxKaXRMZXZlbEIT4j8QEg5nbG9iYWxKaXRMZXZlbFIOZ2xvYmFsSml0TGV2ZWwSNwoOY3B1X2dsb2JhbF9qaXQYByABK
  AhCEeI/DhIMY3B1R2xvYmFsSml0UgxjcHVHbG9iYWxKaXQiMgoFTGV2ZWwSDwoCTDEQABoH4j8EEgJMMRIYCgJMMBD//////////
  /8BGgfiPwQSAkwwInEKDkdsb2JhbEppdExldmVsEhkKB0RFRkFVTFQQABoM4j8JEgdERUZBVUxUEhoKA09GRhD///////////8BG
  gjiPwUSA09GRhITCgRPTl8xEAEaCeI/BhIET05fMRITCgRPTl8yEAIaCeI/BhIET05fMiLhBQoMR3JhcGhPcHRpb25zEk8KFmVuY
  WJsZV9yZWN2X3NjaGVkdWxpbmcYAiABKAhCGeI/FhIUZW5hYmxlUmVjdlNjaGVkdWxpbmdSFGVuYWJsZVJlY3ZTY2hlZHVsaW5nE
  mEKEW9wdGltaXplcl9vcHRpb25zGAMgASgLMh0udGVuc29yYm9hcmQuT3B0aW1pemVyT3B0aW9uc0IV4j8SEhBvcHRpbWl6ZXJPc
  HRpb25zUhBvcHRpbWl6ZXJPcHRpb25zEj0KEGJ1aWxkX2Nvc3RfbW9kZWwYBCABKANCE+I/EBIOYnVpbGRDb3N0TW9kZWxSDmJ1a
  WxkQ29zdE1vZGVsEk0KFmJ1aWxkX2Nvc3RfbW9kZWxfYWZ0ZXIYCSABKANCGOI/FRITYnVpbGRDb3N0TW9kZWxBZnRlclITYnVpb
  GRDb3N0TW9kZWxBZnRlchIzCgxpbmZlcl9zaGFwZXMYBSABKAhCEOI/DRILaW5mZXJTaGFwZXNSC2luZmVyU2hhcGVzEkMKEnBsY
  WNlX3BydW5lZF9ncmFwaBgGIAEoCEIV4j8SEhBwbGFjZVBydW5lZEdyYXBoUhBwbGFjZVBydW5lZEdyYXBoElUKGGVuYWJsZV9iZ
  mxvYXQxNl9zZW5kcmVjdhgHIAEoCEIb4j8YEhZlbmFibGVCZmxvYXQxNlNlbmRyZWN2UhZlbmFibGVCZmxvYXQxNlNlbmRyZWN2E
  jYKDXRpbWVsaW5lX3N0ZXAYCCABKAVCEeI/DhIMdGltZWxpbmVTdGVwUgx0aW1lbGluZVN0ZXASWQoPcmV3cml0ZV9vcHRpb25zG
  AogASgLMhsudGVuc29yYm9hcmQuUmV3cml0ZXJDb25maWdCE+I/EBIOcmV3cml0ZU9wdGlvbnNSDnJld3JpdGVPcHRpb25zSgQIA
  RACUiVza2lwX2NvbW1vbl9zdWJleHByZXNzaW9uX2VsaW1pbmF0aW9uInsKFVRocmVhZFBvb2xPcHRpb25Qcm90bxIwCgtudW1fd
  GhyZWFkcxgBIAEoBUIP4j8MEgpudW1UaHJlYWRzUgpudW1UaHJlYWRzEjAKC2dsb2JhbF9uYW1lGAIgASgJQg/iPwwSCmdsb2Jhb
  E5hbWVSCmdsb2JhbE5hbWUiWAoPU2Vzc2lvbk1ldGFkYXRhEh0KBG5hbWUYASABKAlCCeI/BhIEbmFtZVIEbmFtZRImCgd2ZXJza
  W9uGAIgASgDQgziPwkSB3ZlcnNpb25SB3ZlcnNpb24ioCMKC0NvbmZpZ1Byb3RvEl4KDGRldmljZV9jb3VudBgBIAMoCzIpLnRlb
  nNvcmJvYXJkLkNvbmZpZ1Byb3RvLkRldmljZUNvdW50RW50cnlCEOI/DRILZGV2aWNlQ291bnRSC2RldmljZUNvdW50El8KHGlud
  HJhX29wX3BhcmFsbGVsaXNtX3RocmVhZHMYAiABKAVCHuI/GxIZaW50cmFPcFBhcmFsbGVsaXNtVGhyZWFkc1IZaW50cmFPcFBhc
  mFsbGVsaXNtVGhyZWFkcxJfChxpbnRlcl9vcF9wYXJhbGxlbGlzbV90aHJlYWRzGAUgASgFQh7iPxsSGWludGVyT3BQYXJhbGxlb
  GlzbVRocmVhZHNSGWludGVyT3BQYXJhbGxlbGlzbVRocmVhZHMSUAoXdXNlX3Blcl9zZXNzaW9uX3RocmVhZHMYCSABKAhCGeI/F
  hIUdXNlUGVyU2Vzc2lvblRocmVhZHNSFHVzZVBlclNlc3Npb25UaHJlYWRzEoEBChxzZXNzaW9uX2ludGVyX29wX3RocmVhZF9wb
  29sGAwgAygLMiIudGVuc29yYm9hcmQuVGhyZWFkUG9vbE9wdGlvblByb3RvQh3iPxoSGHNlc3Npb25JbnRlck9wVGhyZWFkUG9vb
  FIYc2Vzc2lvbkludGVyT3BUaHJlYWRQb29sEj8KEHBsYWNlbWVudF9wZXJpb2QYAyABKAVCFOI/ERIPcGxhY2VtZW50UGVyaW9kU
  g9wbGFjZW1lbnRQZXJpb2QSOQoOZGV2aWNlX2ZpbHRlcnMYBCADKAlCEuI/DxINZGV2aWNlRmlsdGVyc1INZGV2aWNlRmlsdGVyc
  xJJCgtncHVfb3B0aW9ucxgGIAEoCzIXLnRlbnNvcmJvYXJkLkdQVU9wdGlvbnNCD+I/DBIKZ3B1T3B0aW9uc1IKZ3B1T3B0aW9uc
  xJuChhwbHVnZ2FibGVfZGV2aWNlX29wdGlvbnMYEiABKAsyFy50ZW5zb3Jib2FyZC5HUFVPcHRpb25zQhviPxgSFnBsdWdnYWJsZ
  URldmljZU9wdGlvbnNSFnBsdWdnYWJsZURldmljZU9wdGlvbnMSSQoUYWxsb3dfc29mdF9wbGFjZW1lbnQYByABKAhCF+I/FBISY
  Wxsb3dTb2Z0UGxhY2VtZW50UhJhbGxvd1NvZnRQbGFjZW1lbnQSSQoUbG9nX2RldmljZV9wbGFjZW1lbnQYCCABKAhCF+I/FBISb
  G9nRGV2aWNlUGxhY2VtZW50UhJsb2dEZXZpY2VQbGFjZW1lbnQSUQoNZ3JhcGhfb3B0aW9ucxgKIAEoCzIZLnRlbnNvcmJvYXJkL
  kdyYXBoT3B0aW9uc0IR4j8OEgxncmFwaE9wdGlvbnNSDGdyYXBoT3B0aW9ucxJQChdvcGVyYXRpb25fdGltZW91dF9pbl9tcxgLI
  AEoA0IZ4j8WEhRvcGVyYXRpb25UaW1lb3V0SW5Nc1IUb3BlcmF0aW9uVGltZW91dEluTXMSSQoLcnBjX29wdGlvbnMYDSABKAsyF
  y50ZW5zb3Jib2FyZC5SUENPcHRpb25zQg/iPwwSCnJwY09wdGlvbnNSCnJwY09wdGlvbnMSSQoLY2x1c3Rlcl9kZWYYDiABKAsyF
  y50ZW5zb3Jib2FyZC5DbHVzdGVyRGVmQg/iPwwSCmNsdXN0ZXJEZWZSCmNsdXN0ZXJEZWYSTAoVaXNvbGF0ZV9zZXNzaW9uX3N0Y
  XRlGA8gASgIQhjiPxUSE2lzb2xhdGVTZXNzaW9uU3RhdGVSE2lzb2xhdGVTZXNzaW9uU3RhdGUSaQogc2hhcmVfY2x1c3Rlcl9kZ
  XZpY2VzX2luX3Nlc3Npb24YESABKAhCIeI/HhIcc2hhcmVDbHVzdGVyRGV2aWNlc0luU2Vzc2lvblIcc2hhcmVDbHVzdGVyRGV2a
  WNlc0luU2Vzc2lvbhJcCgxleHBlcmltZW50YWwYECABKAsyJS50ZW5zb3Jib2FyZC5Db25maWdQcm90by5FeHBlcmltZW50YWxCE
  eI/DhIMZXhwZXJpbWVudGFsUgxleHBlcmltZW50YWwaVAoQRGV2aWNlQ291bnRFbnRyeRIaCgNrZXkYASABKAlCCOI/BRIDa2V5U
  gNrZXkSIAoFdmFsdWUYAiABKAVCCuI/BxIFdmFsdWVSBXZhbHVlOgI4ARqjFgoMRXhwZXJpbWVudGFsElIKF2NvbGxlY3RpdmVfZ
  3JvdXBfbGVhZGVyGAEgASgJQhriPxcSFWNvbGxlY3RpdmVHcm91cExlYWRlclIVY29sbGVjdGl2ZUdyb3VwTGVhZGVyEjYKDWV4Z
  WN1dG9yX3R5cGUYAyABKAlCEeI/DhIMZXhlY3V0b3JUeXBlUgxleGVjdXRvclR5cGUSQQoScmVjdl9idWZfbWF4X2NodW5rGAQgA
  SgFQhTiPxESD3JlY3ZCdWZNYXhDaHVua1IPcmVjdkJ1Zk1heENodW5rEkAKEXVzZV9udW1hX2FmZmluaXR5GAUgASgIQhTiPxESD
  3VzZU51bWFBZmZpbml0eVIPdXNlTnVtYUFmZmluaXR5EpIBCi1jb2xsZWN0aXZlX2RldGVybWluaXN0aWNfc2VxdWVudGlhbF9le
  GVjdXRpb24YBiABKAhCL+I/LBIqY29sbGVjdGl2ZURldGVybWluaXN0aWNTZXF1ZW50aWFsRXhlY3V0aW9uUipjb2xsZWN0aXZlR
  GV0ZXJtaW5pc3RpY1NlcXVlbnRpYWxFeGVjdXRpb24SPAoPY29sbGVjdGl2ZV9uY2NsGAcgASgIQhPiPxASDmNvbGxlY3RpdmVOY
  2NsUg5jb2xsZWN0aXZlTmNjbBKRAQouc2hhcmVfc2Vzc2lvbl9zdGF0ZV9pbl9jbHVzdGVyc3BlY19wcm9wYWdhdGlvbhgIIAEoC
  EIu4j8rEilzaGFyZVNlc3Npb25TdGF0ZUluQ2x1c3RlcnNwZWNQcm9wYWdhdGlvblIpc2hhcmVTZXNzaW9uU3RhdGVJbkNsdXN0Z
  XJzcGVjUHJvcGFnYXRpb24SUgoXZGlzYWJsZV90aHJlYWRfc3Bpbm5pbmcYCSABKAhCGuI/FxIVZGlzYWJsZVRocmVhZFNwaW5ua
  W5nUhVkaXNhYmxlVGhyZWFkU3Bpbm5pbmcSaQogc2hhcmVfY2x1c3Rlcl9kZXZpY2VzX2luX3Nlc3Npb24YCiABKAhCIeI/HhIcc
  2hhcmVDbHVzdGVyRGV2aWNlc0luU2Vzc2lvblIcc2hhcmVDbHVzdGVyRGV2aWNlc0luU2Vzc2lvbhJdChBzZXNzaW9uX21ldGFkY
  XRhGAsgASgLMhwudGVuc29yYm9hcmQuU2Vzc2lvbk1ldGFkYXRhQhTiPxESD3Nlc3Npb25NZXRhZGF0YVIPc2Vzc2lvbk1ldGFkY
  XRhElYKGW9wdGltaXplX2Zvcl9zdGF0aWNfZ3JhcGgYDCABKAhCG+I/GBIWb3B0aW1pemVGb3JTdGF0aWNHcmFwaFIWb3B0aW1pe
  mVGb3JTdGF0aWNHcmFwaBJDChJlbmFibGVfbWxpcl9icmlkZ2UYDSABKAhCFeI/EhIQZW5hYmxlTWxpckJyaWRnZVIQZW5hYmxlT
  WxpckJyaWRnZRJ/ChNtbGlyX2JyaWRnZV9yb2xsb3V0GBEgASgOMjcudGVuc29yYm9hcmQuQ29uZmlnUHJvdG8uRXhwZXJpbWVud
  GFsLk1saXJCcmlkZ2VSb2xsb3V0QhbiPxMSEW1saXJCcmlkZ2VSb2xsb3V0UhFtbGlyQnJpZGdlUm9sbG91dBJlCh5lbmFibGVfb
  Wxpcl9ncmFwaF9vcHRpbWl6YXRpb24YECABKAhCIOI/HRIbZW5hYmxlTWxpckdyYXBoT3B0aW1pemF0aW9uUhtlbmFibGVNbGlyR
  3JhcGhPcHRpbWl6YXRpb24SaAofZGlzYWJsZV9vdXRwdXRfcGFydGl0aW9uX2dyYXBocxgOIAEoCEIh4j8eEhxkaXNhYmxlT3V0c
  HV0UGFydGl0aW9uR3JhcGhzUhxkaXNhYmxlT3V0cHV0UGFydGl0aW9uR3JhcGhzElwKG3hsYV9mdXNpb25fYXV0b3R1bmVyX3Roc
  mVzaBgPIAEoA0Id4j8aEhh4bGFGdXNpb25BdXRvdHVuZXJUaHJlc2hSGHhsYUZ1c2lvbkF1dG90dW5lclRocmVzaBInCgh1c2Vfd
  GZydBgSIAEoCEIM4j8JEgd1c2VUZnJ0Ugd1c2VUZnJ0EkAKEWVuYWJsZV9tdWx0aV9ob3N0GBsgASgIQhTiPxESD2VuYWJsZU11b
  HRpSG9zdFIPZW5hYmxlTXVsdGlIb3N0EjQKDXRmcnRfdXNlX2lmcnQYICABKAhCEOI/DRILdGZydFVzZUlmcnRSC3RmcnRVc2VJZ
  nJ0EkYKE2JhY2tlbmRfc2VydmVyX3BvcnQYHCABKAVCFuI/ExIRYmFja2VuZFNlcnZlclBvcnRSEWJhY2tlbmRTZXJ2ZXJQb3J0E
  i0KCnRhcmdldF90cHUYHSABKAhCDuI/CxIJdGFyZ2V0VHB1Ugl0YXJnZXRUcHUSLQoKdGFyZ2V0X2dwdRgeIAEoCEIO4j8LEgl0Y
  XJnZXRHcHVSCXRhcmdldEdwdRJPChZzdHJlYW1fbWVyZ2VfdGhyZXNob2xkGB8gASgFQhniPxYSFHN0cmVhbU1lcmdlVGhyZXNob
  2xkUhRzdHJlYW1NZXJnZVRocmVzaG9sZBJoCh9kaXNhYmxlX2Z1bmN0aW9uYWxfb3BzX2xvd2VyaW5nGBUgASgIQiHiPx4SHGRpc
  2FibGVGdW5jdGlvbmFsT3BzTG93ZXJpbmdSHGRpc2FibGVGdW5jdGlvbmFsT3BzTG93ZXJpbmcSZgofeGxhX3ByZWZlcl9zaW5nb
  GVfZ3JhcGhfY2x1c3RlchgWIAEoCEIg4j8dEht4bGFQcmVmZXJTaW5nbGVHcmFwaENsdXN0ZXJSG3hsYVByZWZlclNpbmdsZUdyY
  XBoQ2x1c3RlchJwChNjb29yZGluYXRpb25fY29uZmlnGBcgASgLMiYudGVuc29yYm9hcmQuQ29vcmRpbmF0aW9uU2VydmljZUNvb
  mZpZ0IX4j8UEhJjb29yZGluYXRpb25Db25maWdSEmNvb3JkaW5hdGlvbkNvbmZpZxJsCiFkaXNhYmxlX29wdGltaXplX2Zvcl9zd
  GF0aWNfZ3JhcGgYGCABKAhCIuI/HxIdZGlzYWJsZU9wdGltaXplRm9yU3RhdGljR3JhcGhSHWRpc2FibGVPcHRpbWl6ZUZvclN0Y
  XRpY0dyYXBoEoEBCihkaXNhYmxlX2VhZ2VyX2V4ZWN1dG9yX3N0cmVhbWluZ19lbnF1ZXVlGBogASgIQiniPyYSJGRpc2FibGVFY
  WdlckV4ZWN1dG9yU3RyZWFtaW5nRW5xdWV1ZVIkZGlzYWJsZUVhZ2VyRXhlY3V0b3JTdHJlYW1pbmdFbnF1ZXVlIskCChFNbGlyQ
  nJpZGdlUm9sbG91dBJJCh9NTElSX0JSSURHRV9ST0xMT1VUX1VOU1BFQ0lGSUVEEAAaJOI/IRIfTUxJUl9CUklER0VfUk9MTE9VV
  F9VTlNQRUNJRklFRBJBChtNTElSX0JSSURHRV9ST0xMT1VUX0VOQUJMRUQQARog4j8dEhtNTElSX0JSSURHRV9ST0xMT1VUX0VOQ
  UJMRUQSQwocTUxJUl9CUklER0VfUk9MTE9VVF9ESVNBQkxFRBACGiHiPx4SHE1MSVJfQlJJREdFX1JPTExPVVRfRElTQUJMRUQiB
  AgDEAMiBAgEEAQqJU1MSVJfQlJJREdFX1JPTExPVVRfU0FGRV9NT0RFX0VOQUJMRUQqLk1MSVJfQlJJREdFX1JPTExPVVRfU0FGR
  V9NT0RFX0ZBTExCQUNLX0VOQUJMRURKBAgCEANKBAgTEBRKBAgUEBVKBAgZEBoi9ggKClJ1bk9wdGlvbnMSVAoLdHJhY2VfbGV2Z
  WwYASABKA4yIi50ZW5zb3Jib2FyZC5SdW5PcHRpb25zLlRyYWNlTGV2ZWxCD+I/DBIKdHJhY2VMZXZlbFIKdHJhY2VMZXZlbBI0C
  g10aW1lb3V0X2luX21zGAIgASgDQhDiPw0SC3RpbWVvdXRJbk1zUgt0aW1lb3V0SW5NcxJHChRpbnRlcl9vcF90aHJlYWRfcG9vb
  BgDIAEoBUIW4j8TEhFpbnRlck9wVGhyZWFkUG9vbFIRaW50ZXJPcFRocmVhZFBvb2wSUgoXb3V0cHV0X3BhcnRpdGlvbl9ncmFwa
  HMYBSABKAhCGuI/FxIVb3V0cHV0UGFydGl0aW9uR3JhcGhzUhVvdXRwdXRQYXJ0aXRpb25HcmFwaHMSUQoNZGVidWdfb3B0aW9uc
  xgGIAEoCzIZLnRlbnNvcmJvYXJkLkRlYnVnT3B0aW9uc0IR4j8OEgxkZWJ1Z09wdGlvbnNSDGRlYnVnT3B0aW9ucxJvCiJyZXBvc
  nRfdGVuc29yX2FsbG9jYXRpb25zX3Vwb25fb29tGAcgASgIQiPiPyASHnJlcG9ydFRlbnNvckFsbG9jYXRpb25zVXBvbk9vbVIec
  mVwb3J0VGVuc29yQWxsb2NhdGlvbnNVcG9uT29tElsKDGV4cGVyaW1lbnRhbBgIIAEoCzIkLnRlbnNvcmJvYXJkLlJ1bk9wdGlvb
  nMuRXhwZXJpbWVudGFsQhHiPw4SDGV4cGVyaW1lbnRhbFIMZXhwZXJpbWVudGFsGvgCCgxFeHBlcmltZW50YWwSSQoUY29sbGVjd
  Gl2ZV9ncmFwaF9rZXkYASABKANCF+I/FBISY29sbGVjdGl2ZUdyYXBoS2V5UhJjb2xsZWN0aXZlR3JhcGhLZXkSRwoUdXNlX3J1b
  l9oYW5kbGVyX3Bvb2wYAiABKAhCFuI/ExIRdXNlUnVuSGFuZGxlclBvb2xSEXVzZVJ1bkhhbmRsZXJQb29sEo8BChhydW5faGFuZ
  Gxlcl9wb29sX29wdGlvbnMYAyABKAsyOi50ZW5zb3Jib2FyZC5SdW5PcHRpb25zLkV4cGVyaW1lbnRhbC5SdW5IYW5kbGVyUG9vb
  E9wdGlvbnNCGuI/FxIVcnVuSGFuZGxlclBvb2xPcHRpb25zUhVydW5IYW5kbGVyUG9vbE9wdGlvbnMaQgoVUnVuSGFuZGxlclBvb
  2xPcHRpb25zEikKCHByaW9yaXR5GAEgASgDQg3iPwoSCHByaW9yaXR5Ughwcmlvcml0eSKcAQoKVHJhY2VMZXZlbBIbCghOT19UU
  kFDRRAAGg3iPwoSCE5PX1RSQUNFEicKDlNPRlRXQVJFX1RSQUNFEAEaE+I/EBIOU09GVFdBUkVfVFJBQ0USJwoOSEFSRFdBUkVfV
  FJBQ0UQAhoT4j8QEg5IQVJEV0FSRV9UUkFDRRIfCgpGVUxMX1RSQUNFEAMaD+I/DBIKRlVMTF9UUkFDRUoECAQQBSL6BQoLUnVuT
  WV0YWRhdGESRQoKc3RlcF9zdGF0cxgBIAEoCzIWLnRlbnNvcmJvYXJkLlN0ZXBTdGF0c0IO4j8LEglzdGVwU3RhdHNSCXN0ZXBTd
  GF0cxJICgpjb3N0X2dyYXBoGAIgASgLMhkudGVuc29yYm9hcmQuQ29zdEdyYXBoRGVmQg7iPwsSCWNvc3RHcmFwaFIJY29zdEdyY
  XBoElYKEHBhcnRpdGlvbl9ncmFwaHMYAyADKAsyFS50ZW5zb3Jib2FyZC5HcmFwaERlZkIU4j8REg9wYXJ0aXRpb25HcmFwaHNSD
  3BhcnRpdGlvbkdyYXBocxJlCg9mdW5jdGlvbl9ncmFwaHMYBCADKAsyJy50ZW5zb3Jib2FyZC5SdW5NZXRhZGF0YS5GdW5jdGlvb
  kdyYXBoc0IT4j8QEg5mdW5jdGlvbkdyYXBoc1IOZnVuY3Rpb25HcmFwaHMSXQoQc2Vzc2lvbl9tZXRhZGF0YRgFIAEoCzIcLnRlb
  nNvcmJvYXJkLlNlc3Npb25NZXRhZGF0YUIU4j8REg9zZXNzaW9uTWV0YWRhdGFSD3Nlc3Npb25NZXRhZGF0YRq7AgoORnVuY3Rpb
  25HcmFwaHMSVgoQcGFydGl0aW9uX2dyYXBocxgBIAMoCzIVLnRlbnNvcmJvYXJkLkdyYXBoRGVmQhTiPxESD3BhcnRpdGlvbkdyY
  XBoc1IPcGFydGl0aW9uR3JhcGhzEmYKFnByZV9vcHRpbWl6YXRpb25fZ3JhcGgYAiABKAsyFS50ZW5zb3Jib2FyZC5HcmFwaERlZ
  kIZ4j8WEhRwcmVPcHRpbWl6YXRpb25HcmFwaFIUcHJlT3B0aW1pemF0aW9uR3JhcGgSaQoXcG9zdF9vcHRpbWl6YXRpb25fZ3Jhc
  GgYAyABKAsyFS50ZW5zb3Jib2FyZC5HcmFwaERlZkIa4j8XEhVwb3N0T3B0aW1pemF0aW9uR3JhcGhSFXBvc3RPcHRpbWl6YXRpb
  25HcmFwaCJwChBUZW5zb3JDb25uZWN0aW9uEjAKC2Zyb21fdGVuc29yGAEgASgJQg/iPwwSCmZyb21UZW5zb3JSCmZyb21UZW5zb
  3ISKgoJdG9fdGVuc29yGAIgASgJQg3iPwoSCHRvVGVuc29yUgh0b1RlbnNvciLaBQoPQ2FsbGFibGVPcHRpb25zEh0KBGZlZWQYA
  SADKAlCCeI/BhIEZmVlZFIEZmVlZBIgCgVmZXRjaBgCIAMoCUIK4j8HEgVmZXRjaFIFZmV0Y2gSIwoGdGFyZ2V0GAMgAygJQgviP
  wgSBnRhcmdldFIGdGFyZ2V0EkkKC3J1bl9vcHRpb25zGAQgASgLMhcudGVuc29yYm9hcmQuUnVuT3B0aW9uc0IP4j8MEgpydW5Pc
  HRpb25zUgpydW5PcHRpb25zEmEKEXRlbnNvcl9jb25uZWN0aW9uGAUgAygLMh0udGVuc29yYm9hcmQuVGVuc29yQ29ubmVjdGlvb
  kIV4j8SEhB0ZW5zb3JDb25uZWN0aW9uUhB0ZW5zb3JDb25uZWN0aW9uEmIKDGZlZWRfZGV2aWNlcxgGIAMoCzItLnRlbnNvcmJvY
  XJkLkNhbGxhYmxlT3B0aW9ucy5GZWVkRGV2aWNlc0VudHJ5QhDiPw0SC2ZlZWREZXZpY2VzUgtmZWVkRGV2aWNlcxJmCg1mZXRja
  F9kZXZpY2VzGAcgAygLMi4udGVuc29yYm9hcmQuQ2FsbGFibGVPcHRpb25zLkZldGNoRGV2aWNlc0VudHJ5QhHiPw4SDGZldGNoR
  GV2aWNlc1IMZmV0Y2hEZXZpY2VzEjoKD2ZldGNoX3NraXBfc3luYxgIIAEoCEIS4j8PEg1mZXRjaFNraXBTeW5jUg1mZXRjaFNra
  XBTeW5jGlQKEEZlZWREZXZpY2VzRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5EiAKBXZhbHVlGAIgASgJQgriPwcSB
  XZhbHVlUgV2YWx1ZToCOAEaVQoRRmV0Y2hEZXZpY2VzRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5EiAKBXZhbHVlG
  AIgASgJQgriPwcSBXZhbHVlUgV2YWx1ZToCOAEi6gIKD0JhdGNoaW5nT3B0aW9ucxJAChFudW1fYmF0Y2hfdGhyZWFkcxgBIAEoB
  UIU4j8REg9udW1CYXRjaFRocmVhZHNSD251bUJhdGNoVGhyZWFkcxI3Cg5tYXhfYmF0Y2hfc2l6ZRgCIAEoBUIR4j8OEgxtYXhCY
  XRjaFNpemVSDG1heEJhdGNoU2l6ZRJJChRiYXRjaF90aW1lb3V0X21pY3JvcxgDIAEoBUIX4j8UEhJiYXRjaFRpbWVvdXRNaWNyb
  3NSEmJhdGNoVGltZW91dE1pY3JvcxJGChNhbGxvd2VkX2JhdGNoX3NpemVzGAQgAygFQhbiPxMSEWFsbG93ZWRCYXRjaFNpemVzU
  hFhbGxvd2VkQmF0Y2hTaXplcxJJChRtYXhfZW5xdWV1ZWRfYmF0Y2hlcxgFIAEoBUIX4j8UEhJtYXhFbnF1ZXVlZEJhdGNoZXNSE
  m1heEVucXVldWVkQmF0Y2hlc0KEAQoYb3JnLnRlbnNvcmZsb3cuZnJhbWV3b3JrQgxDb25maWdQcm90b3NQAVpVZ2l0aHViLmNvb
  S90ZW5zb3JmbG93L3RlbnNvcmZsb3cvdGVuc29yZmxvdy9nby9jb3JlL3Byb3RvYnVmL2Zvcl9jb3JlX3Byb3Rvc19nb19wcm90b
  /gBAWIGcHJvdG8z"""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      tensorboard.coordination_config.CoordinationConfigProto.javaDescriptor,
      org.tensorflow.framework.cost_graph.CostGraphProto.javaDescriptor,
      org.tensorflow.framework.graph.GraphProto.javaDescriptor,
      org.tensorflow.framework.step_stats.StepStatsProto.javaDescriptor,
      org.tensorflow.distruntime.cluster.ClusterProto.javaDescriptor,
      org.tensorflow.framework.debug.DebugProto.javaDescriptor,
      org.tensorflow.framework.rewriter_config.RewriterConfigProto.javaDescriptor,
      tensorboard.rpc_options.RpcOptionsProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}