// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorboard.tfprof_log

/** @param memoryMicros
  *   This is the timestamp when the memory information was tracked.
  * @param hostTempBytes
  *   NOTE: Please don't depend on the following 4 fields yet. Due to
  *   TensorFlow internal tracing issues, the numbers can be quite wrong.
  *   TODO(xpan): Fix the TensorFlow internal tracing.
  * @param requestedBytes
  *   Total bytes requested by the op.
  * @param peakBytes
  *   Total bytes requested by the op and released before op end.
  * @param residualBytes
  *   Total bytes requested by the op and not released after op end.
  * @param outputBytes
  *   Total bytes output by the op (not necessarily requested by the op).
  * @param allocatorBytesInUse
  *   The total number of bytes currently allocated by the allocator if &gt;0.
  * @param outputMemory
  *   The memory of each output of the operation.
  */
@SerialVersionUID(0L)
final case class ExecMemory(
    memoryMicros: _root_.scala.Long = 0L,
    hostTempBytes: _root_.scala.Long = 0L,
    hostPersistentBytes: _root_.scala.Long = 0L,
    acceleratorTempBytes: _root_.scala.Long = 0L,
    acceleratorPersistentBytes: _root_.scala.Long = 0L,
    requestedBytes: _root_.scala.Long = 0L,
    peakBytes: _root_.scala.Long = 0L,
    residualBytes: _root_.scala.Long = 0L,
    outputBytes: _root_.scala.Long = 0L,
    allocatorBytesInUse: _root_.scala.Long = 0L,
    outputMemory: _root_.scala.collection.immutable.Map[_root_.scala.Int, tensorboard.tfprof_log.Memory] = _root_.scala.collection.immutable.Map.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ExecMemory] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = memoryMicros
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
        }
      };
      
      {
        val __value = hostTempBytes
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      
      {
        val __value = hostPersistentBytes
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, __value)
        }
      };
      
      {
        val __value = acceleratorTempBytes
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, __value)
        }
      };
      
      {
        val __value = acceleratorPersistentBytes
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, __value)
        }
      };
      
      {
        val __value = requestedBytes
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, __value)
        }
      };
      
      {
        val __value = peakBytes
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(7, __value)
        }
      };
      
      {
        val __value = residualBytes
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(8, __value)
        }
      };
      
      {
        val __value = outputBytes
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(9, __value)
        }
      };
      
      {
        val __value = allocatorBytesInUse
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(10, __value)
        }
      };
      outputMemory.foreach { __item =>
        val __value = tensorboard.tfprof_log.ExecMemory._typemapper_outputMemory.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = memoryMicros
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
      {
        val __v = hostTempBytes
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      {
        val __v = hostPersistentBytes
        if (__v != 0L) {
          _output__.writeInt64(3, __v)
        }
      };
      {
        val __v = acceleratorTempBytes
        if (__v != 0L) {
          _output__.writeInt64(4, __v)
        }
      };
      {
        val __v = acceleratorPersistentBytes
        if (__v != 0L) {
          _output__.writeInt64(5, __v)
        }
      };
      {
        val __v = requestedBytes
        if (__v != 0L) {
          _output__.writeInt64(6, __v)
        }
      };
      {
        val __v = peakBytes
        if (__v != 0L) {
          _output__.writeInt64(7, __v)
        }
      };
      {
        val __v = residualBytes
        if (__v != 0L) {
          _output__.writeInt64(8, __v)
        }
      };
      {
        val __v = outputBytes
        if (__v != 0L) {
          _output__.writeInt64(9, __v)
        }
      };
      {
        val __v = allocatorBytesInUse
        if (__v != 0L) {
          _output__.writeInt64(10, __v)
        }
      };
      outputMemory.foreach { __v =>
        val __m = tensorboard.tfprof_log.ExecMemory._typemapper_outputMemory.toBase(__v)
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withMemoryMicros(__v: _root_.scala.Long): ExecMemory = copy(memoryMicros = __v)
    def withHostTempBytes(__v: _root_.scala.Long): ExecMemory = copy(hostTempBytes = __v)
    def withHostPersistentBytes(__v: _root_.scala.Long): ExecMemory = copy(hostPersistentBytes = __v)
    def withAcceleratorTempBytes(__v: _root_.scala.Long): ExecMemory = copy(acceleratorTempBytes = __v)
    def withAcceleratorPersistentBytes(__v: _root_.scala.Long): ExecMemory = copy(acceleratorPersistentBytes = __v)
    def withRequestedBytes(__v: _root_.scala.Long): ExecMemory = copy(requestedBytes = __v)
    def withPeakBytes(__v: _root_.scala.Long): ExecMemory = copy(peakBytes = __v)
    def withResidualBytes(__v: _root_.scala.Long): ExecMemory = copy(residualBytes = __v)
    def withOutputBytes(__v: _root_.scala.Long): ExecMemory = copy(outputBytes = __v)
    def withAllocatorBytesInUse(__v: _root_.scala.Long): ExecMemory = copy(allocatorBytesInUse = __v)
    def clearOutputMemory = copy(outputMemory = _root_.scala.collection.immutable.Map.empty)
    def addOutputMemory(__vs: (_root_.scala.Int, tensorboard.tfprof_log.Memory) *): ExecMemory = addAllOutputMemory(__vs)
    def addAllOutputMemory(__vs: Iterable[(_root_.scala.Int, tensorboard.tfprof_log.Memory)]): ExecMemory = copy(outputMemory = outputMemory ++ __vs)
    def withOutputMemory(__v: _root_.scala.collection.immutable.Map[_root_.scala.Int, tensorboard.tfprof_log.Memory]): ExecMemory = copy(outputMemory = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = memoryMicros
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = hostTempBytes
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = hostPersistentBytes
          if (__t != 0L) __t else null
        }
        case 4 => {
          val __t = acceleratorTempBytes
          if (__t != 0L) __t else null
        }
        case 5 => {
          val __t = acceleratorPersistentBytes
          if (__t != 0L) __t else null
        }
        case 6 => {
          val __t = requestedBytes
          if (__t != 0L) __t else null
        }
        case 7 => {
          val __t = peakBytes
          if (__t != 0L) __t else null
        }
        case 8 => {
          val __t = residualBytes
          if (__t != 0L) __t else null
        }
        case 9 => {
          val __t = outputBytes
          if (__t != 0L) __t else null
        }
        case 10 => {
          val __t = allocatorBytesInUse
          if (__t != 0L) __t else null
        }
        case 11 => outputMemory.iterator.map(tensorboard.tfprof_log.ExecMemory._typemapper_outputMemory.toBase(_)).toSeq
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(memoryMicros)
        case 2 => _root_.scalapb.descriptors.PLong(hostTempBytes)
        case 3 => _root_.scalapb.descriptors.PLong(hostPersistentBytes)
        case 4 => _root_.scalapb.descriptors.PLong(acceleratorTempBytes)
        case 5 => _root_.scalapb.descriptors.PLong(acceleratorPersistentBytes)
        case 6 => _root_.scalapb.descriptors.PLong(requestedBytes)
        case 7 => _root_.scalapb.descriptors.PLong(peakBytes)
        case 8 => _root_.scalapb.descriptors.PLong(residualBytes)
        case 9 => _root_.scalapb.descriptors.PLong(outputBytes)
        case 10 => _root_.scalapb.descriptors.PLong(allocatorBytesInUse)
        case 11 => _root_.scalapb.descriptors.PRepeated(outputMemory.iterator.map(tensorboard.tfprof_log.ExecMemory._typemapper_outputMemory.toBase(_).toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tensorboard.tfprof_log.ExecMemory.type = tensorboard.tfprof_log.ExecMemory
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.ExecMemory])
}

object ExecMemory extends scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.ExecMemory] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.ExecMemory] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.tfprof_log.ExecMemory = {
    var __memoryMicros: _root_.scala.Long = 0L
    var __hostTempBytes: _root_.scala.Long = 0L
    var __hostPersistentBytes: _root_.scala.Long = 0L
    var __acceleratorTempBytes: _root_.scala.Long = 0L
    var __acceleratorPersistentBytes: _root_.scala.Long = 0L
    var __requestedBytes: _root_.scala.Long = 0L
    var __peakBytes: _root_.scala.Long = 0L
    var __residualBytes: _root_.scala.Long = 0L
    var __outputBytes: _root_.scala.Long = 0L
    var __allocatorBytesInUse: _root_.scala.Long = 0L
    val __outputMemory: _root_.scala.collection.mutable.Builder[(_root_.scala.Int, tensorboard.tfprof_log.Memory), _root_.scala.collection.immutable.Map[_root_.scala.Int, tensorboard.tfprof_log.Memory]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Int, tensorboard.tfprof_log.Memory]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __memoryMicros = _input__.readInt64()
        case 16 =>
          __hostTempBytes = _input__.readInt64()
        case 24 =>
          __hostPersistentBytes = _input__.readInt64()
        case 32 =>
          __acceleratorTempBytes = _input__.readInt64()
        case 40 =>
          __acceleratorPersistentBytes = _input__.readInt64()
        case 48 =>
          __requestedBytes = _input__.readInt64()
        case 56 =>
          __peakBytes = _input__.readInt64()
        case 64 =>
          __residualBytes = _input__.readInt64()
        case 72 =>
          __outputBytes = _input__.readInt64()
        case 80 =>
          __allocatorBytesInUse = _input__.readInt64()
        case 90 =>
          __outputMemory += tensorboard.tfprof_log.ExecMemory._typemapper_outputMemory.toCustom(_root_.scalapb.LiteParser.readMessage[tensorboard.tfprof_log.ExecMemory.OutputMemoryEntry](_input__))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tensorboard.tfprof_log.ExecMemory(
        memoryMicros = __memoryMicros,
        hostTempBytes = __hostTempBytes,
        hostPersistentBytes = __hostPersistentBytes,
        acceleratorTempBytes = __acceleratorTempBytes,
        acceleratorPersistentBytes = __acceleratorPersistentBytes,
        requestedBytes = __requestedBytes,
        peakBytes = __peakBytes,
        residualBytes = __residualBytes,
        outputBytes = __outputBytes,
        allocatorBytesInUse = __allocatorBytesInUse,
        outputMemory = __outputMemory.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.tfprof_log.ExecMemory] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tensorboard.tfprof_log.ExecMemory(
        memoryMicros = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        hostTempBytes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        hostPersistentBytes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        acceleratorTempBytes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        acceleratorPersistentBytes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        requestedBytes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        peakBytes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        residualBytes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        outputBytes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        allocatorBytesInUse = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        outputMemory = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Seq[tensorboard.tfprof_log.ExecMemory.OutputMemoryEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(tensorboard.tfprof_log.ExecMemory._typemapper_outputMemory.toCustom(_)).toMap
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.tfprof_log.TfprofLogProto.javaDescriptor.getMessageTypes().get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.tfprof_log.TfprofLogProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?]= {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?]= null
    (__number: @_root_.scala.unchecked) match {
      case 11 => __out = tensorboard.tfprof_log.ExecMemory.OutputMemoryEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]](
      _root_.tensorboard.tfprof_log.ExecMemory.OutputMemoryEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?]= throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tensorboard.tfprof_log.ExecMemory(
    memoryMicros = 0L,
    hostTempBytes = 0L,
    hostPersistentBytes = 0L,
    acceleratorTempBytes = 0L,
    acceleratorPersistentBytes = 0L,
    requestedBytes = 0L,
    peakBytes = 0L,
    residualBytes = 0L,
    outputBytes = 0L,
    allocatorBytesInUse = 0L,
    outputMemory = _root_.scala.collection.immutable.Map.empty
  )
  @SerialVersionUID(0L)
  final case class OutputMemoryEntry(
      key: _root_.scala.Int = 0,
      value: _root_.scala.Option[tensorboard.tfprof_log.Memory] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[OutputMemoryEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != 0) {
            _output__.writeInt32(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Int): OutputMemoryEntry = copy(key = __v)
      def getValue: tensorboard.tfprof_log.Memory = value.getOrElse(tensorboard.tfprof_log.Memory.defaultInstance)
      def clearValue: OutputMemoryEntry = copy(value = _root_.scala.None)
      def withValue(__v: tensorboard.tfprof_log.Memory): OutputMemoryEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != 0) __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: tensorboard.tfprof_log.ExecMemory.OutputMemoryEntry.type = tensorboard.tfprof_log.ExecMemory.OutputMemoryEntry
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.ExecMemory.OutputMemoryEntry])
  }
  
  object OutputMemoryEntry extends scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.ExecMemory.OutputMemoryEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.ExecMemory.OutputMemoryEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.tfprof_log.ExecMemory.OutputMemoryEntry = {
      var __key: _root_.scala.Int = 0
      var __value: _root_.scala.Option[tensorboard.tfprof_log.Memory] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __key = _input__.readInt32()
          case 18 =>
            __value = _root_.scala.Option(__value.fold(_root_.scalapb.LiteParser.readMessage[tensorboard.tfprof_log.Memory](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      tensorboard.tfprof_log.ExecMemory.OutputMemoryEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.tfprof_log.ExecMemory.OutputMemoryEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        tensorboard.tfprof_log.ExecMemory.OutputMemoryEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[tensorboard.tfprof_log.Memory]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.tfprof_log.ExecMemory.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.tfprof_log.ExecMemory.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?]= {
      var __out: _root_.scalapb.GeneratedMessageCompanion[?]= null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = tensorboard.tfprof_log.Memory
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?]= throw new MatchError(__fieldNumber)
    lazy val defaultInstance = tensorboard.tfprof_log.ExecMemory.OutputMemoryEntry(
      key = 0,
      value = _root_.scala.None
    )
    implicit class OutputMemoryEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.tfprof_log.ExecMemory.OutputMemoryEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.tfprof_log.ExecMemory.OutputMemoryEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.tfprof_log.Memory] = field(_.getValue)((c_, f_) => c_.copy(value = _root_.scala.Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tensorboard.tfprof_log.Memory]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ExecMemory.OutputMemoryEntry, (_root_.scala.Int, tensorboard.tfprof_log.Memory)] =
      _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ExecMemory.OutputMemoryEntry, (_root_.scala.Int, tensorboard.tfprof_log.Memory)](__m => (__m.key, __m.getValue))(__p => tensorboard.tfprof_log.ExecMemory.OutputMemoryEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Int,
      value: _root_.scala.Option[tensorboard.tfprof_log.Memory]
    ): _root_.tensorboard.tfprof_log.ExecMemory.OutputMemoryEntry = _root_.tensorboard.tfprof_log.ExecMemory.OutputMemoryEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.ExecMemory.OutputMemoryEntry])
  }
  
  implicit class ExecMemoryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.tfprof_log.ExecMemory]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.tfprof_log.ExecMemory](_l) {
    def memoryMicros: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.memoryMicros)((c_, f_) => c_.copy(memoryMicros = f_))
    def hostTempBytes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.hostTempBytes)((c_, f_) => c_.copy(hostTempBytes = f_))
    def hostPersistentBytes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.hostPersistentBytes)((c_, f_) => c_.copy(hostPersistentBytes = f_))
    def acceleratorTempBytes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.acceleratorTempBytes)((c_, f_) => c_.copy(acceleratorTempBytes = f_))
    def acceleratorPersistentBytes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.acceleratorPersistentBytes)((c_, f_) => c_.copy(acceleratorPersistentBytes = f_))
    def requestedBytes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.requestedBytes)((c_, f_) => c_.copy(requestedBytes = f_))
    def peakBytes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.peakBytes)((c_, f_) => c_.copy(peakBytes = f_))
    def residualBytes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.residualBytes)((c_, f_) => c_.copy(residualBytes = f_))
    def outputBytes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.outputBytes)((c_, f_) => c_.copy(outputBytes = f_))
    def allocatorBytesInUse: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.allocatorBytesInUse)((c_, f_) => c_.copy(allocatorBytesInUse = f_))
    def outputMemory: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Int, tensorboard.tfprof_log.Memory]] = field(_.outputMemory)((c_, f_) => c_.copy(outputMemory = f_))
  }
  final val MEMORY_MICROS_FIELD_NUMBER = 1
  final val HOST_TEMP_BYTES_FIELD_NUMBER = 2
  final val HOST_PERSISTENT_BYTES_FIELD_NUMBER = 3
  final val ACCELERATOR_TEMP_BYTES_FIELD_NUMBER = 4
  final val ACCELERATOR_PERSISTENT_BYTES_FIELD_NUMBER = 5
  final val REQUESTED_BYTES_FIELD_NUMBER = 6
  final val PEAK_BYTES_FIELD_NUMBER = 7
  final val RESIDUAL_BYTES_FIELD_NUMBER = 8
  final val OUTPUT_BYTES_FIELD_NUMBER = 9
  final val ALLOCATOR_BYTES_IN_USE_FIELD_NUMBER = 10
  final val OUTPUT_MEMORY_FIELD_NUMBER = 11
  @transient
  private[tfprof_log] val _typemapper_outputMemory: _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ExecMemory.OutputMemoryEntry, (_root_.scala.Int, tensorboard.tfprof_log.Memory)] = implicitly[_root_.scalapb.TypeMapper[tensorboard.tfprof_log.ExecMemory.OutputMemoryEntry, (_root_.scala.Int, tensorboard.tfprof_log.Memory)]]
  def of(
    memoryMicros: _root_.scala.Long,
    hostTempBytes: _root_.scala.Long,
    hostPersistentBytes: _root_.scala.Long,
    acceleratorTempBytes: _root_.scala.Long,
    acceleratorPersistentBytes: _root_.scala.Long,
    requestedBytes: _root_.scala.Long,
    peakBytes: _root_.scala.Long,
    residualBytes: _root_.scala.Long,
    outputBytes: _root_.scala.Long,
    allocatorBytesInUse: _root_.scala.Long,
    outputMemory: _root_.scala.collection.immutable.Map[_root_.scala.Int, tensorboard.tfprof_log.Memory]
  ): _root_.tensorboard.tfprof_log.ExecMemory = _root_.tensorboard.tfprof_log.ExecMemory(
    memoryMicros,
    hostTempBytes,
    hostPersistentBytes,
    acceleratorTempBytes,
    acceleratorPersistentBytes,
    requestedBytes,
    peakBytes,
    residualBytes,
    outputBytes,
    allocatorBytesInUse,
    outputMemory
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.ExecMemory])
}
