// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorboard.tfprof_log

@SerialVersionUID(0L)
final case class Tuple(
    int64Values: _root_.scala.Seq[_root_.scala.Long] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Tuple] {
    private[this] def int64ValuesSerializedSize = {
      if (__int64ValuesSerializedSizeField == 0) __int64ValuesSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        int64Values.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt64SizeNoTag(__i))
        __s
      }
      __int64ValuesSerializedSizeField
    }
    @transient private[this] var __int64ValuesSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (int64Values.nonEmpty) {
        val __localsize = int64ValuesSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      if (int64Values.nonEmpty) {
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(int64ValuesSerializedSize)
        int64Values.foreach(_output__.writeInt64NoTag)
      };
      unknownFields.writeTo(_output__)
    }
    def clearInt64Values = copy(int64Values = _root_.scala.Seq.empty)
    def addInt64Values(__vs: _root_.scala.Long *): Tuple = addAllInt64Values(__vs)
    def addAllInt64Values(__vs: Iterable[_root_.scala.Long]): Tuple = copy(int64Values = int64Values ++ __vs)
    def withInt64Values(__v: _root_.scala.Seq[_root_.scala.Long]): Tuple = copy(int64Values = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => int64Values
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(int64Values.iterator.map(_root_.scalapb.descriptors.PLong(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tensorboard.tfprof_log.Tuple.type = tensorboard.tfprof_log.Tuple
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.Tuple])
}

object Tuple extends scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.Tuple] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.Tuple] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.tfprof_log.Tuple = {
    val __int64Values: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __int64Values += _input__.readInt64()
        case 10 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __int64Values += _input__.readInt64()
          }
          _input__.popLimit(oldLimit)
        }
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tensorboard.tfprof_log.Tuple(
        int64Values = __int64Values.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.tfprof_log.Tuple] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tensorboard.tfprof_log.Tuple(
        int64Values = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[_root_.scala.Long]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.tfprof_log.TfprofLogProto.javaDescriptor.getMessageTypes().get(8)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.tfprof_log.TfprofLogProto.scalaDescriptor.messages(8)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tensorboard.tfprof_log.Tuple(
    int64Values = _root_.scala.Seq.empty
  )
  implicit class TupleLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.tfprof_log.Tuple]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.tfprof_log.Tuple](_l) {
    def int64Values: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Long]] = field(_.int64Values)((c_, f_) => c_.copy(int64Values = f_))
  }
  final val INT64_VALUES_FIELD_NUMBER = 1
  def of(
    int64Values: _root_.scala.Seq[_root_.scala.Long]
  ): _root_.tensorboard.tfprof_log.Tuple = _root_.tensorboard.tfprof_log.Tuple(
    int64Values
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.Tuple])
}
