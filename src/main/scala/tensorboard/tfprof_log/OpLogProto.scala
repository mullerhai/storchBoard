// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorboard.tfprof_log

/** @param idToString
  *   Maps from id of CodeDef file,function,line to its string
  *   In the future can also map other id of other fields to string.
  */
@SerialVersionUID(0L)
final case class OpLogProto(
    logEntries: _root_.scala.Seq[tensorboard.tfprof_log.OpLogEntry] = _root_.scala.Seq.empty,
    idToString: _root_.scala.collection.immutable.Map[_root_.scala.Long, _root_.scala.Predef.String] = _root_.scala.collection.immutable.Map.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[OpLogProto] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      logEntries.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      idToString.foreach { __item =>
        val __value = tensorboard.tfprof_log.OpLogProto._typemapper_idToString.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      logEntries.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      idToString.foreach { __v =>
        val __m = tensorboard.tfprof_log.OpLogProto._typemapper_idToString.toBase(__v)
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def clearLogEntries = copy(logEntries = _root_.scala.Seq.empty)
    def addLogEntries(__vs: tensorboard.tfprof_log.OpLogEntry *): OpLogProto = addAllLogEntries(__vs)
    def addAllLogEntries(__vs: Iterable[tensorboard.tfprof_log.OpLogEntry]): OpLogProto = copy(logEntries = logEntries ++ __vs)
    def withLogEntries(__v: _root_.scala.Seq[tensorboard.tfprof_log.OpLogEntry]): OpLogProto = copy(logEntries = __v)
    def clearIdToString = copy(idToString = _root_.scala.collection.immutable.Map.empty)
    def addIdToString(__vs: (_root_.scala.Long, _root_.scala.Predef.String) *): OpLogProto = addAllIdToString(__vs)
    def addAllIdToString(__vs: Iterable[(_root_.scala.Long, _root_.scala.Predef.String)]): OpLogProto = copy(idToString = idToString ++ __vs)
    def withIdToString(__v: _root_.scala.collection.immutable.Map[_root_.scala.Long, _root_.scala.Predef.String]): OpLogProto = copy(idToString = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => logEntries
        case 2 => idToString.iterator.map(tensorboard.tfprof_log.OpLogProto._typemapper_idToString.toBase(_)).toSeq
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(logEntries.iterator.map(_.toPMessage).toVector)
        case 2 => _root_.scalapb.descriptors.PRepeated(idToString.iterator.map(tensorboard.tfprof_log.OpLogProto._typemapper_idToString.toBase(_).toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tensorboard.tfprof_log.OpLogProto.type = tensorboard.tfprof_log.OpLogProto
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.OpLogProto])
}

object OpLogProto extends scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.OpLogProto] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.OpLogProto] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.tfprof_log.OpLogProto = {
    val __logEntries: _root_.scala.collection.immutable.VectorBuilder[tensorboard.tfprof_log.OpLogEntry] = new _root_.scala.collection.immutable.VectorBuilder[tensorboard.tfprof_log.OpLogEntry]
    val __idToString: _root_.scala.collection.mutable.Builder[(_root_.scala.Long, _root_.scala.Predef.String), _root_.scala.collection.immutable.Map[_root_.scala.Long, _root_.scala.Predef.String]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Long, _root_.scala.Predef.String]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __logEntries += _root_.scalapb.LiteParser.readMessage[tensorboard.tfprof_log.OpLogEntry](_input__)
        case 18 =>
          __idToString += tensorboard.tfprof_log.OpLogProto._typemapper_idToString.toCustom(_root_.scalapb.LiteParser.readMessage[tensorboard.tfprof_log.OpLogProto.IdToStringEntry](_input__))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tensorboard.tfprof_log.OpLogProto(
        logEntries = __logEntries.result(),
        idToString = __idToString.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.tfprof_log.OpLogProto] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tensorboard.tfprof_log.OpLogProto(
        logEntries = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[tensorboard.tfprof_log.OpLogEntry]]).getOrElse(_root_.scala.Seq.empty),
        idToString = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[tensorboard.tfprof_log.OpLogProto.IdToStringEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(tensorboard.tfprof_log.OpLogProto._typemapper_idToString.toCustom(_)).toMap
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.tfprof_log.TfprofLogProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.tfprof_log.TfprofLogProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = tensorboard.tfprof_log.OpLogEntry
      case 2 => __out = tensorboard.tfprof_log.OpLogProto.IdToStringEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.tensorboard.tfprof_log.OpLogProto.IdToStringEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tensorboard.tfprof_log.OpLogProto(
    logEntries = _root_.scala.Seq.empty,
    idToString = _root_.scala.collection.immutable.Map.empty
  )
  @SerialVersionUID(0L)
  final case class IdToStringEntry(
      key: _root_.scala.Long = 0L,
      value: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[IdToStringEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
          }
        };
        
        {
          val __value = value
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != 0L) {
            _output__.writeInt64(1, __v)
          }
        };
        {
          val __v = value
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Long): IdToStringEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Predef.String): IdToStringEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != 0L) __t else null
          }
          case 2 => {
            val __t = value
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PLong(key)
          case 2 => _root_.scalapb.descriptors.PString(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: tensorboard.tfprof_log.OpLogProto.IdToStringEntry.type = tensorboard.tfprof_log.OpLogProto.IdToStringEntry
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.OpLogProto.IdToStringEntry])
  }
  
  object IdToStringEntry extends scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.OpLogProto.IdToStringEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.OpLogProto.IdToStringEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.tfprof_log.OpLogProto.IdToStringEntry = {
      var __key: _root_.scala.Long = 0L
      var __value: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __key = _input__.readInt64()
          case 18 =>
            __value = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      tensorboard.tfprof_log.OpLogProto.IdToStringEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.tfprof_log.OpLogProto.IdToStringEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        tensorboard.tfprof_log.OpLogProto.IdToStringEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.tfprof_log.OpLogProto.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.tfprof_log.OpLogProto.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = tensorboard.tfprof_log.OpLogProto.IdToStringEntry(
      key = 0L,
      value = ""
    )
    implicit class IdToStringEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.tfprof_log.OpLogProto.IdToStringEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.tfprof_log.OpLogProto.IdToStringEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[tensorboard.tfprof_log.OpLogProto.IdToStringEntry, (_root_.scala.Long, _root_.scala.Predef.String)] =
      _root_.scalapb.TypeMapper[tensorboard.tfprof_log.OpLogProto.IdToStringEntry, (_root_.scala.Long, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => tensorboard.tfprof_log.OpLogProto.IdToStringEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Long,
      value: _root_.scala.Predef.String
    ): _root_.tensorboard.tfprof_log.OpLogProto.IdToStringEntry = _root_.tensorboard.tfprof_log.OpLogProto.IdToStringEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.OpLogProto.IdToStringEntry])
  }
  
  implicit class OpLogProtoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.tfprof_log.OpLogProto]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.tfprof_log.OpLogProto](_l) {
    def logEntries: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[tensorboard.tfprof_log.OpLogEntry]] = field(_.logEntries)((c_, f_) => c_.copy(logEntries = f_))
    def idToString: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Long, _root_.scala.Predef.String]] = field(_.idToString)((c_, f_) => c_.copy(idToString = f_))
  }
  final val LOG_ENTRIES_FIELD_NUMBER = 1
  final val ID_TO_STRING_FIELD_NUMBER = 2
  @transient
  private[tfprof_log] val _typemapper_idToString: _root_.scalapb.TypeMapper[tensorboard.tfprof_log.OpLogProto.IdToStringEntry, (_root_.scala.Long, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[tensorboard.tfprof_log.OpLogProto.IdToStringEntry, (_root_.scala.Long, _root_.scala.Predef.String)]]
  def of(
    logEntries: _root_.scala.Seq[tensorboard.tfprof_log.OpLogEntry],
    idToString: _root_.scala.collection.immutable.Map[_root_.scala.Long, _root_.scala.Predef.String]
  ): _root_.tensorboard.tfprof_log.OpLogProto = _root_.tensorboard.tfprof_log.OpLogProto(
    logEntries,
    idToString
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.OpLogProto])
}
