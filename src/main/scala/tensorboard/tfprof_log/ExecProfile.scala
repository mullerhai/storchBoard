// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorboard.tfprof_log

/** @param runCount
  *   Can be larger than 1 if run multiple times in loop.
  * @param allStartMicros
  *   The earliest/latest time including scheduling and execution.
  * @param acceleratorExecs
  *   device -&gt; vector of {op_start_micros, op_exec_micros} pairs.
  *   accelerator_execs: gpu:id/stream:all -&gt; {op_start_micros, op_exec_micros}
  *   For accelerator, vector size can be larger than 1, multiple kernel fires
  *   or in tf.while_loop.
  * @param cpuExecs
  *   cpu_execs: cpu/gpu:id -&gt; {op_start_micros, op_exec_micros}
  *   For cpu, vector size can be larger than 1 if in tf.while_loop.
  * @param memoryExecs
  *   Each entry to memory information of a scheduling of the node.
  *   Normally, there will be multiple entries in while_loop.
  * @param allocations
  *   The allocation and deallocation times and sizes throughout execution.
  * @param devices
  *   The devices related to this execution.
  */
@SerialVersionUID(0L)
final case class ExecProfile(
    runCount: _root_.scala.Long = 0L,
    allStartMicros: _root_.scala.Long = 0L,
    latestEndMicros: _root_.scala.Long = 0L,
    acceleratorExecs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, tensorboard.tfprof_log.ExecTime] = _root_.scala.collection.immutable.Map.empty,
    cpuExecs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, tensorboard.tfprof_log.ExecTime] = _root_.scala.collection.immutable.Map.empty,
    memoryExecs: _root_.scala.Seq[tensorboard.tfprof_log.ExecMemory] = _root_.scala.Seq.empty,
    allocations: _root_.scala.Seq[org.tensorflow.framework.step_stats.AllocationRecord] = _root_.scala.Seq.empty,
    devices: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ExecProfile] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = runCount
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
        }
      };
      
      {
        val __value = allStartMicros
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      
      {
        val __value = latestEndMicros
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, __value)
        }
      };
      acceleratorExecs.foreach { __item =>
        val __value = tensorboard.tfprof_log.ExecProfile._typemapper_acceleratorExecs.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      cpuExecs.foreach { __item =>
        val __value = tensorboard.tfprof_log.ExecProfile._typemapper_cpuExecs.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      memoryExecs.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      allocations.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      devices.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = runCount
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
      {
        val __v = allStartMicros
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      {
        val __v = latestEndMicros
        if (__v != 0L) {
          _output__.writeInt64(3, __v)
        }
      };
      acceleratorExecs.foreach { __v =>
        val __m = tensorboard.tfprof_log.ExecProfile._typemapper_acceleratorExecs.toBase(__v)
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      cpuExecs.foreach { __v =>
        val __m = tensorboard.tfprof_log.ExecProfile._typemapper_cpuExecs.toBase(__v)
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      devices.foreach { __v =>
        val __m = __v
        _output__.writeString(6, __m)
      };
      memoryExecs.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      allocations.foreach { __v =>
        val __m = __v
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withRunCount(__v: _root_.scala.Long): ExecProfile = copy(runCount = __v)
    def withAllStartMicros(__v: _root_.scala.Long): ExecProfile = copy(allStartMicros = __v)
    def withLatestEndMicros(__v: _root_.scala.Long): ExecProfile = copy(latestEndMicros = __v)
    def clearAcceleratorExecs = copy(acceleratorExecs = _root_.scala.collection.immutable.Map.empty)
    def addAcceleratorExecs(__vs: (_root_.scala.Predef.String, tensorboard.tfprof_log.ExecTime) *): ExecProfile = addAllAcceleratorExecs(__vs)
    def addAllAcceleratorExecs(__vs: Iterable[(_root_.scala.Predef.String, tensorboard.tfprof_log.ExecTime)]): ExecProfile = copy(acceleratorExecs = acceleratorExecs ++ __vs)
    def withAcceleratorExecs(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, tensorboard.tfprof_log.ExecTime]): ExecProfile = copy(acceleratorExecs = __v)
    def clearCpuExecs = copy(cpuExecs = _root_.scala.collection.immutable.Map.empty)
    def addCpuExecs(__vs: (_root_.scala.Predef.String, tensorboard.tfprof_log.ExecTime) *): ExecProfile = addAllCpuExecs(__vs)
    def addAllCpuExecs(__vs: Iterable[(_root_.scala.Predef.String, tensorboard.tfprof_log.ExecTime)]): ExecProfile = copy(cpuExecs = cpuExecs ++ __vs)
    def withCpuExecs(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, tensorboard.tfprof_log.ExecTime]): ExecProfile = copy(cpuExecs = __v)
    def clearMemoryExecs = copy(memoryExecs = _root_.scala.Seq.empty)
    def addMemoryExecs(__vs: tensorboard.tfprof_log.ExecMemory *): ExecProfile = addAllMemoryExecs(__vs)
    def addAllMemoryExecs(__vs: Iterable[tensorboard.tfprof_log.ExecMemory]): ExecProfile = copy(memoryExecs = memoryExecs ++ __vs)
    def withMemoryExecs(__v: _root_.scala.Seq[tensorboard.tfprof_log.ExecMemory]): ExecProfile = copy(memoryExecs = __v)
    def clearAllocations = copy(allocations = _root_.scala.Seq.empty)
    def addAllocations(__vs: org.tensorflow.framework.step_stats.AllocationRecord *): ExecProfile = addAllAllocations(__vs)
    def addAllAllocations(__vs: Iterable[org.tensorflow.framework.step_stats.AllocationRecord]): ExecProfile = copy(allocations = allocations ++ __vs)
    def withAllocations(__v: _root_.scala.Seq[org.tensorflow.framework.step_stats.AllocationRecord]): ExecProfile = copy(allocations = __v)
    def clearDevices = copy(devices = _root_.scala.Seq.empty)
    def addDevices(__vs: _root_.scala.Predef.String *): ExecProfile = addAllDevices(__vs)
    def addAllDevices(__vs: Iterable[_root_.scala.Predef.String]): ExecProfile = copy(devices = devices ++ __vs)
    def withDevices(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ExecProfile = copy(devices = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = runCount
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = allStartMicros
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = latestEndMicros
          if (__t != 0L) __t else null
        }
        case 4 => acceleratorExecs.iterator.map(tensorboard.tfprof_log.ExecProfile._typemapper_acceleratorExecs.toBase(_)).toSeq
        case 5 => cpuExecs.iterator.map(tensorboard.tfprof_log.ExecProfile._typemapper_cpuExecs.toBase(_)).toSeq
        case 7 => memoryExecs
        case 11 => allocations
        case 6 => devices
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(runCount)
        case 2 => _root_.scalapb.descriptors.PLong(allStartMicros)
        case 3 => _root_.scalapb.descriptors.PLong(latestEndMicros)
        case 4 => _root_.scalapb.descriptors.PRepeated(acceleratorExecs.iterator.map(tensorboard.tfprof_log.ExecProfile._typemapper_acceleratorExecs.toBase(_).toPMessage).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(cpuExecs.iterator.map(tensorboard.tfprof_log.ExecProfile._typemapper_cpuExecs.toBase(_).toPMessage).toVector)
        case 7 => _root_.scalapb.descriptors.PRepeated(memoryExecs.iterator.map(_.toPMessage).toVector)
        case 11 => _root_.scalapb.descriptors.PRepeated(allocations.iterator.map(_.toPMessage).toVector)
        case 6 => _root_.scalapb.descriptors.PRepeated(devices.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tensorboard.tfprof_log.ExecProfile.type = tensorboard.tfprof_log.ExecProfile
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.ExecProfile])
}

object ExecProfile extends scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.ExecProfile] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.ExecProfile] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.tfprof_log.ExecProfile = {
    var __runCount: _root_.scala.Long = 0L
    var __allStartMicros: _root_.scala.Long = 0L
    var __latestEndMicros: _root_.scala.Long = 0L
    val __acceleratorExecs: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, tensorboard.tfprof_log.ExecTime), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, tensorboard.tfprof_log.ExecTime]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, tensorboard.tfprof_log.ExecTime]
    val __cpuExecs: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, tensorboard.tfprof_log.ExecTime), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, tensorboard.tfprof_log.ExecTime]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, tensorboard.tfprof_log.ExecTime]
    val __memoryExecs: _root_.scala.collection.immutable.VectorBuilder[tensorboard.tfprof_log.ExecMemory] = new _root_.scala.collection.immutable.VectorBuilder[tensorboard.tfprof_log.ExecMemory]
    val __allocations: _root_.scala.collection.immutable.VectorBuilder[org.tensorflow.framework.step_stats.AllocationRecord] = new _root_.scala.collection.immutable.VectorBuilder[org.tensorflow.framework.step_stats.AllocationRecord]
    val __devices: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __runCount = _input__.readInt64()
        case 16 =>
          __allStartMicros = _input__.readInt64()
        case 24 =>
          __latestEndMicros = _input__.readInt64()
        case 34 =>
          __acceleratorExecs += tensorboard.tfprof_log.ExecProfile._typemapper_acceleratorExecs.toCustom(_root_.scalapb.LiteParser.readMessage[tensorboard.tfprof_log.ExecProfile.AcceleratorExecsEntry](_input__))
        case 42 =>
          __cpuExecs += tensorboard.tfprof_log.ExecProfile._typemapper_cpuExecs.toCustom(_root_.scalapb.LiteParser.readMessage[tensorboard.tfprof_log.ExecProfile.CpuExecsEntry](_input__))
        case 58 =>
          __memoryExecs += _root_.scalapb.LiteParser.readMessage[tensorboard.tfprof_log.ExecMemory](_input__)
        case 90 =>
          __allocations += _root_.scalapb.LiteParser.readMessage[org.tensorflow.framework.step_stats.AllocationRecord](_input__)
        case 50 =>
          __devices += _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tensorboard.tfprof_log.ExecProfile(
        runCount = __runCount,
        allStartMicros = __allStartMicros,
        latestEndMicros = __latestEndMicros,
        acceleratorExecs = __acceleratorExecs.result(),
        cpuExecs = __cpuExecs.result(),
        memoryExecs = __memoryExecs.result(),
        allocations = __allocations.result(),
        devices = __devices.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.tfprof_log.ExecProfile] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tensorboard.tfprof_log.ExecProfile(
        runCount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        allStartMicros = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        latestEndMicros = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        acceleratorExecs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[tensorboard.tfprof_log.ExecProfile.AcceleratorExecsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(tensorboard.tfprof_log.ExecProfile._typemapper_acceleratorExecs.toCustom(_)).toMap,
        cpuExecs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[tensorboard.tfprof_log.ExecProfile.CpuExecsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(tensorboard.tfprof_log.ExecProfile._typemapper_cpuExecs.toCustom(_)).toMap,
        memoryExecs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[tensorboard.tfprof_log.ExecMemory]]).getOrElse(_root_.scala.Seq.empty),
        allocations = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Seq[org.tensorflow.framework.step_stats.AllocationRecord]]).getOrElse(_root_.scala.Seq.empty),
        devices = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.tfprof_log.TfprofLogProto.javaDescriptor.getMessageTypes().get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.tfprof_log.TfprofLogProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?]= {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?]= null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = tensorboard.tfprof_log.ExecProfile.AcceleratorExecsEntry
      case 5 => __out = tensorboard.tfprof_log.ExecProfile.CpuExecsEntry
      case 7 => __out = tensorboard.tfprof_log.ExecMemory
      case 11 => __out = org.tensorflow.framework.step_stats.AllocationRecord
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]](
      _root_.tensorboard.tfprof_log.ExecProfile.AcceleratorExecsEntry,
      _root_.tensorboard.tfprof_log.ExecProfile.CpuExecsEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?]= throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tensorboard.tfprof_log.ExecProfile(
    runCount = 0L,
    allStartMicros = 0L,
    latestEndMicros = 0L,
    acceleratorExecs = _root_.scala.collection.immutable.Map.empty,
    cpuExecs = _root_.scala.collection.immutable.Map.empty,
    memoryExecs = _root_.scala.Seq.empty,
    allocations = _root_.scala.Seq.empty,
    devices = _root_.scala.Seq.empty
  )
  @SerialVersionUID(0L)
  final case class AcceleratorExecsEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Option[tensorboard.tfprof_log.ExecTime] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AcceleratorExecsEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): AcceleratorExecsEntry = copy(key = __v)
      def getValue: tensorboard.tfprof_log.ExecTime = value.getOrElse(tensorboard.tfprof_log.ExecTime.defaultInstance)
      def clearValue: AcceleratorExecsEntry = copy(value = _root_.scala.None)
      def withValue(__v: tensorboard.tfprof_log.ExecTime): AcceleratorExecsEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: tensorboard.tfprof_log.ExecProfile.AcceleratorExecsEntry.type = tensorboard.tfprof_log.ExecProfile.AcceleratorExecsEntry
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.ExecProfile.AcceleratorExecsEntry])
  }
  
  object AcceleratorExecsEntry extends scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.ExecProfile.AcceleratorExecsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.ExecProfile.AcceleratorExecsEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.tfprof_log.ExecProfile.AcceleratorExecsEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Option[tensorboard.tfprof_log.ExecTime] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = _root_.scala.Option(__value.fold(_root_.scalapb.LiteParser.readMessage[tensorboard.tfprof_log.ExecTime](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      tensorboard.tfprof_log.ExecProfile.AcceleratorExecsEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.tfprof_log.ExecProfile.AcceleratorExecsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        tensorboard.tfprof_log.ExecProfile.AcceleratorExecsEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[tensorboard.tfprof_log.ExecTime]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.tfprof_log.ExecProfile.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.tfprof_log.ExecProfile.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?]= {
      var __out: _root_.scalapb.GeneratedMessageCompanion[?]= null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = tensorboard.tfprof_log.ExecTime
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?]= throw new MatchError(__fieldNumber)
    lazy val defaultInstance = tensorboard.tfprof_log.ExecProfile.AcceleratorExecsEntry(
      key = "",
      value = _root_.scala.None
    )
    implicit class AcceleratorExecsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.tfprof_log.ExecProfile.AcceleratorExecsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.tfprof_log.ExecProfile.AcceleratorExecsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.tfprof_log.ExecTime] = field(_.getValue)((c_, f_) => c_.copy(value = _root_.scala.Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tensorboard.tfprof_log.ExecTime]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ExecProfile.AcceleratorExecsEntry, (_root_.scala.Predef.String, tensorboard.tfprof_log.ExecTime)] =
      _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ExecProfile.AcceleratorExecsEntry, (_root_.scala.Predef.String, tensorboard.tfprof_log.ExecTime)](__m => (__m.key, __m.getValue))(__p => tensorboard.tfprof_log.ExecProfile.AcceleratorExecsEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Option[tensorboard.tfprof_log.ExecTime]
    ): _root_.tensorboard.tfprof_log.ExecProfile.AcceleratorExecsEntry = _root_.tensorboard.tfprof_log.ExecProfile.AcceleratorExecsEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.ExecProfile.AcceleratorExecsEntry])
  }
  
  @SerialVersionUID(0L)
  final case class CpuExecsEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Option[tensorboard.tfprof_log.ExecTime] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CpuExecsEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): CpuExecsEntry = copy(key = __v)
      def getValue: tensorboard.tfprof_log.ExecTime = value.getOrElse(tensorboard.tfprof_log.ExecTime.defaultInstance)
      def clearValue: CpuExecsEntry = copy(value = _root_.scala.None)
      def withValue(__v: tensorboard.tfprof_log.ExecTime): CpuExecsEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: tensorboard.tfprof_log.ExecProfile.CpuExecsEntry.type = tensorboard.tfprof_log.ExecProfile.CpuExecsEntry
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.ExecProfile.CpuExecsEntry])
  }
  
  object CpuExecsEntry extends scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.ExecProfile.CpuExecsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.ExecProfile.CpuExecsEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.tfprof_log.ExecProfile.CpuExecsEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Option[tensorboard.tfprof_log.ExecTime] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = _root_.scala.Option(__value.fold(_root_.scalapb.LiteParser.readMessage[tensorboard.tfprof_log.ExecTime](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      tensorboard.tfprof_log.ExecProfile.CpuExecsEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.tfprof_log.ExecProfile.CpuExecsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        tensorboard.tfprof_log.ExecProfile.CpuExecsEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[tensorboard.tfprof_log.ExecTime]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.tfprof_log.ExecProfile.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.tfprof_log.ExecProfile.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?]= {
      var __out: _root_.scalapb.GeneratedMessageCompanion[?]= null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = tensorboard.tfprof_log.ExecTime
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?]= throw new MatchError(__fieldNumber)
    lazy val defaultInstance = tensorboard.tfprof_log.ExecProfile.CpuExecsEntry(
      key = "",
      value = _root_.scala.None
    )
    implicit class CpuExecsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.tfprof_log.ExecProfile.CpuExecsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.tfprof_log.ExecProfile.CpuExecsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.tfprof_log.ExecTime] = field(_.getValue)((c_, f_) => c_.copy(value = _root_.scala.Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tensorboard.tfprof_log.ExecTime]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ExecProfile.CpuExecsEntry, (_root_.scala.Predef.String, tensorboard.tfprof_log.ExecTime)] =
      _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ExecProfile.CpuExecsEntry, (_root_.scala.Predef.String, tensorboard.tfprof_log.ExecTime)](__m => (__m.key, __m.getValue))(__p => tensorboard.tfprof_log.ExecProfile.CpuExecsEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Option[tensorboard.tfprof_log.ExecTime]
    ): _root_.tensorboard.tfprof_log.ExecProfile.CpuExecsEntry = _root_.tensorboard.tfprof_log.ExecProfile.CpuExecsEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.ExecProfile.CpuExecsEntry])
  }
  
  implicit class ExecProfileLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.tfprof_log.ExecProfile]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.tfprof_log.ExecProfile](_l) {
    def runCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.runCount)((c_, f_) => c_.copy(runCount = f_))
    def allStartMicros: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.allStartMicros)((c_, f_) => c_.copy(allStartMicros = f_))
    def latestEndMicros: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.latestEndMicros)((c_, f_) => c_.copy(latestEndMicros = f_))
    def acceleratorExecs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, tensorboard.tfprof_log.ExecTime]] = field(_.acceleratorExecs)((c_, f_) => c_.copy(acceleratorExecs = f_))
    def cpuExecs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, tensorboard.tfprof_log.ExecTime]] = field(_.cpuExecs)((c_, f_) => c_.copy(cpuExecs = f_))
    def memoryExecs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[tensorboard.tfprof_log.ExecMemory]] = field(_.memoryExecs)((c_, f_) => c_.copy(memoryExecs = f_))
    def allocations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[org.tensorflow.framework.step_stats.AllocationRecord]] = field(_.allocations)((c_, f_) => c_.copy(allocations = f_))
    def devices: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.devices)((c_, f_) => c_.copy(devices = f_))
  }
  final val RUN_COUNT_FIELD_NUMBER = 1
  final val ALL_START_MICROS_FIELD_NUMBER = 2
  final val LATEST_END_MICROS_FIELD_NUMBER = 3
  final val ACCELERATOR_EXECS_FIELD_NUMBER = 4
  final val CPU_EXECS_FIELD_NUMBER = 5
  final val MEMORY_EXECS_FIELD_NUMBER = 7
  final val ALLOCATIONS_FIELD_NUMBER = 11
  final val DEVICES_FIELD_NUMBER = 6
  @transient
  private[tfprof_log] val _typemapper_acceleratorExecs: _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ExecProfile.AcceleratorExecsEntry, (_root_.scala.Predef.String, tensorboard.tfprof_log.ExecTime)] = implicitly[_root_.scalapb.TypeMapper[tensorboard.tfprof_log.ExecProfile.AcceleratorExecsEntry, (_root_.scala.Predef.String, tensorboard.tfprof_log.ExecTime)]]
  @transient
  private[tfprof_log] val _typemapper_cpuExecs: _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ExecProfile.CpuExecsEntry, (_root_.scala.Predef.String, tensorboard.tfprof_log.ExecTime)] = implicitly[_root_.scalapb.TypeMapper[tensorboard.tfprof_log.ExecProfile.CpuExecsEntry, (_root_.scala.Predef.String, tensorboard.tfprof_log.ExecTime)]]
  def of(
    runCount: _root_.scala.Long,
    allStartMicros: _root_.scala.Long,
    latestEndMicros: _root_.scala.Long,
    acceleratorExecs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, tensorboard.tfprof_log.ExecTime],
    cpuExecs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, tensorboard.tfprof_log.ExecTime],
    memoryExecs: _root_.scala.Seq[tensorboard.tfprof_log.ExecMemory],
    allocations: _root_.scala.Seq[org.tensorflow.framework.step_stats.AllocationRecord],
    devices: _root_.scala.Seq[_root_.scala.Predef.String]
  ): _root_.tensorboard.tfprof_log.ExecProfile = _root_.tensorboard.tfprof_log.ExecProfile(
    runCount,
    allStartMicros,
    latestEndMicros,
    acceleratorExecs,
    cpuExecs,
    memoryExecs,
    allocations,
    devices
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.ExecProfile])
}
