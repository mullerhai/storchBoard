// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorboard.tfprof_log

object TfprofLogProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    org.tensorflow.framework.attr_value.AttrValueProto,
    org.tensorflow.framework.step_stats.StepStatsProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      tensorboard.tfprof_log.CodeDef,
      tensorboard.tfprof_log.OpLogEntry,
      tensorboard.tfprof_log.OpLogProto,
      tensorboard.tfprof_log.ProfileProto,
      tensorboard.tfprof_log.ProfileNode,
      tensorboard.tfprof_log.ExecProfile,
      tensorboard.tfprof_log.ExecTime,
      tensorboard.tfprof_log.ExecMemory,
      tensorboard.tfprof_log.Tuple,
      tensorboard.tfprof_log.Memory
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """Cil0ZW5zb3Jib2FyZC9jb21wYXQvcHJvdG8vdGZwcm9mX2xvZy5wcm90bxILdGVuc29yYm9hcmQaKXRlbnNvcmJvYXJkL2Nvb
  XBhdC9wcm90by9hdHRyX3ZhbHVlLnByb3RvGil0ZW5zb3Jib2FyZC9jb21wYXQvcHJvdG8vc3RlcF9zdGF0cy5wcm90byKiAwoHQ
  29kZURlZhI/CgZ0cmFjZXMYASADKAsyGi50ZW5zb3Jib2FyZC5Db2RlRGVmLlRyYWNlQgviPwgSBnRyYWNlc1IGdHJhY2VzGtUCC
  gVUcmFjZRIfCgRmaWxlGAEgASgJQgsYAeI/BhIEZmlsZVIEZmlsZRIkCgdmaWxlX2lkGAYgASgDQgviPwgSBmZpbGVJZFIGZmlsZ
  UlkEiMKBmxpbmVubxgCIAEoBUIL4j8IEgZsaW5lbm9SBmxpbmVubxIrCghmdW5jdGlvbhgDIAEoCUIPGAHiPwoSCGZ1bmN0aW9uU
  ghmdW5jdGlvbhIwCgtmdW5jdGlvbl9pZBgHIAEoA0IP4j8MEgpmdW5jdGlvbklkUgpmdW5jdGlvbklkEh8KBGxpbmUYBCABKAlCC
  xgB4j8GEgRsaW5lUgRsaW5lEiQKB2xpbmVfaWQYCCABKANCC+I/CBIGbGluZUlkUgZsaW5lSWQSOgoPZnVuY19zdGFydF9saW5lG
  AUgASgFQhLiPw8SDWZ1bmNTdGFydExpbmVSDWZ1bmNTdGFydExpbmUiuAEKCk9wTG9nRW50cnkSHQoEbmFtZRgBIAEoCUIJ4j8GE
  gRuYW1lUgRuYW1lEioKCWZsb2F0X29wcxgCIAEoA0IN4j8KEghmbG9hdE9wc1IIZmxvYXRPcHMSIAoFdHlwZXMYAyADKAlCCuI/B
  xIFdHlwZXNSBXR5cGVzEj0KCGNvZGVfZGVmGAQgASgLMhQudGVuc29yYm9hcmQuQ29kZURlZkIM4j8JEgdjb2RlRGVmUgdjb2RlR
  GVmIogCCgpPcExvZ1Byb3RvEkkKC2xvZ19lbnRyaWVzGAEgAygLMhcudGVuc29yYm9hcmQuT3BMb2dFbnRyeUIP4j8MEgpsb2dFb
  nRyaWVzUgpsb2dFbnRyaWVzEloKDGlkX3RvX3N0cmluZxgCIAMoCzInLnRlbnNvcmJvYXJkLk9wTG9nUHJvdG8uSWRUb1N0cmluZ
  0VudHJ5Qg/iPwwSCmlkVG9TdHJpbmdSCmlkVG9TdHJpbmcaUwoPSWRUb1N0cmluZ0VudHJ5EhoKA2tleRgBIAEoA0II4j8FEgNrZ
  XlSA2tleRIgCgV2YWx1ZRgCIAEoCUIK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBIpUECgxQcm9maWxlUHJvdG8SRgoFbm9kZXMYASADK
  AsyJC50ZW5zb3Jib2FyZC5Qcm9maWxlUHJvdG8uTm9kZXNFbnRyeUIK4j8HEgVub2Rlc1IFbm9kZXMSKgoJaGFzX3RyYWNlGAIgA
  SgIQg3iPwoSCGhhc1RyYWNlUghoYXNUcmFjZRJSChdtaXNzX2FjY2VsZXJhdG9yX3N0cmVhbRgFIAEoCEIa4j8XEhVtaXNzQWNjZ
  WxlcmF0b3JTdHJlYW1SFW1pc3NBY2NlbGVyYXRvclN0cmVhbRIgCgVzdGVwcxgDIAMoA0IK4j8HEgVzdGVwc1IFc3RlcHMSXAoMa
  WRfdG9fc3RyaW5nGAQgAygLMikudGVuc29yYm9hcmQuUHJvZmlsZVByb3RvLklkVG9TdHJpbmdFbnRyeUIP4j8MEgppZFRvU3Rya
  W5nUgppZFRvU3RyaW5nGmgKCk5vZGVzRW50cnkSGgoDa2V5GAEgASgDQgjiPwUSA2tleVIDa2V5EjoKBXZhbHVlGAIgASgLMhgud
  GVuc29yYm9hcmQuUHJvZmlsZU5vZGVCCuI/BxIFdmFsdWVSBXZhbHVlOgI4ARpTCg9JZFRvU3RyaW5nRW50cnkSGgoDa2V5GAEgA
  SgDQgjiPwUSA2tleVIDa2V5EiAKBXZhbHVlGAIgASgJQgriPwcSBXZhbHVlUgV2YWx1ZToCOAEi/AwKC1Byb2ZpbGVOb2RlEh0KB
  G5hbWUYASABKAlCCeI/BhIEbmFtZVIEbmFtZRIXCgJvcBgJIAEoCUIH4j8EEgJvcFICb3ASFwoCaWQYDSABKANCB+I/BBICaWRSA
  mlkEkkKBmlucHV0cxgCIAMoCzIkLnRlbnNvcmJvYXJkLlByb2ZpbGVOb2RlLklucHV0c0VudHJ5QgviPwgSBmlucHV0c1IGaW5wd
  XRzEl4KDGlucHV0X3NoYXBlcxgQIAMoCzIpLnRlbnNvcmJvYXJkLlByb2ZpbGVOb2RlLklucHV0U2hhcGVzRW50cnlCEOI/DRILa
  W5wdXRTaGFwZXNSC2lucHV0U2hhcGVzEk0KB291dHB1dHMYAyADKAsyJS50ZW5zb3Jib2FyZC5Qcm9maWxlTm9kZS5PdXRwdXRzR
  W50cnlCDOI/CRIHb3V0cHV0c1IHb3V0cHV0cxJiCg1vdXRwdXRfc2hhcGVzGA8gAygLMioudGVuc29yYm9hcmQuUHJvZmlsZU5vZ
  GUuT3V0cHV0U2hhcGVzRW50cnlCEeI/DhIMb3V0cHV0U2hhcGVzUgxvdXRwdXRTaGFwZXMSawoQc3JjX291dHB1dF9pbmRleBgOI
  AMoCzIsLnRlbnNvcmJvYXJkLlByb2ZpbGVOb2RlLlNyY091dHB1dEluZGV4RW50cnlCE+I/EBIOc3JjT3V0cHV0SW5kZXhSDnNyY
  091dHB1dEluZGV4EiAKBXNoYXBlGAQgAygDQgriPwcSBXNoYXBlUgVzaGFwZRInCghvcF90eXBlcxgFIAMoCUIM4j8JEgdvcFR5c
  GVzUgdvcFR5cGVzEj8KEGNhbm9uaWNhbF9kZXZpY2UYBiABKAlCFOI/ERIPY2Fub25pY2FsRGV2aWNlUg9jYW5vbmljYWxEZXZpY
  2USMAoLaG9zdF9kZXZpY2UYByABKAlCD+I/DBIKaG9zdERldmljZVIKaG9zdERldmljZRIqCglmbG9hdF9vcHMYCCABKANCDeI/C
  hIIZmxvYXRPcHNSCGZsb2F0T3BzEjYKBXRyYWNlGAogASgLMhQudGVuc29yYm9hcmQuQ29kZURlZkIK4j8HEgV0cmFjZVIFdHJhY
  2USRQoFYXR0cnMYCyADKAsyIy50ZW5zb3Jib2FyZC5Qcm9maWxlTm9kZS5BdHRyc0VudHJ5QgriPwcSBWF0dHJzUgVhdHRycxJFC
  gVleGVjcxgMIAMoCzIjLnRlbnNvcmJvYXJkLlByb2ZpbGVOb2RlLkV4ZWNzRW50cnlCCuI/BxIFZXhlY3NSBWV4ZWNzGk8KC0luc
  HV0c0VudHJ5EhoKA2tleRgBIAEoBUII4j8FEgNrZXlSA2tleRIgCgV2YWx1ZRgCIAEoA0IK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBG
  mgKEElucHV0U2hhcGVzRW50cnkSGgoDa2V5GAEgASgFQgjiPwUSA2tleVIDa2V5EjQKBXZhbHVlGAIgASgLMhIudGVuc29yYm9hc
  mQuVHVwbGVCCuI/BxIFdmFsdWVSBXZhbHVlOgI4ARpQCgxPdXRwdXRzRW50cnkSGgoDa2V5GAEgASgFQgjiPwUSA2tleVIDa2V5E
  iAKBXZhbHVlGAIgASgDQgriPwcSBXZhbHVlUgV2YWx1ZToCOAEaaQoRT3V0cHV0U2hhcGVzRW50cnkSGgoDa2V5GAEgASgFQgjiP
  wUSA2tleVIDa2V5EjQKBXZhbHVlGAIgASgLMhIudGVuc29yYm9hcmQuVHVwbGVCCuI/BxIFdmFsdWVSBXZhbHVlOgI4ARpXChNTc
  mNPdXRwdXRJbmRleEVudHJ5EhoKA2tleRgBIAEoA0II4j8FEgNrZXlSA2tleRIgCgV2YWx1ZRgCIAEoBUIK4j8HEgV2YWx1ZVIFd
  mFsdWU6AjgBGmYKCkF0dHJzRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5EjgKBXZhbHVlGAIgASgLMhYudGVuc29yY
  m9hcmQuQXR0clZhbHVlQgriPwcSBXZhbHVlUgV2YWx1ZToCOAEaaAoKRXhlY3NFbnRyeRIaCgNrZXkYASABKANCCOI/BRIDa2V5U
  gNrZXkSOgoFdmFsdWUYAiABKAsyGC50ZW5zb3Jib2FyZC5FeGVjUHJvZmlsZUIK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBIqcGCgtFe
  GVjUHJvZmlsZRIqCglydW5fY291bnQYASABKANCDeI/ChIIcnVuQ291bnRSCHJ1bkNvdW50Ej0KEGFsbF9zdGFydF9taWNyb3MYA
  iABKANCE+I/EBIOYWxsU3RhcnRNaWNyb3NSDmFsbFN0YXJ0TWljcm9zEkAKEWxhdGVzdF9lbmRfbWljcm9zGAMgASgDQhTiPxESD
  2xhdGVzdEVuZE1pY3Jvc1IPbGF0ZXN0RW5kTWljcm9zEnIKEWFjY2VsZXJhdG9yX2V4ZWNzGAQgAygLMi4udGVuc29yYm9hcmQuR
  XhlY1Byb2ZpbGUuQWNjZWxlcmF0b3JFeGVjc0VudHJ5QhXiPxISEGFjY2VsZXJhdG9yRXhlY3NSEGFjY2VsZXJhdG9yRXhlY3MSU
  goJY3B1X2V4ZWNzGAUgAygLMiYudGVuc29yYm9hcmQuRXhlY1Byb2ZpbGUuQ3B1RXhlY3NFbnRyeUIN4j8KEghjcHVFeGVjc1IIY
  3B1RXhlY3MSTAoMbWVtb3J5X2V4ZWNzGAcgAygLMhcudGVuc29yYm9hcmQuRXhlY01lbW9yeUIQ4j8NEgttZW1vcnlFeGVjc1ILb
  WVtb3J5RXhlY3MSUQoLYWxsb2NhdGlvbnMYCyADKAsyHS50ZW5zb3Jib2FyZC5BbGxvY2F0aW9uUmVjb3JkQhDiPw0SC2FsbG9jY
  XRpb25zUgthbGxvY2F0aW9ucxImCgdkZXZpY2VzGAYgAygJQgziPwkSB2RldmljZXNSB2RldmljZXMacAoVQWNjZWxlcmF0b3JFe
  GVjc0VudHJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRI3CgV2YWx1ZRgCIAEoCzIVLnRlbnNvcmJvYXJkLkV4ZWNUaW1lQ
  griPwcSBXZhbHVlUgV2YWx1ZToCOAEaaAoNQ3B1RXhlY3NFbnRyeRIaCgNrZXkYASABKAlCCOI/BRIDa2V5UgNrZXkSNwoFdmFsd
  WUYAiABKAsyFS50ZW5zb3Jib2FyZC5FeGVjVGltZUIK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBIkAKCEV4ZWNUaW1lEjQKBXRpbWVzG
  AEgAygLMhIudGVuc29yYm9hcmQuVHVwbGVCCuI/BxIFdGltZXNSBXRpbWVzIv0GCgpFeGVjTWVtb3J5EjYKDW1lbW9yeV9taWNyb
  3MYASABKANCEeI/DhIMbWVtb3J5TWljcm9zUgxtZW1vcnlNaWNyb3MSOgoPaG9zdF90ZW1wX2J5dGVzGAIgASgDQhLiPw8SDWhvc
  3RUZW1wQnl0ZXNSDWhvc3RUZW1wQnl0ZXMSTAoVaG9zdF9wZXJzaXN0ZW50X2J5dGVzGAMgASgDQhjiPxUSE2hvc3RQZXJzaXN0Z
  W50Qnl0ZXNSE2hvc3RQZXJzaXN0ZW50Qnl0ZXMSTwoWYWNjZWxlcmF0b3JfdGVtcF9ieXRlcxgEIAEoA0IZ4j8WEhRhY2NlbGVyY
  XRvclRlbXBCeXRlc1IUYWNjZWxlcmF0b3JUZW1wQnl0ZXMSYQocYWNjZWxlcmF0b3JfcGVyc2lzdGVudF9ieXRlcxgFIAEoA0If4
  j8cEhphY2NlbGVyYXRvclBlcnNpc3RlbnRCeXRlc1IaYWNjZWxlcmF0b3JQZXJzaXN0ZW50Qnl0ZXMSPAoPcmVxdWVzdGVkX2J5d
  GVzGAYgASgDQhPiPxASDnJlcXVlc3RlZEJ5dGVzUg5yZXF1ZXN0ZWRCeXRlcxItCgpwZWFrX2J5dGVzGAcgASgDQg7iPwsSCXBlY
  WtCeXRlc1IJcGVha0J5dGVzEjkKDnJlc2lkdWFsX2J5dGVzGAggASgDQhLiPw8SDXJlc2lkdWFsQnl0ZXNSDXJlc2lkdWFsQnl0Z
  XMSMwoMb3V0cHV0X2J5dGVzGAkgASgDQhDiPw0SC291dHB1dEJ5dGVzUgtvdXRwdXRCeXRlcxJNChZhbGxvY2F0b3JfYnl0ZXNfa
  W5fdXNlGAogASgDQhjiPxUSE2FsbG9jYXRvckJ5dGVzSW5Vc2VSE2FsbG9jYXRvckJ5dGVzSW5Vc2USYQoNb3V0cHV0X21lbW9ye
  RgLIAMoCzIpLnRlbnNvcmJvYXJkLkV4ZWNNZW1vcnkuT3V0cHV0TWVtb3J5RW50cnlCEeI/DhIMb3V0cHV0TWVtb3J5UgxvdXRwd
  XRNZW1vcnkaagoRT3V0cHV0TWVtb3J5RW50cnkSGgoDa2V5GAEgASgFQgjiPwUSA2tleVIDa2V5EjUKBXZhbHVlGAIgASgLMhMud
  GVuc29yYm9hcmQuTWVtb3J5QgriPwcSBXZhbHVlUgV2YWx1ZToCOAEiPAoFVHVwbGUSMwoMaW50NjRfdmFsdWVzGAEgAygDQhDiP
  w0SC2ludDY0VmFsdWVzUgtpbnQ2NFZhbHVlcyJGCgZNZW1vcnkSIAoFYnl0ZXMYASABKANCCuI/BxIFYnl0ZXNSBWJ5dGVzEhoKA
  3B0chgCIAEoBEII4j8FEgNwdHJSA3B0ckJSWlBnaXRodWIuY29tL3RlbnNvcmZsb3cvdGVuc29yZmxvdy90ZW5zb3JmbG93L2dvL
  2NvcmUvcHJvZmlsZXIvcHJvdG9zX2FsbF9nb19wcm90b2IGcHJvdG8z"""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      org.tensorflow.framework.attr_value.AttrValueProto.javaDescriptor,
      org.tensorflow.framework.step_stats.StepStatsProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}