// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorboard.tfprof_log

import tensorflow.framework.attr_value
import tensorflow.framework.attr_value.AttrValue

/** @param name
  *   graph node name.
  * @param op
  *   graph operation type.
  * @param id
  *   A unique id for the node.
  * @param srcOutputIndex
  *   A map from source node id to its output index to current node.
  */
@SerialVersionUID(0L)
final case class ProfileNode(
                              name: _root_.scala.Predef.String = "",
                              op: _root_.scala.Predef.String = "",
                              id: _root_.scala.Long = 0L,
                              inputs: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Long] = _root_.scala.collection.immutable.Map.empty,
                              inputShapes: _root_.scala.collection.immutable.Map[_root_.scala.Int, tensorboard.tfprof_log.Tuple] = _root_.scala.collection.immutable.Map.empty,
                              outputs: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Long] = _root_.scala.collection.immutable.Map.empty,
                              outputShapes: _root_.scala.collection.immutable.Map[_root_.scala.Int, tensorboard.tfprof_log.Tuple] = _root_.scala.collection.immutable.Map.empty,
                              srcOutputIndex: _root_.scala.collection.immutable.Map[_root_.scala.Long, _root_.scala.Int] = _root_.scala.collection.immutable.Map.empty,
                              shape: _root_.scala.Seq[_root_.scala.Long] = _root_.scala.Seq.empty,
                              opTypes: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
                              canonicalDevice: _root_.scala.Predef.String = "",
                              hostDevice: _root_.scala.Predef.String = "",
                              floatOps: _root_.scala.Long = 0L,
                              trace: _root_.scala.Option[tensorboard.tfprof_log.CodeDef] = _root_.scala.None,
                              attrs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, AttrValue] = _root_.scala.collection.immutable.Map.empty,
                              execs: _root_.scala.collection.immutable.Map[_root_.scala.Long, tensorboard.tfprof_log.ExecProfile] = _root_.scala.collection.immutable.Map.empty,
                              unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ProfileNode] {
    private[this] def shapeSerializedSize = {
      if (__shapeSerializedSizeField == 0) __shapeSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        shape.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt64SizeNoTag(__i))
        __s
      }
      __shapeSerializedSizeField
    }
    @transient private[this] var __shapeSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = name
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = op
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, __value)
        }
      };
      
      {
        val __value = id
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(13, __value)
        }
      };
      inputs.foreach { __item =>
        val __value = tensorboard.tfprof_log.ProfileNode._typemapper_inputs.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      inputShapes.foreach { __item =>
        val __value = tensorboard.tfprof_log.ProfileNode._typemapper_inputShapes.toBase(__item)
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      outputs.foreach { __item =>
        val __value = tensorboard.tfprof_log.ProfileNode._typemapper_outputs.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      outputShapes.foreach { __item =>
        val __value = tensorboard.tfprof_log.ProfileNode._typemapper_outputShapes.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      srcOutputIndex.foreach { __item =>
        val __value = tensorboard.tfprof_log.ProfileNode._typemapper_srcOutputIndex.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (shape.nonEmpty) {
        val __localsize = shapeSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      opTypes.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
      }
      
      {
        val __value = canonicalDevice
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
        }
      };
      
      {
        val __value = hostDevice
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
        }
      };
      
      {
        val __value = floatOps
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(8, __value)
        }
      };
      if (trace.isDefined) {
        val __value = trace.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      attrs.foreach { __item =>
        val __value = tensorboard.tfprof_log.ProfileNode._typemapper_attrs.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      execs.foreach { __item =>
        val __value = tensorboard.tfprof_log.ProfileNode._typemapper_execs.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = name
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      inputs.foreach { __v =>
        val __m = tensorboard.tfprof_log.ProfileNode._typemapper_inputs.toBase(__v)
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      outputs.foreach { __v =>
        val __m = tensorboard.tfprof_log.ProfileNode._typemapper_outputs.toBase(__v)
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      if (shape.nonEmpty) {
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(shapeSerializedSize)
        shape.foreach(_output__.writeInt64NoTag)
      };
      opTypes.foreach { __v =>
        val __m = __v
        _output__.writeString(5, __m)
      };
      {
        val __v = canonicalDevice
        if (!__v.isEmpty) {
          _output__.writeString(6, __v)
        }
      };
      {
        val __v = hostDevice
        if (!__v.isEmpty) {
          _output__.writeString(7, __v)
        }
      };
      {
        val __v = floatOps
        if (__v != 0L) {
          _output__.writeInt64(8, __v)
        }
      };
      {
        val __v = op
        if (!__v.isEmpty) {
          _output__.writeString(9, __v)
        }
      };
      trace.foreach { __v =>
        val __m = __v
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      attrs.foreach { __v =>
        val __m = tensorboard.tfprof_log.ProfileNode._typemapper_attrs.toBase(__v)
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      execs.foreach { __v =>
        val __m = tensorboard.tfprof_log.ProfileNode._typemapper_execs.toBase(__v)
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = id
        if (__v != 0L) {
          _output__.writeInt64(13, __v)
        }
      };
      srcOutputIndex.foreach { __v =>
        val __m = tensorboard.tfprof_log.ProfileNode._typemapper_srcOutputIndex.toBase(__v)
        _output__.writeTag(14, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      outputShapes.foreach { __v =>
        val __m = tensorboard.tfprof_log.ProfileNode._typemapper_outputShapes.toBase(__v)
        _output__.writeTag(15, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      inputShapes.foreach { __v =>
        val __m = tensorboard.tfprof_log.ProfileNode._typemapper_inputShapes.toBase(__v)
        _output__.writeTag(16, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withName(__v: _root_.scala.Predef.String): ProfileNode = copy(name = __v)
    def withOp(__v: _root_.scala.Predef.String): ProfileNode = copy(op = __v)
    def withId(__v: _root_.scala.Long): ProfileNode = copy(id = __v)
    def clearInputs = copy(inputs = _root_.scala.collection.immutable.Map.empty)
    def addInputs(__vs: (_root_.scala.Int, _root_.scala.Long) *): ProfileNode = addAllInputs(__vs)
    def addAllInputs(__vs: Iterable[(_root_.scala.Int, _root_.scala.Long)]): ProfileNode = copy(inputs = inputs ++ __vs)
    def withInputs(__v: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Long]): ProfileNode = copy(inputs = __v)
    def clearInputShapes = copy(inputShapes = _root_.scala.collection.immutable.Map.empty)
    def addInputShapes(__vs: (_root_.scala.Int, tensorboard.tfprof_log.Tuple) *): ProfileNode = addAllInputShapes(__vs)
    def addAllInputShapes(__vs: Iterable[(_root_.scala.Int, tensorboard.tfprof_log.Tuple)]): ProfileNode = copy(inputShapes = inputShapes ++ __vs)
    def withInputShapes(__v: _root_.scala.collection.immutable.Map[_root_.scala.Int, tensorboard.tfprof_log.Tuple]): ProfileNode = copy(inputShapes = __v)
    def clearOutputs = copy(outputs = _root_.scala.collection.immutable.Map.empty)
    def addOutputs(__vs: (_root_.scala.Int, _root_.scala.Long) *): ProfileNode = addAllOutputs(__vs)
    def addAllOutputs(__vs: Iterable[(_root_.scala.Int, _root_.scala.Long)]): ProfileNode = copy(outputs = outputs ++ __vs)
    def withOutputs(__v: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Long]): ProfileNode = copy(outputs = __v)
    def clearOutputShapes = copy(outputShapes = _root_.scala.collection.immutable.Map.empty)
    def addOutputShapes(__vs: (_root_.scala.Int, tensorboard.tfprof_log.Tuple) *): ProfileNode = addAllOutputShapes(__vs)
    def addAllOutputShapes(__vs: Iterable[(_root_.scala.Int, tensorboard.tfprof_log.Tuple)]): ProfileNode = copy(outputShapes = outputShapes ++ __vs)
    def withOutputShapes(__v: _root_.scala.collection.immutable.Map[_root_.scala.Int, tensorboard.tfprof_log.Tuple]): ProfileNode = copy(outputShapes = __v)
    def clearSrcOutputIndex = copy(srcOutputIndex = _root_.scala.collection.immutable.Map.empty)
    def addSrcOutputIndex(__vs: (_root_.scala.Long, _root_.scala.Int) *): ProfileNode = addAllSrcOutputIndex(__vs)
    def addAllSrcOutputIndex(__vs: Iterable[(_root_.scala.Long, _root_.scala.Int)]): ProfileNode = copy(srcOutputIndex = srcOutputIndex ++ __vs)
    def withSrcOutputIndex(__v: _root_.scala.collection.immutable.Map[_root_.scala.Long, _root_.scala.Int]): ProfileNode = copy(srcOutputIndex = __v)
    def clearShape = copy(shape = _root_.scala.Seq.empty)
    def addShape(__vs: _root_.scala.Long *): ProfileNode = addAllShape(__vs)
    def addAllShape(__vs: Iterable[_root_.scala.Long]): ProfileNode = copy(shape = shape ++ __vs)
    def withShape(__v: _root_.scala.Seq[_root_.scala.Long]): ProfileNode = copy(shape = __v)
    def clearOpTypes = copy(opTypes = _root_.scala.Seq.empty)
    def addOpTypes(__vs: _root_.scala.Predef.String *): ProfileNode = addAllOpTypes(__vs)
    def addAllOpTypes(__vs: Iterable[_root_.scala.Predef.String]): ProfileNode = copy(opTypes = opTypes ++ __vs)
    def withOpTypes(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ProfileNode = copy(opTypes = __v)
    def withCanonicalDevice(__v: _root_.scala.Predef.String): ProfileNode = copy(canonicalDevice = __v)
    def withHostDevice(__v: _root_.scala.Predef.String): ProfileNode = copy(hostDevice = __v)
    def withFloatOps(__v: _root_.scala.Long): ProfileNode = copy(floatOps = __v)
    def getTrace: tensorboard.tfprof_log.CodeDef = trace.getOrElse(tensorboard.tfprof_log.CodeDef.defaultInstance)
    def clearTrace: ProfileNode = copy(trace = _root_.scala.None)
    def withTrace(__v: tensorboard.tfprof_log.CodeDef): ProfileNode = copy(trace = Option(__v))
    def clearAttrs = copy(attrs = _root_.scala.collection.immutable.Map.empty)
    def addAttrs(__vs: (_root_.scala.Predef.String, AttrValue) *): ProfileNode = addAllAttrs(__vs)
    def addAllAttrs(__vs: Iterable[(_root_.scala.Predef.String, AttrValue)]): ProfileNode = copy(attrs = attrs ++ __vs)
    def withAttrs(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, AttrValue]): ProfileNode = copy(attrs = __v)
    def clearExecs = copy(execs = _root_.scala.collection.immutable.Map.empty)
    def addExecs(__vs: (_root_.scala.Long, tensorboard.tfprof_log.ExecProfile) *): ProfileNode = addAllExecs(__vs)
    def addAllExecs(__vs: Iterable[(_root_.scala.Long, tensorboard.tfprof_log.ExecProfile)]): ProfileNode = copy(execs = execs ++ __vs)
    def withExecs(__v: _root_.scala.collection.immutable.Map[_root_.scala.Long, tensorboard.tfprof_log.ExecProfile]): ProfileNode = copy(execs = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 9 => {
          val __t = op
          if (__t != "") __t else null
        }
        case 13 => {
          val __t = id
          if (__t != 0L) __t else null
        }
        case 2 => inputs.iterator.map(tensorboard.tfprof_log.ProfileNode._typemapper_inputs.toBase(_)).toSeq
        case 16 => inputShapes.iterator.map(tensorboard.tfprof_log.ProfileNode._typemapper_inputShapes.toBase(_)).toSeq
        case 3 => outputs.iterator.map(tensorboard.tfprof_log.ProfileNode._typemapper_outputs.toBase(_)).toSeq
        case 15 => outputShapes.iterator.map(tensorboard.tfprof_log.ProfileNode._typemapper_outputShapes.toBase(_)).toSeq
        case 14 => srcOutputIndex.iterator.map(tensorboard.tfprof_log.ProfileNode._typemapper_srcOutputIndex.toBase(_)).toSeq
        case 4 => shape
        case 5 => opTypes
        case 6 => {
          val __t = canonicalDevice
          if (__t != "") __t else null
        }
        case 7 => {
          val __t = hostDevice
          if (__t != "") __t else null
        }
        case 8 => {
          val __t = floatOps
          if (__t != 0L) __t else null
        }
        case 10 => trace.orNull
        case 11 => attrs.iterator.map(tensorboard.tfprof_log.ProfileNode._typemapper_attrs.toBase(_)).toSeq
        case 12 => execs.iterator.map(tensorboard.tfprof_log.ProfileNode._typemapper_execs.toBase(_)).toSeq
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 9 => _root_.scalapb.descriptors.PString(op)
        case 13 => _root_.scalapb.descriptors.PLong(id)
        case 2 => _root_.scalapb.descriptors.PRepeated(inputs.iterator.map(tensorboard.tfprof_log.ProfileNode._typemapper_inputs.toBase(_).toPMessage).toVector)
        case 16 => _root_.scalapb.descriptors.PRepeated(inputShapes.iterator.map(tensorboard.tfprof_log.ProfileNode._typemapper_inputShapes.toBase(_).toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(outputs.iterator.map(tensorboard.tfprof_log.ProfileNode._typemapper_outputs.toBase(_).toPMessage).toVector)
        case 15 => _root_.scalapb.descriptors.PRepeated(outputShapes.iterator.map(tensorboard.tfprof_log.ProfileNode._typemapper_outputShapes.toBase(_).toPMessage).toVector)
        case 14 => _root_.scalapb.descriptors.PRepeated(srcOutputIndex.iterator.map(tensorboard.tfprof_log.ProfileNode._typemapper_srcOutputIndex.toBase(_).toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(shape.iterator.map(_root_.scalapb.descriptors.PLong(_)).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(opTypes.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 6 => _root_.scalapb.descriptors.PString(canonicalDevice)
        case 7 => _root_.scalapb.descriptors.PString(hostDevice)
        case 8 => _root_.scalapb.descriptors.PLong(floatOps)
        case 10 => trace.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => _root_.scalapb.descriptors.PRepeated(attrs.iterator.map(tensorboard.tfprof_log.ProfileNode._typemapper_attrs.toBase(_).toPMessage).toVector)
        case 12 => _root_.scalapb.descriptors.PRepeated(execs.iterator.map(tensorboard.tfprof_log.ProfileNode._typemapper_execs.toBase(_).toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tensorboard.tfprof_log.ProfileNode.type = tensorboard.tfprof_log.ProfileNode
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.ProfileNode])
}

object ProfileNode extends scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.ProfileNode] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.ProfileNode] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.tfprof_log.ProfileNode = {
    var __name: _root_.scala.Predef.String = ""
    var __op: _root_.scala.Predef.String = ""
    var __id: _root_.scala.Long = 0L
    val __inputs: _root_.scala.collection.mutable.Builder[(_root_.scala.Int, _root_.scala.Long), _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Long]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Int, _root_.scala.Long]
    val __inputShapes: _root_.scala.collection.mutable.Builder[(_root_.scala.Int, tensorboard.tfprof_log.Tuple), _root_.scala.collection.immutable.Map[_root_.scala.Int, tensorboard.tfprof_log.Tuple]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Int, tensorboard.tfprof_log.Tuple]
    val __outputs: _root_.scala.collection.mutable.Builder[(_root_.scala.Int, _root_.scala.Long), _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Long]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Int, _root_.scala.Long]
    val __outputShapes: _root_.scala.collection.mutable.Builder[(_root_.scala.Int, tensorboard.tfprof_log.Tuple), _root_.scala.collection.immutable.Map[_root_.scala.Int, tensorboard.tfprof_log.Tuple]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Int, tensorboard.tfprof_log.Tuple]
    val __srcOutputIndex: _root_.scala.collection.mutable.Builder[(_root_.scala.Long, _root_.scala.Int), _root_.scala.collection.immutable.Map[_root_.scala.Long, _root_.scala.Int]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Long, _root_.scala.Int]
    val __shape: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long]
    val __opTypes: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __canonicalDevice: _root_.scala.Predef.String = ""
    var __hostDevice: _root_.scala.Predef.String = ""
    var __floatOps: _root_.scala.Long = 0L
    var __trace: _root_.scala.Option[tensorboard.tfprof_log.CodeDef] = _root_.scala.None
    val __attrs: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, AttrValue), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, AttrValue]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, AttrValue]
    val __execs: _root_.scala.collection.mutable.Builder[(_root_.scala.Long, tensorboard.tfprof_log.ExecProfile), _root_.scala.collection.immutable.Map[_root_.scala.Long, tensorboard.tfprof_log.ExecProfile]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Long, tensorboard.tfprof_log.ExecProfile]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __name = _input__.readStringRequireUtf8()
        case 74 =>
          __op = _input__.readStringRequireUtf8()
        case 104 =>
          __id = _input__.readInt64()
        case 18 =>
          __inputs += tensorboard.tfprof_log.ProfileNode._typemapper_inputs.toCustom(_root_.scalapb.LiteParser.readMessage[tensorboard.tfprof_log.ProfileNode.InputsEntry](_input__))
        case 130 =>
          __inputShapes += tensorboard.tfprof_log.ProfileNode._typemapper_inputShapes.toCustom(_root_.scalapb.LiteParser.readMessage[tensorboard.tfprof_log.ProfileNode.InputShapesEntry](_input__))
        case 26 =>
          __outputs += tensorboard.tfprof_log.ProfileNode._typemapper_outputs.toCustom(_root_.scalapb.LiteParser.readMessage[tensorboard.tfprof_log.ProfileNode.OutputsEntry](_input__))
        case 122 =>
          __outputShapes += tensorboard.tfprof_log.ProfileNode._typemapper_outputShapes.toCustom(_root_.scalapb.LiteParser.readMessage[tensorboard.tfprof_log.ProfileNode.OutputShapesEntry](_input__))
        case 114 =>
          __srcOutputIndex += tensorboard.tfprof_log.ProfileNode._typemapper_srcOutputIndex.toCustom(_root_.scalapb.LiteParser.readMessage[tensorboard.tfprof_log.ProfileNode.SrcOutputIndexEntry](_input__))
        case 32 =>
          __shape += _input__.readInt64()
        case 34 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __shape += _input__.readInt64()
          }
          _input__.popLimit(oldLimit)
        }
        case 42 =>
          __opTypes += _input__.readStringRequireUtf8()
        case 50 =>
          __canonicalDevice = _input__.readStringRequireUtf8()
        case 58 =>
          __hostDevice = _input__.readStringRequireUtf8()
        case 64 =>
          __floatOps = _input__.readInt64()
        case 82 =>
          __trace = _root_.scala.Option(__trace.fold(_root_.scalapb.LiteParser.readMessage[tensorboard.tfprof_log.CodeDef](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 90 =>
          __attrs += tensorboard.tfprof_log.ProfileNode._typemapper_attrs.toCustom(_root_.scalapb.LiteParser.readMessage[tensorboard.tfprof_log.ProfileNode.AttrsEntry](_input__))
        case 98 =>
          __execs += tensorboard.tfprof_log.ProfileNode._typemapper_execs.toCustom(_root_.scalapb.LiteParser.readMessage[tensorboard.tfprof_log.ProfileNode.ExecsEntry](_input__))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tensorboard.tfprof_log.ProfileNode(
        name = __name,
        op = __op,
        id = __id,
        inputs = __inputs.result(),
        inputShapes = __inputShapes.result(),
        outputs = __outputs.result(),
        outputShapes = __outputShapes.result(),
        srcOutputIndex = __srcOutputIndex.result(),
        shape = __shape.result(),
        opTypes = __opTypes.result(),
        canonicalDevice = __canonicalDevice,
        hostDevice = __hostDevice,
        floatOps = __floatOps,
        trace = __trace,
        attrs = __attrs.result(),
        execs = __execs.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.tfprof_log.ProfileNode] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tensorboard.tfprof_log.ProfileNode(
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        op = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        inputs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[tensorboard.tfprof_log.ProfileNode.InputsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(tensorboard.tfprof_log.ProfileNode._typemapper_inputs.toCustom(_)).toMap,
        inputShapes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).map(_.as[_root_.scala.Seq[tensorboard.tfprof_log.ProfileNode.InputShapesEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(tensorboard.tfprof_log.ProfileNode._typemapper_inputShapes.toCustom(_)).toMap,
        outputs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[tensorboard.tfprof_log.ProfileNode.OutputsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(tensorboard.tfprof_log.ProfileNode._typemapper_outputs.toCustom(_)).toMap,
        outputShapes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).map(_.as[_root_.scala.Seq[tensorboard.tfprof_log.ProfileNode.OutputShapesEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(tensorboard.tfprof_log.ProfileNode._typemapper_outputShapes.toCustom(_)).toMap,
        srcOutputIndex = __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).map(_.as[_root_.scala.Seq[tensorboard.tfprof_log.ProfileNode.SrcOutputIndexEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(tensorboard.tfprof_log.ProfileNode._typemapper_srcOutputIndex.toCustom(_)).toMap,
        shape = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[_root_.scala.Long]]).getOrElse(_root_.scala.Seq.empty),
        opTypes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        canonicalDevice = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        hostDevice = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        floatOps = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        trace = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[tensorboard.tfprof_log.CodeDef]]),
        attrs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Seq[tensorboard.tfprof_log.ProfileNode.AttrsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(tensorboard.tfprof_log.ProfileNode._typemapper_attrs.toCustom(_)).toMap,
        execs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Seq[tensorboard.tfprof_log.ProfileNode.ExecsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(tensorboard.tfprof_log.ProfileNode._typemapper_execs.toCustom(_)).toMap
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.tfprof_log.TfprofLogProto.javaDescriptor.getMessageTypes().get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.tfprof_log.TfprofLogProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = tensorboard.tfprof_log.ProfileNode.InputsEntry
      case 16 => __out = tensorboard.tfprof_log.ProfileNode.InputShapesEntry
      case 3 => __out = tensorboard.tfprof_log.ProfileNode.OutputsEntry
      case 15 => __out = tensorboard.tfprof_log.ProfileNode.OutputShapesEntry
      case 14 => __out = tensorboard.tfprof_log.ProfileNode.SrcOutputIndexEntry
      case 10 => __out = tensorboard.tfprof_log.CodeDef
      case 11 => __out = tensorboard.tfprof_log.ProfileNode.AttrsEntry
      case 12 => __out = tensorboard.tfprof_log.ProfileNode.ExecsEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.tensorboard.tfprof_log.ProfileNode.InputsEntry,
      _root_.tensorboard.tfprof_log.ProfileNode.InputShapesEntry,
      _root_.tensorboard.tfprof_log.ProfileNode.OutputsEntry,
      _root_.tensorboard.tfprof_log.ProfileNode.OutputShapesEntry,
      _root_.tensorboard.tfprof_log.ProfileNode.SrcOutputIndexEntry,
      _root_.tensorboard.tfprof_log.ProfileNode.AttrsEntry,
      _root_.tensorboard.tfprof_log.ProfileNode.ExecsEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tensorboard.tfprof_log.ProfileNode(
    name = "",
    op = "",
    id = 0L,
    inputs = _root_.scala.collection.immutable.Map.empty,
    inputShapes = _root_.scala.collection.immutable.Map.empty,
    outputs = _root_.scala.collection.immutable.Map.empty,
    outputShapes = _root_.scala.collection.immutable.Map.empty,
    srcOutputIndex = _root_.scala.collection.immutable.Map.empty,
    shape = _root_.scala.Seq.empty,
    opTypes = _root_.scala.Seq.empty,
    canonicalDevice = "",
    hostDevice = "",
    floatOps = 0L,
    trace = _root_.scala.None,
    attrs = _root_.scala.collection.immutable.Map.empty,
    execs = _root_.scala.collection.immutable.Map.empty
  )
  @SerialVersionUID(0L)
  final case class InputsEntry(
      key: _root_.scala.Int = 0,
      value: _root_.scala.Long = 0L,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[InputsEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
          }
        };
        
        {
          val __value = value
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != 0) {
            _output__.writeInt32(1, __v)
          }
        };
        {
          val __v = value
          if (__v != 0L) {
            _output__.writeInt64(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Int): InputsEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Long): InputsEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != 0) __t else null
          }
          case 2 => {
            val __t = value
            if (__t != 0L) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(key)
          case 2 => _root_.scalapb.descriptors.PLong(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: tensorboard.tfprof_log.ProfileNode.InputsEntry.type = tensorboard.tfprof_log.ProfileNode.InputsEntry
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.ProfileNode.InputsEntry])
  }
  
  object InputsEntry extends scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.ProfileNode.InputsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.ProfileNode.InputsEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.tfprof_log.ProfileNode.InputsEntry = {
      var __key: _root_.scala.Int = 0
      var __value: _root_.scala.Long = 0L
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __key = _input__.readInt32()
          case 16 =>
            __value = _input__.readInt64()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      tensorboard.tfprof_log.ProfileNode.InputsEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.tfprof_log.ProfileNode.InputsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        tensorboard.tfprof_log.ProfileNode.InputsEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.tfprof_log.ProfileNode.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.tfprof_log.ProfileNode.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = tensorboard.tfprof_log.ProfileNode.InputsEntry(
      key = 0,
      value = 0L
    )
    implicit class InputsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.tfprof_log.ProfileNode.InputsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.tfprof_log.ProfileNode.InputsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.InputsEntry, (_root_.scala.Int, _root_.scala.Long)] =
      _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.InputsEntry, (_root_.scala.Int, _root_.scala.Long)](__m => (__m.key, __m.value))(__p => tensorboard.tfprof_log.ProfileNode.InputsEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Int,
      value: _root_.scala.Long
    ): _root_.tensorboard.tfprof_log.ProfileNode.InputsEntry = _root_.tensorboard.tfprof_log.ProfileNode.InputsEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.ProfileNode.InputsEntry])
  }
  
  @SerialVersionUID(0L)
  final case class InputShapesEntry(
      key: _root_.scala.Int = 0,
      value: _root_.scala.Option[tensorboard.tfprof_log.Tuple] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[InputShapesEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != 0) {
            _output__.writeInt32(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Int): InputShapesEntry = copy(key = __v)
      def getValue: tensorboard.tfprof_log.Tuple = value.getOrElse(tensorboard.tfprof_log.Tuple.defaultInstance)
      def clearValue: InputShapesEntry = copy(value = _root_.scala.None)
      def withValue(__v: tensorboard.tfprof_log.Tuple): InputShapesEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != 0) __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: tensorboard.tfprof_log.ProfileNode.InputShapesEntry.type = tensorboard.tfprof_log.ProfileNode.InputShapesEntry
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.ProfileNode.InputShapesEntry])
  }
  
  object InputShapesEntry extends scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.ProfileNode.InputShapesEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.ProfileNode.InputShapesEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.tfprof_log.ProfileNode.InputShapesEntry = {
      var __key: _root_.scala.Int = 0
      var __value: _root_.scala.Option[tensorboard.tfprof_log.Tuple] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __key = _input__.readInt32()
          case 18 =>
            __value = _root_.scala.Option(__value.fold(_root_.scalapb.LiteParser.readMessage[tensorboard.tfprof_log.Tuple](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      tensorboard.tfprof_log.ProfileNode.InputShapesEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.tfprof_log.ProfileNode.InputShapesEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        tensorboard.tfprof_log.ProfileNode.InputShapesEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[tensorboard.tfprof_log.Tuple]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.tfprof_log.ProfileNode.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.tfprof_log.ProfileNode.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = tensorboard.tfprof_log.Tuple
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = tensorboard.tfprof_log.ProfileNode.InputShapesEntry(
      key = 0,
      value = _root_.scala.None
    )
    implicit class InputShapesEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.tfprof_log.ProfileNode.InputShapesEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.tfprof_log.ProfileNode.InputShapesEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.tfprof_log.Tuple] = field(_.getValue)((c_, f_) => c_.copy(value = _root_.scala.Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tensorboard.tfprof_log.Tuple]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.InputShapesEntry, (_root_.scala.Int, tensorboard.tfprof_log.Tuple)] =
      _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.InputShapesEntry, (_root_.scala.Int, tensorboard.tfprof_log.Tuple)](__m => (__m.key, __m.getValue))(__p => tensorboard.tfprof_log.ProfileNode.InputShapesEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Int,
      value: _root_.scala.Option[tensorboard.tfprof_log.Tuple]
    ): _root_.tensorboard.tfprof_log.ProfileNode.InputShapesEntry = _root_.tensorboard.tfprof_log.ProfileNode.InputShapesEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.ProfileNode.InputShapesEntry])
  }
  
  @SerialVersionUID(0L)
  final case class OutputsEntry(
      key: _root_.scala.Int = 0,
      value: _root_.scala.Long = 0L,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[OutputsEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
          }
        };
        
        {
          val __value = value
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != 0) {
            _output__.writeInt32(1, __v)
          }
        };
        {
          val __v = value
          if (__v != 0L) {
            _output__.writeInt64(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Int): OutputsEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Long): OutputsEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != 0) __t else null
          }
          case 2 => {
            val __t = value
            if (__t != 0L) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(key)
          case 2 => _root_.scalapb.descriptors.PLong(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: tensorboard.tfprof_log.ProfileNode.OutputsEntry.type = tensorboard.tfprof_log.ProfileNode.OutputsEntry
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.ProfileNode.OutputsEntry])
  }
  
  object OutputsEntry extends scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.ProfileNode.OutputsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.ProfileNode.OutputsEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.tfprof_log.ProfileNode.OutputsEntry = {
      var __key: _root_.scala.Int = 0
      var __value: _root_.scala.Long = 0L
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __key = _input__.readInt32()
          case 16 =>
            __value = _input__.readInt64()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      tensorboard.tfprof_log.ProfileNode.OutputsEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.tfprof_log.ProfileNode.OutputsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        tensorboard.tfprof_log.ProfileNode.OutputsEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.tfprof_log.ProfileNode.javaDescriptor.getNestedTypes().get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.tfprof_log.ProfileNode.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = tensorboard.tfprof_log.ProfileNode.OutputsEntry(
      key = 0,
      value = 0L
    )
    implicit class OutputsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.tfprof_log.ProfileNode.OutputsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.tfprof_log.ProfileNode.OutputsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.OutputsEntry, (_root_.scala.Int, _root_.scala.Long)] =
      _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.OutputsEntry, (_root_.scala.Int, _root_.scala.Long)](__m => (__m.key, __m.value))(__p => tensorboard.tfprof_log.ProfileNode.OutputsEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Int,
      value: _root_.scala.Long
    ): _root_.tensorboard.tfprof_log.ProfileNode.OutputsEntry = _root_.tensorboard.tfprof_log.ProfileNode.OutputsEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.ProfileNode.OutputsEntry])
  }
  
  @SerialVersionUID(0L)
  final case class OutputShapesEntry(
      key: _root_.scala.Int = 0,
      value: _root_.scala.Option[tensorboard.tfprof_log.Tuple] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[OutputShapesEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != 0) {
            _output__.writeInt32(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Int): OutputShapesEntry = copy(key = __v)
      def getValue: tensorboard.tfprof_log.Tuple = value.getOrElse(tensorboard.tfprof_log.Tuple.defaultInstance)
      def clearValue: OutputShapesEntry = copy(value = _root_.scala.None)
      def withValue(__v: tensorboard.tfprof_log.Tuple): OutputShapesEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != 0) __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: tensorboard.tfprof_log.ProfileNode.OutputShapesEntry.type = tensorboard.tfprof_log.ProfileNode.OutputShapesEntry
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.ProfileNode.OutputShapesEntry])
  }
  
  object OutputShapesEntry extends scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.ProfileNode.OutputShapesEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.ProfileNode.OutputShapesEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.tfprof_log.ProfileNode.OutputShapesEntry = {
      var __key: _root_.scala.Int = 0
      var __value: _root_.scala.Option[tensorboard.tfprof_log.Tuple] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __key = _input__.readInt32()
          case 18 =>
            __value = _root_.scala.Option(__value.fold(_root_.scalapb.LiteParser.readMessage[tensorboard.tfprof_log.Tuple](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      tensorboard.tfprof_log.ProfileNode.OutputShapesEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.tfprof_log.ProfileNode.OutputShapesEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        tensorboard.tfprof_log.ProfileNode.OutputShapesEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[tensorboard.tfprof_log.Tuple]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.tfprof_log.ProfileNode.javaDescriptor.getNestedTypes().get(3)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.tfprof_log.ProfileNode.scalaDescriptor.nestedMessages(3)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = tensorboard.tfprof_log.Tuple
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = tensorboard.tfprof_log.ProfileNode.OutputShapesEntry(
      key = 0,
      value = _root_.scala.None
    )
    implicit class OutputShapesEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.tfprof_log.ProfileNode.OutputShapesEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.tfprof_log.ProfileNode.OutputShapesEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.tfprof_log.Tuple] = field(_.getValue)((c_, f_) => c_.copy(value = _root_.scala.Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tensorboard.tfprof_log.Tuple]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.OutputShapesEntry, (_root_.scala.Int, tensorboard.tfprof_log.Tuple)] =
      _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.OutputShapesEntry, (_root_.scala.Int, tensorboard.tfprof_log.Tuple)](__m => (__m.key, __m.getValue))(__p => tensorboard.tfprof_log.ProfileNode.OutputShapesEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Int,
      value: _root_.scala.Option[tensorboard.tfprof_log.Tuple]
    ): _root_.tensorboard.tfprof_log.ProfileNode.OutputShapesEntry = _root_.tensorboard.tfprof_log.ProfileNode.OutputShapesEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.ProfileNode.OutputShapesEntry])
  }
  
  @SerialVersionUID(0L)
  final case class SrcOutputIndexEntry(
      key: _root_.scala.Long = 0L,
      value: _root_.scala.Int = 0,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SrcOutputIndexEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
          }
        };
        
        {
          val __value = value
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != 0L) {
            _output__.writeInt64(1, __v)
          }
        };
        {
          val __v = value
          if (__v != 0) {
            _output__.writeInt32(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Long): SrcOutputIndexEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Int): SrcOutputIndexEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != 0L) __t else null
          }
          case 2 => {
            val __t = value
            if (__t != 0) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PLong(key)
          case 2 => _root_.scalapb.descriptors.PInt(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: tensorboard.tfprof_log.ProfileNode.SrcOutputIndexEntry.type = tensorboard.tfprof_log.ProfileNode.SrcOutputIndexEntry
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.ProfileNode.SrcOutputIndexEntry])
  }
  
  object SrcOutputIndexEntry extends scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.ProfileNode.SrcOutputIndexEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.ProfileNode.SrcOutputIndexEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.tfprof_log.ProfileNode.SrcOutputIndexEntry = {
      var __key: _root_.scala.Long = 0L
      var __value: _root_.scala.Int = 0
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __key = _input__.readInt64()
          case 16 =>
            __value = _input__.readInt32()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      tensorboard.tfprof_log.ProfileNode.SrcOutputIndexEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.tfprof_log.ProfileNode.SrcOutputIndexEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        tensorboard.tfprof_log.ProfileNode.SrcOutputIndexEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.tfprof_log.ProfileNode.javaDescriptor.getNestedTypes().get(4)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.tfprof_log.ProfileNode.scalaDescriptor.nestedMessages(4)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = tensorboard.tfprof_log.ProfileNode.SrcOutputIndexEntry(
      key = 0L,
      value = 0
    )
    implicit class SrcOutputIndexEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.tfprof_log.ProfileNode.SrcOutputIndexEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.tfprof_log.ProfileNode.SrcOutputIndexEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.SrcOutputIndexEntry, (_root_.scala.Long, _root_.scala.Int)] =
      _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.SrcOutputIndexEntry, (_root_.scala.Long, _root_.scala.Int)](__m => (__m.key, __m.value))(__p => tensorboard.tfprof_log.ProfileNode.SrcOutputIndexEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Long,
      value: _root_.scala.Int
    ): _root_.tensorboard.tfprof_log.ProfileNode.SrcOutputIndexEntry = _root_.tensorboard.tfprof_log.ProfileNode.SrcOutputIndexEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.ProfileNode.SrcOutputIndexEntry])
  }
  
  @SerialVersionUID(0L)
  final case class AttrsEntry(
                               key: _root_.scala.Predef.String = "",
                               value: _root_.scala.Option[AttrValue] = _root_.scala.None,
                               unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AttrsEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): AttrsEntry = copy(key = __v)
      def getValue: AttrValue = value.getOrElse(attr_value.AttrValue.defaultInstance)
      def clearValue: AttrsEntry = copy(value = _root_.scala.None)
      def withValue(__v: AttrValue): AttrsEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: tensorboard.tfprof_log.ProfileNode.AttrsEntry.type = tensorboard.tfprof_log.ProfileNode.AttrsEntry
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.ProfileNode.AttrsEntry])
  }
  
  object AttrsEntry extends scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.ProfileNode.AttrsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.ProfileNode.AttrsEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.tfprof_log.ProfileNode.AttrsEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Option[AttrValue] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = _root_.scala.Option(__value.fold(_root_.scalapb.LiteParser.readMessage[AttrValue](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      tensorboard.tfprof_log.ProfileNode.AttrsEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.tfprof_log.ProfileNode.AttrsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        tensorboard.tfprof_log.ProfileNode.AttrsEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[AttrValue]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.tfprof_log.ProfileNode.javaDescriptor.getNestedTypes().get(5)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.tfprof_log.ProfileNode.scalaDescriptor.nestedMessages(5)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = attr_value.AttrValue
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = tensorboard.tfprof_log.ProfileNode.AttrsEntry(
      key = "",
      value = _root_.scala.None
    )
    implicit class AttrsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.tfprof_log.ProfileNode.AttrsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.tfprof_log.ProfileNode.AttrsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, AttrValue] = field(_.getValue)((c_, f_) => c_.copy(value = _root_.scala.Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[AttrValue]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.AttrsEntry, (_root_.scala.Predef.String, AttrValue)] =
      _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.AttrsEntry, (_root_.scala.Predef.String, AttrValue)](__m => (__m.key, __m.getValue))(__p => tensorboard.tfprof_log.ProfileNode.AttrsEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Option[AttrValue]
    ): _root_.tensorboard.tfprof_log.ProfileNode.AttrsEntry = _root_.tensorboard.tfprof_log.ProfileNode.AttrsEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.ProfileNode.AttrsEntry])
  }
  
  @SerialVersionUID(0L)
  final case class ExecsEntry(
      key: _root_.scala.Long = 0L,
      value: _root_.scala.Option[tensorboard.tfprof_log.ExecProfile] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ExecsEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != 0L) {
            _output__.writeInt64(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Long): ExecsEntry = copy(key = __v)
      def getValue: tensorboard.tfprof_log.ExecProfile = value.getOrElse(tensorboard.tfprof_log.ExecProfile.defaultInstance)
      def clearValue: ExecsEntry = copy(value = _root_.scala.None)
      def withValue(__v: tensorboard.tfprof_log.ExecProfile): ExecsEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != 0L) __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PLong(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: tensorboard.tfprof_log.ProfileNode.ExecsEntry.type = tensorboard.tfprof_log.ProfileNode.ExecsEntry
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.ProfileNode.ExecsEntry])
  }
  
  object ExecsEntry extends scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.ProfileNode.ExecsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.ProfileNode.ExecsEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.tfprof_log.ProfileNode.ExecsEntry = {
      var __key: _root_.scala.Long = 0L
      var __value: _root_.scala.Option[tensorboard.tfprof_log.ExecProfile] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __key = _input__.readInt64()
          case 18 =>
            __value = _root_.scala.Option(__value.fold(_root_.scalapb.LiteParser.readMessage[tensorboard.tfprof_log.ExecProfile](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      tensorboard.tfprof_log.ProfileNode.ExecsEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.tfprof_log.ProfileNode.ExecsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        tensorboard.tfprof_log.ProfileNode.ExecsEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[tensorboard.tfprof_log.ExecProfile]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.tfprof_log.ProfileNode.javaDescriptor.getNestedTypes().get(6)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.tfprof_log.ProfileNode.scalaDescriptor.nestedMessages(6)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = tensorboard.tfprof_log.ExecProfile
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = tensorboard.tfprof_log.ProfileNode.ExecsEntry(
      key = 0L,
      value = _root_.scala.None
    )
    implicit class ExecsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.tfprof_log.ProfileNode.ExecsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.tfprof_log.ProfileNode.ExecsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.tfprof_log.ExecProfile] = field(_.getValue)((c_, f_) => c_.copy(value = _root_.scala.Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tensorboard.tfprof_log.ExecProfile]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.ExecsEntry, (_root_.scala.Long, tensorboard.tfprof_log.ExecProfile)] =
      _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.ExecsEntry, (_root_.scala.Long, tensorboard.tfprof_log.ExecProfile)](__m => (__m.key, __m.getValue))(__p => tensorboard.tfprof_log.ProfileNode.ExecsEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Long,
      value: _root_.scala.Option[tensorboard.tfprof_log.ExecProfile]
    ): _root_.tensorboard.tfprof_log.ProfileNode.ExecsEntry = _root_.tensorboard.tfprof_log.ProfileNode.ExecsEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.ProfileNode.ExecsEntry])
  }
  
  implicit class ProfileNodeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.tfprof_log.ProfileNode]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.tfprof_log.ProfileNode](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def op: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.op)((c_, f_) => c_.copy(op = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def inputs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Long]] = field(_.inputs)((c_, f_) => c_.copy(inputs = f_))
    def inputShapes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Int, tensorboard.tfprof_log.Tuple]] = field(_.inputShapes)((c_, f_) => c_.copy(inputShapes = f_))
    def outputs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Long]] = field(_.outputs)((c_, f_) => c_.copy(outputs = f_))
    def outputShapes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Int, tensorboard.tfprof_log.Tuple]] = field(_.outputShapes)((c_, f_) => c_.copy(outputShapes = f_))
    def srcOutputIndex: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Long, _root_.scala.Int]] = field(_.srcOutputIndex)((c_, f_) => c_.copy(srcOutputIndex = f_))
    def shape: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Long]] = field(_.shape)((c_, f_) => c_.copy(shape = f_))
    def opTypes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.opTypes)((c_, f_) => c_.copy(opTypes = f_))
    def canonicalDevice: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.canonicalDevice)((c_, f_) => c_.copy(canonicalDevice = f_))
    def hostDevice: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.hostDevice)((c_, f_) => c_.copy(hostDevice = f_))
    def floatOps: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.floatOps)((c_, f_) => c_.copy(floatOps = f_))
    def trace: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.tfprof_log.CodeDef] = field(_.getTrace)((c_, f_) => c_.copy(trace = _root_.scala.Option(f_)))
    def optionalTrace: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tensorboard.tfprof_log.CodeDef]] = field(_.trace)((c_, f_) => c_.copy(trace = f_))
    def attrs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, AttrValue]] = field(_.attrs)((c_, f_) => c_.copy(attrs = f_))
    def execs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Long, tensorboard.tfprof_log.ExecProfile]] = field(_.execs)((c_, f_) => c_.copy(execs = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val OP_FIELD_NUMBER = 9
  final val ID_FIELD_NUMBER = 13
  final val INPUTS_FIELD_NUMBER = 2
  final val INPUT_SHAPES_FIELD_NUMBER = 16
  final val OUTPUTS_FIELD_NUMBER = 3
  final val OUTPUT_SHAPES_FIELD_NUMBER = 15
  final val SRC_OUTPUT_INDEX_FIELD_NUMBER = 14
  final val SHAPE_FIELD_NUMBER = 4
  final val OP_TYPES_FIELD_NUMBER = 5
  final val CANONICAL_DEVICE_FIELD_NUMBER = 6
  final val HOST_DEVICE_FIELD_NUMBER = 7
  final val FLOAT_OPS_FIELD_NUMBER = 8
  final val TRACE_FIELD_NUMBER = 10
  final val ATTRS_FIELD_NUMBER = 11
  final val EXECS_FIELD_NUMBER = 12
  @transient
  private[tfprof_log] val _typemapper_inputs: _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.InputsEntry, (_root_.scala.Int, _root_.scala.Long)] = implicitly[_root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.InputsEntry, (_root_.scala.Int, _root_.scala.Long)]]
  @transient
  private[tfprof_log] val _typemapper_inputShapes: _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.InputShapesEntry, (_root_.scala.Int, tensorboard.tfprof_log.Tuple)] = implicitly[_root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.InputShapesEntry, (_root_.scala.Int, tensorboard.tfprof_log.Tuple)]]
  @transient
  private[tfprof_log] val _typemapper_outputs: _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.OutputsEntry, (_root_.scala.Int, _root_.scala.Long)] = implicitly[_root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.OutputsEntry, (_root_.scala.Int, _root_.scala.Long)]]
  @transient
  private[tfprof_log] val _typemapper_outputShapes: _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.OutputShapesEntry, (_root_.scala.Int, tensorboard.tfprof_log.Tuple)] = implicitly[_root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.OutputShapesEntry, (_root_.scala.Int, tensorboard.tfprof_log.Tuple)]]
  @transient
  private[tfprof_log] val _typemapper_srcOutputIndex: _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.SrcOutputIndexEntry, (_root_.scala.Long, _root_.scala.Int)] = implicitly[_root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.SrcOutputIndexEntry, (_root_.scala.Long, _root_.scala.Int)]]
  @transient
  private[tfprof_log] val _typemapper_attrs: _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.AttrsEntry, (_root_.scala.Predef.String, AttrValue)] = implicitly[_root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.AttrsEntry, (_root_.scala.Predef.String, AttrValue)]]
  @transient
  private[tfprof_log] val _typemapper_execs: _root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.ExecsEntry, (_root_.scala.Long, tensorboard.tfprof_log.ExecProfile)] = implicitly[_root_.scalapb.TypeMapper[tensorboard.tfprof_log.ProfileNode.ExecsEntry, (_root_.scala.Long, tensorboard.tfprof_log.ExecProfile)]]
  def of(
          name: _root_.scala.Predef.String,
          op: _root_.scala.Predef.String,
          id: _root_.scala.Long,
          inputs: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Long],
          inputShapes: _root_.scala.collection.immutable.Map[_root_.scala.Int, tensorboard.tfprof_log.Tuple],
          outputs: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Long],
          outputShapes: _root_.scala.collection.immutable.Map[_root_.scala.Int, tensorboard.tfprof_log.Tuple],
          srcOutputIndex: _root_.scala.collection.immutable.Map[_root_.scala.Long, _root_.scala.Int],
          shape: _root_.scala.Seq[_root_.scala.Long],
          opTypes: _root_.scala.Seq[_root_.scala.Predef.String],
          canonicalDevice: _root_.scala.Predef.String,
          hostDevice: _root_.scala.Predef.String,
          floatOps: _root_.scala.Long,
          trace: _root_.scala.Option[tensorboard.tfprof_log.CodeDef],
          attrs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, AttrValue],
          execs: _root_.scala.collection.immutable.Map[_root_.scala.Long, tensorboard.tfprof_log.ExecProfile]
  ): _root_.tensorboard.tfprof_log.ProfileNode = _root_.tensorboard.tfprof_log.ProfileNode(
    name,
    op,
    id,
    inputs,
    inputShapes,
    outputs,
    outputShapes,
    srcOutputIndex,
    shape,
    opTypes,
    canonicalDevice,
    hostDevice,
    floatOps,
    trace,
    attrs,
    execs
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.ProfileNode])
}
