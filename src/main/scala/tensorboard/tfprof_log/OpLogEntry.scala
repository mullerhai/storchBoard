// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorboard.tfprof_log

/** @param name
  *   op name.
  * @param floatOps
  *   float_ops is filled by tfprof Python API when called. It requires the
  *   op has RegisterStatistics defined. Currently, Conv2D, MatMul, etc, are
  *   implemented.
  * @param types
  *   User can define extra op type information for an op. This allows the user
  *   to select a group of ops precisely using op_type as a key.
  * @param codeDef
  *   Used to support tfprof "code" view.
  */
@SerialVersionUID(0L)
final case class OpLogEntry(
    name: _root_.scala.Predef.String = "",
    floatOps: _root_.scala.Long = 0L,
    types: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    codeDef: _root_.scala.Option[tensorboard.tfprof_log.CodeDef] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[OpLogEntry] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = name
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = floatOps
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      types.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      }
      if (codeDef.isDefined) {
        val __value = codeDef.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = name
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = floatOps
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      types.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      codeDef.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withName(__v: _root_.scala.Predef.String): OpLogEntry = copy(name = __v)
    def withFloatOps(__v: _root_.scala.Long): OpLogEntry = copy(floatOps = __v)
    def clearTypes = copy(types = _root_.scala.Seq.empty)
    def addTypes(__vs: _root_.scala.Predef.String *): OpLogEntry = addAllTypes(__vs)
    def addAllTypes(__vs: Iterable[_root_.scala.Predef.String]): OpLogEntry = copy(types = types ++ __vs)
    def withTypes(__v: _root_.scala.Seq[_root_.scala.Predef.String]): OpLogEntry = copy(types = __v)
    def getCodeDef: tensorboard.tfprof_log.CodeDef = codeDef.getOrElse(tensorboard.tfprof_log.CodeDef.defaultInstance)
    def clearCodeDef: OpLogEntry = copy(codeDef = _root_.scala.None)
    def withCodeDef(__v: tensorboard.tfprof_log.CodeDef): OpLogEntry = copy(codeDef = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = floatOps
          if (__t != 0L) __t else null
        }
        case 3 => types
        case 4 => codeDef.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => _root_.scalapb.descriptors.PLong(floatOps)
        case 3 => _root_.scalapb.descriptors.PRepeated(types.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 4 => codeDef.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tensorboard.tfprof_log.OpLogEntry.type = tensorboard.tfprof_log.OpLogEntry
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.OpLogEntry])
}

object OpLogEntry extends scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.OpLogEntry] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.tfprof_log.OpLogEntry] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.tfprof_log.OpLogEntry = {
    var __name: _root_.scala.Predef.String = ""
    var __floatOps: _root_.scala.Long = 0L
    val __types: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __codeDef: _root_.scala.Option[tensorboard.tfprof_log.CodeDef] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __name = _input__.readStringRequireUtf8()
        case 16 =>
          __floatOps = _input__.readInt64()
        case 26 =>
          __types += _input__.readStringRequireUtf8()
        case 34 =>
          __codeDef = _root_.scala.Option(__codeDef.fold(_root_.scalapb.LiteParser.readMessage[tensorboard.tfprof_log.CodeDef](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tensorboard.tfprof_log.OpLogEntry(
        name = __name,
        floatOps = __floatOps,
        types = __types.result(),
        codeDef = __codeDef,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.tfprof_log.OpLogEntry] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tensorboard.tfprof_log.OpLogEntry(
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        floatOps = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        types = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        codeDef = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[tensorboard.tfprof_log.CodeDef]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.tfprof_log.TfprofLogProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.tfprof_log.TfprofLogProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?]= {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?]= null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = tensorboard.tfprof_log.CodeDef
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?]= throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tensorboard.tfprof_log.OpLogEntry(
    name = "",
    floatOps = 0L,
    types = _root_.scala.Seq.empty,
    codeDef = _root_.scala.None
  )
  implicit class OpLogEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.tfprof_log.OpLogEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.tfprof_log.OpLogEntry](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def floatOps: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.floatOps)((c_, f_) => c_.copy(floatOps = f_))
    def types: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.types)((c_, f_) => c_.copy(types = f_))
    def codeDef: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.tfprof_log.CodeDef] = field(_.getCodeDef)((c_, f_) => c_.copy(codeDef = _root_.scala.Option(f_)))
    def optionalCodeDef: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tensorboard.tfprof_log.CodeDef]] = field(_.codeDef)((c_, f_) => c_.copy(codeDef = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val FLOAT_OPS_FIELD_NUMBER = 2
  final val TYPES_FIELD_NUMBER = 3
  final val CODE_DEF_FIELD_NUMBER = 4
  def of(
    name: _root_.scala.Predef.String,
    floatOps: _root_.scala.Long,
    types: _root_.scala.Seq[_root_.scala.Predef.String],
    codeDef: _root_.scala.Option[tensorboard.tfprof_log.CodeDef]
  ): _root_.tensorboard.tfprof_log.OpLogEntry = _root_.tensorboard.tfprof_log.OpLogEntry(
    name,
    floatOps,
    types,
    codeDef
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.OpLogEntry])
}
