// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorboard.saved_object_graph

/** Represents a Variable that is initialized by loading the contents from the
  * checkpoint.
  *
  * @param experimentalDistributedVariableComponents
  *   List of component variables for a distributed variable.
  *  
  *   When this field is non-empty, the SavedVariable will be assumed
  *   to be a distributed variable defined by the components listed here.
  *  
  *   This is only supported by experimental loaders at the moment.
  */
@SerialVersionUID(0L)
final case class SavedVariable(
    dtype: org.tensorflow.framework.types.DataType = org.tensorflow.framework.types.DataType.DT_INVALID,
    shape: _root_.scala.Option[org.tensorflow.framework.tensor_shape.TensorShapeProto] = _root_.scala.None,
    trainable: _root_.scala.Boolean = false,
    synchronization: org.tensorflow.framework.variable.VariableSynchronization = org.tensorflow.framework.variable.VariableSynchronization.VARIABLE_SYNCHRONIZATION_AUTO,
    aggregation: org.tensorflow.framework.variable.VariableAggregation = org.tensorflow.framework.variable.VariableAggregation.VARIABLE_AGGREGATION_NONE,
    name: _root_.scala.Predef.String = "",
    device: _root_.scala.Predef.String = "",
    experimentalDistributedVariableComponents: _root_.scala.Seq[tensorboard.saved_object_graph.SavedVariable] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SavedVariable] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = dtype.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
        }
      };
      if (shape.isDefined) {
        val __value = shape.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = trainable
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(3, __value)
        }
      };
      
      {
        val __value = synchronization.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(4, __value)
        }
      };
      
      {
        val __value = aggregation.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(5, __value)
        }
      };
      
      {
        val __value = name
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
        }
      };
      
      {
        val __value = device
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
        }
      };
      experimentalDistributedVariableComponents.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = dtype.value
        if (__v != 0) {
          _output__.writeEnum(1, __v)
        }
      };
      shape.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = trainable
        if (__v != false) {
          _output__.writeBool(3, __v)
        }
      };
      {
        val __v = synchronization.value
        if (__v != 0) {
          _output__.writeEnum(4, __v)
        }
      };
      {
        val __v = aggregation.value
        if (__v != 0) {
          _output__.writeEnum(5, __v)
        }
      };
      {
        val __v = name
        if (!__v.isEmpty) {
          _output__.writeString(6, __v)
        }
      };
      {
        val __v = device
        if (!__v.isEmpty) {
          _output__.writeString(7, __v)
        }
      };
      experimentalDistributedVariableComponents.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withDtype(__v: org.tensorflow.framework.types.DataType): SavedVariable = copy(dtype = __v)
    def getShape: org.tensorflow.framework.tensor_shape.TensorShapeProto = shape.getOrElse(org.tensorflow.framework.tensor_shape.TensorShapeProto.defaultInstance)
    def clearShape: SavedVariable = copy(shape = _root_.scala.None)
    def withShape(__v: org.tensorflow.framework.tensor_shape.TensorShapeProto): SavedVariable = copy(shape = Option(__v))
    def withTrainable(__v: _root_.scala.Boolean): SavedVariable = copy(trainable = __v)
    def withSynchronization(__v: org.tensorflow.framework.variable.VariableSynchronization): SavedVariable = copy(synchronization = __v)
    def withAggregation(__v: org.tensorflow.framework.variable.VariableAggregation): SavedVariable = copy(aggregation = __v)
    def withName(__v: _root_.scala.Predef.String): SavedVariable = copy(name = __v)
    def withDevice(__v: _root_.scala.Predef.String): SavedVariable = copy(device = __v)
    def clearExperimentalDistributedVariableComponents = copy(experimentalDistributedVariableComponents = _root_.scala.Seq.empty)
    def addExperimentalDistributedVariableComponents(__vs: tensorboard.saved_object_graph.SavedVariable *): SavedVariable = addAllExperimentalDistributedVariableComponents(__vs)
    def addAllExperimentalDistributedVariableComponents(__vs: Iterable[tensorboard.saved_object_graph.SavedVariable]): SavedVariable = copy(experimentalDistributedVariableComponents = experimentalDistributedVariableComponents ++ __vs)
    def withExperimentalDistributedVariableComponents(__v: _root_.scala.Seq[tensorboard.saved_object_graph.SavedVariable]): SavedVariable = copy(experimentalDistributedVariableComponents = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = dtype.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => shape.orNull
        case 3 => {
          val __t = trainable
          if (__t != false) __t else null
        }
        case 4 => {
          val __t = synchronization.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 5 => {
          val __t = aggregation.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 6 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 7 => {
          val __t = device
          if (__t != "") __t else null
        }
        case 8 => experimentalDistributedVariableComponents
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(dtype.scalaValueDescriptor)
        case 2 => shape.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PBoolean(trainable)
        case 4 => _root_.scalapb.descriptors.PEnum(synchronization.scalaValueDescriptor)
        case 5 => _root_.scalapb.descriptors.PEnum(aggregation.scalaValueDescriptor)
        case 6 => _root_.scalapb.descriptors.PString(name)
        case 7 => _root_.scalapb.descriptors.PString(device)
        case 8 => _root_.scalapb.descriptors.PRepeated(experimentalDistributedVariableComponents.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tensorboard.saved_object_graph.SavedVariable.type = tensorboard.saved_object_graph.SavedVariable
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.SavedVariable])
}

object SavedVariable extends scalapb.GeneratedMessageCompanion[tensorboard.saved_object_graph.SavedVariable] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.saved_object_graph.SavedVariable] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.saved_object_graph.SavedVariable = {
    var __dtype: org.tensorflow.framework.types.DataType = org.tensorflow.framework.types.DataType.DT_INVALID
    var __shape: _root_.scala.Option[org.tensorflow.framework.tensor_shape.TensorShapeProto] = _root_.scala.None
    var __trainable: _root_.scala.Boolean = false
    var __synchronization: org.tensorflow.framework.variable.VariableSynchronization = org.tensorflow.framework.variable.VariableSynchronization.VARIABLE_SYNCHRONIZATION_AUTO
    var __aggregation: org.tensorflow.framework.variable.VariableAggregation = org.tensorflow.framework.variable.VariableAggregation.VARIABLE_AGGREGATION_NONE
    var __name: _root_.scala.Predef.String = ""
    var __device: _root_.scala.Predef.String = ""
    val __experimentalDistributedVariableComponents: _root_.scala.collection.immutable.VectorBuilder[tensorboard.saved_object_graph.SavedVariable] = new _root_.scala.collection.immutable.VectorBuilder[tensorboard.saved_object_graph.SavedVariable]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __dtype = org.tensorflow.framework.types.DataType.fromValue(_input__.readEnum())
        case 18 =>
          __shape = _root_.scala.Option(__shape.fold(_root_.scalapb.LiteParser.readMessage[org.tensorflow.framework.tensor_shape.TensorShapeProto](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 24 =>
          __trainable = _input__.readBool()
        case 32 =>
          __synchronization = org.tensorflow.framework.variable.VariableSynchronization.fromValue(_input__.readEnum())
        case 40 =>
          __aggregation = org.tensorflow.framework.variable.VariableAggregation.fromValue(_input__.readEnum())
        case 50 =>
          __name = _input__.readStringRequireUtf8()
        case 58 =>
          __device = _input__.readStringRequireUtf8()
        case 66 =>
          __experimentalDistributedVariableComponents += _root_.scalapb.LiteParser.readMessage[tensorboard.saved_object_graph.SavedVariable](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tensorboard.saved_object_graph.SavedVariable(
        dtype = __dtype,
        shape = __shape,
        trainable = __trainable,
        synchronization = __synchronization,
        aggregation = __aggregation,
        name = __name,
        device = __device,
        experimentalDistributedVariableComponents = __experimentalDistributedVariableComponents.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.saved_object_graph.SavedVariable] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tensorboard.saved_object_graph.SavedVariable(
        dtype = org.tensorflow.framework.types.DataType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(org.tensorflow.framework.types.DataType.DT_INVALID.scalaValueDescriptor).number),
        shape = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[org.tensorflow.framework.tensor_shape.TensorShapeProto]]),
        trainable = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        synchronization = org.tensorflow.framework.variable.VariableSynchronization.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(org.tensorflow.framework.variable.VariableSynchronization.VARIABLE_SYNCHRONIZATION_AUTO.scalaValueDescriptor).number),
        aggregation = org.tensorflow.framework.variable.VariableAggregation.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(org.tensorflow.framework.variable.VariableAggregation.VARIABLE_AGGREGATION_NONE.scalaValueDescriptor).number),
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        device = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        experimentalDistributedVariableComponents = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Seq[tensorboard.saved_object_graph.SavedVariable]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.saved_object_graph.SavedObjectGraphProto.javaDescriptor.getMessageTypes().get(9)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.saved_object_graph.SavedObjectGraphProto.scalaDescriptor.messages(9)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?]= {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?]= null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = org.tensorflow.framework.tensor_shape.TensorShapeProto
      case 8 => __out = tensorboard.saved_object_graph.SavedVariable
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?]= {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => org.tensorflow.framework.types.DataType
      case 4 => org.tensorflow.framework.variable.VariableSynchronization
      case 5 => org.tensorflow.framework.variable.VariableAggregation
    }
  }
  lazy val defaultInstance = tensorboard.saved_object_graph.SavedVariable(
    dtype = org.tensorflow.framework.types.DataType.DT_INVALID,
    shape = _root_.scala.None,
    trainable = false,
    synchronization = org.tensorflow.framework.variable.VariableSynchronization.VARIABLE_SYNCHRONIZATION_AUTO,
    aggregation = org.tensorflow.framework.variable.VariableAggregation.VARIABLE_AGGREGATION_NONE,
    name = "",
    device = "",
    experimentalDistributedVariableComponents = _root_.scala.Seq.empty
  )
  implicit class SavedVariableLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.saved_object_graph.SavedVariable]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.saved_object_graph.SavedVariable](_l) {
    def dtype: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.types.DataType] = field(_.dtype)((c_, f_) => c_.copy(dtype = f_))
    def shape: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.tensor_shape.TensorShapeProto] = field(_.getShape)((c_, f_) => c_.copy(shape = _root_.scala.Option(f_)))
    def optionalShape: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[org.tensorflow.framework.tensor_shape.TensorShapeProto]] = field(_.shape)((c_, f_) => c_.copy(shape = f_))
    def trainable: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.trainable)((c_, f_) => c_.copy(trainable = f_))
    def synchronization: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.variable.VariableSynchronization] = field(_.synchronization)((c_, f_) => c_.copy(synchronization = f_))
    def aggregation: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.variable.VariableAggregation] = field(_.aggregation)((c_, f_) => c_.copy(aggregation = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def device: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.device)((c_, f_) => c_.copy(device = f_))
    def experimentalDistributedVariableComponents: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[tensorboard.saved_object_graph.SavedVariable]] = field(_.experimentalDistributedVariableComponents)((c_, f_) => c_.copy(experimentalDistributedVariableComponents = f_))
  }
  final val DTYPE_FIELD_NUMBER = 1
  final val SHAPE_FIELD_NUMBER = 2
  final val TRAINABLE_FIELD_NUMBER = 3
  final val SYNCHRONIZATION_FIELD_NUMBER = 4
  final val AGGREGATION_FIELD_NUMBER = 5
  final val NAME_FIELD_NUMBER = 6
  final val DEVICE_FIELD_NUMBER = 7
  final val EXPERIMENTAL_DISTRIBUTED_VARIABLE_COMPONENTS_FIELD_NUMBER = 8
  def of(
    dtype: org.tensorflow.framework.types.DataType,
    shape: _root_.scala.Option[org.tensorflow.framework.tensor_shape.TensorShapeProto],
    trainable: _root_.scala.Boolean,
    synchronization: org.tensorflow.framework.variable.VariableSynchronization,
    aggregation: org.tensorflow.framework.variable.VariableAggregation,
    name: _root_.scala.Predef.String,
    device: _root_.scala.Predef.String,
    experimentalDistributedVariableComponents: _root_.scala.Seq[tensorboard.saved_object_graph.SavedVariable]
  ): _root_.tensorboard.saved_object_graph.SavedVariable = _root_.tensorboard.saved_object_graph.SavedVariable(
    dtype,
    shape,
    trainable,
    synchronization,
    aggregation,
    name,
    device,
    experimentalDistributedVariableComponents
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.SavedVariable])
}
