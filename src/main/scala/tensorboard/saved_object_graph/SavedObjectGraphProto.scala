// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorboard.saved_object_graph

object SavedObjectGraphProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    com.google.protobuf.any.AnyProto,
    org.tensorflow.framework.tensor_shape.TensorShapeProtoCompanion,
    org.tensorflow.framework.types.TypesProto,
    org.tensorflow.framework.variable.VariableProto,
    org.tensorflow.framework.versions.VersionsProto,
    tensorboard.struct.StructProto,
    tensorboard.trackable_object_graph.TrackableObjectGraphProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      tensorboard.saved_object_graph.SavedObjectGraph,
      tensorboard.saved_object_graph.SavedObject,
      tensorboard.saved_object_graph.SavedUserObject,
      tensorboard.saved_object_graph.SavedAsset,
      tensorboard.saved_object_graph.SavedFunction,
      tensorboard.saved_object_graph.CapturedTensor,
      tensorboard.saved_object_graph.SavedConcreteFunction,
      tensorboard.saved_object_graph.SavedBareConcreteFunction,
      tensorboard.saved_object_graph.SavedConstant,
      tensorboard.saved_object_graph.SavedVariable,
      tensorboard.saved_object_graph.FunctionSpec,
      tensorboard.saved_object_graph.SavedResource,
      tensorboard.saved_object_graph.SaveableObject
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """CjF0ZW5zb3Jib2FyZC9jb21wYXQvcHJvdG8vc2F2ZWRfb2JqZWN0X2dyYXBoLnByb3RvEgt0ZW5zb3Jib2FyZBoZZ29vZ2xlL
  3Byb3RvYnVmL2FueS5wcm90bxordGVuc29yYm9hcmQvY29tcGF0L3Byb3RvL3RlbnNvcl9zaGFwZS5wcm90bxokdGVuc29yYm9hc
  mQvY29tcGF0L3Byb3RvL3R5cGVzLnByb3RvGid0ZW5zb3Jib2FyZC9jb21wYXQvcHJvdG8vdmFyaWFibGUucHJvdG8aJ3RlbnNvc
  mJvYXJkL2NvbXBhdC9wcm90by92ZXJzaW9ucy5wcm90bxoldGVuc29yYm9hcmQvY29tcGF0L3Byb3RvL3N0cnVjdC5wcm90bxo1d
  GVuc29yYm9hcmQvY29tcGF0L3Byb3RvL3RyYWNrYWJsZV9vYmplY3RfZ3JhcGgucHJvdG8iywIKEFNhdmVkT2JqZWN0R3JhcGgSO
  goFbm9kZXMYASADKAsyGC50ZW5zb3Jib2FyZC5TYXZlZE9iamVjdEIK4j8HEgVub2Rlc1IFbm9kZXMSewoSY29uY3JldGVfZnVuY
  3Rpb25zGAIgAygLMjQudGVuc29yYm9hcmQuU2F2ZWRPYmplY3RHcmFwaC5Db25jcmV0ZUZ1bmN0aW9uc0VudHJ5QhbiPxMSEWNvb
  mNyZXRlRnVuY3Rpb25zUhFjb25jcmV0ZUZ1bmN0aW9ucxp+ChZDb25jcmV0ZUZ1bmN0aW9uc0VudHJ5EhoKA2tleRgBIAEoCUII4
  j8FEgNrZXlSA2tleRJECgV2YWx1ZRgCIAEoCzIiLnRlbnNvcmJvYXJkLlNhdmVkQ29uY3JldGVGdW5jdGlvbkIK4j8HEgV2YWx1Z
  VIFdmFsdWU6AjgBIukLCgtTYXZlZE9iamVjdBJsCghjaGlsZHJlbhgBIAMoCzJBLnRlbnNvcmJvYXJkLlRyYWNrYWJsZU9iamVjd
  EdyYXBoLlRyYWNrYWJsZU9iamVjdC5PYmplY3RSZWZlcmVuY2VCDeI/ChIIY2hpbGRyZW5SCGNoaWxkcmVuEngKDGRlcGVuZGVuY
  2llcxgPIAMoCzJBLnRlbnNvcmJvYXJkLlRyYWNrYWJsZU9iamVjdEdyYXBoLlRyYWNrYWJsZU9iamVjdC5PYmplY3RSZWZlcmVuY
  2VCEeI/DhIMZGVwZW5kZW5jaWVzUgxkZXBlbmRlbmNpZXMSggEKDnNsb3RfdmFyaWFibGVzGAMgAygLMkcudGVuc29yYm9hcmQuV
  HJhY2thYmxlT2JqZWN0R3JhcGguVHJhY2thYmxlT2JqZWN0LlNsb3RWYXJpYWJsZVJlZmVyZW5jZUIS4j8PEg1zbG90VmFyaWFib
  GVzUg1zbG90VmFyaWFibGVzElAKC3VzZXJfb2JqZWN0GAQgASgLMhwudGVuc29yYm9hcmQuU2F2ZWRVc2VyT2JqZWN0Qg/iPwwSC
  nVzZXJPYmplY3RIAFIKdXNlck9iamVjdBI7CgVhc3NldBgFIAEoCzIXLnRlbnNvcmJvYXJkLlNhdmVkQXNzZXRCCuI/BxIFYXNzZ
  XRIAFIFYXNzZXQSRwoIZnVuY3Rpb24YBiABKAsyGi50ZW5zb3Jib2FyZC5TYXZlZEZ1bmN0aW9uQg3iPwoSCGZ1bmN0aW9uSABSC
  GZ1bmN0aW9uEkcKCHZhcmlhYmxlGAcgASgLMhoudGVuc29yYm9hcmQuU2F2ZWRWYXJpYWJsZUIN4j8KEgh2YXJpYWJsZUgAUgh2Y
  XJpYWJsZRJ5ChZiYXJlX2NvbmNyZXRlX2Z1bmN0aW9uGAggASgLMiYudGVuc29yYm9hcmQuU2F2ZWRCYXJlQ29uY3JldGVGdW5jd
  GlvbkIZ4j8WEhRiYXJlQ29uY3JldGVGdW5jdGlvbkgAUhRiYXJlQ29uY3JldGVGdW5jdGlvbhJHCghjb25zdGFudBgJIAEoCzIaL
  nRlbnNvcmJvYXJkLlNhdmVkQ29uc3RhbnRCDeI/ChIIY29uc3RhbnRIAFIIY29uc3RhbnQSRwoIcmVzb3VyY2UYCiABKAsyGi50Z
  W5zb3Jib2FyZC5TYXZlZFJlc291cmNlQg3iPwoSCHJlc291cmNlSABSCHJlc291cmNlElsKD2NhcHR1cmVkX3RlbnNvchgMIAEoC
  zIbLnRlbnNvcmJvYXJkLkNhcHR1cmVkVGVuc29yQhPiPxASDmNhcHR1cmVkVGVuc29ySABSDmNhcHR1cmVkVGVuc29yEm4KEHNhd
  mVhYmxlX29iamVjdHMYCyADKAsyLS50ZW5zb3Jib2FyZC5TYXZlZE9iamVjdC5TYXZlYWJsZU9iamVjdHNFbnRyeUIU4j8REg9zY
  XZlYWJsZU9iamVjdHNSD3NhdmVhYmxlT2JqZWN0cxI8Cg9yZWdpc3RlcmVkX25hbWUYDSABKAlCE+I/EBIOcmVnaXN0ZXJlZE5hb
  WVSDnJlZ2lzdGVyZWROYW1lEmIKFXNlcmlhbGl6ZWRfdXNlcl9wcm90bxgOIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnlCGOI/F
  RITc2VyaWFsaXplZFVzZXJQcm90b1ITc2VyaWFsaXplZFVzZXJQcm90bxI/ChByZWdpc3RlcmVkX3NhdmVyGBAgASgJQhTiPxESD
  3JlZ2lzdGVyZWRTYXZlclIPcmVnaXN0ZXJlZFNhdmVyGnUKFFNhdmVhYmxlT2JqZWN0c0VudHJ5EhoKA2tleRgBIAEoCUII4j8FE
  gNrZXlSA2tleRI9CgV2YWx1ZRgCIAEoCzIbLnRlbnNvcmJvYXJkLlNhdmVhYmxlT2JqZWN0QgriPwcSBXZhbHVlUgV2YWx1ZToCO
  AFCBgoEa2luZEoECAIQA1IKYXR0cmlidXRlcyKwAQoPU2F2ZWRVc2VyT2JqZWN0Ei8KCmlkZW50aWZpZXIYASABKAlCD+I/DBIKa
  WRlbnRpZmllclIKaWRlbnRpZmllchI/Cgd2ZXJzaW9uGAIgASgLMhcudGVuc29yYm9hcmQuVmVyc2lvbkRlZkIM4j8JEgd2ZXJza
  W9uUgd2ZXJzaW9uEisKCG1ldGFkYXRhGAMgASgJQg8YAeI/ChIIbWV0YWRhdGFSCG1ldGFkYXRhIlUKClNhdmVkQXNzZXQSRwoUY
  XNzZXRfZmlsZV9kZWZfaW5kZXgYASABKAVCFuI/ExIRYXNzZXRGaWxlRGVmSW5kZXhSEWFzc2V0RmlsZURlZkluZGV4IqkBCg1TY
  XZlZEZ1bmN0aW9uEkUKEmNvbmNyZXRlX2Z1bmN0aW9ucxgBIAMoCUIW4j8TEhFjb25jcmV0ZUZ1bmN0aW9uc1IRY29uY3JldGVGd
  W5jdGlvbnMSUQoNZnVuY3Rpb25fc3BlYxgCIAEoCzIZLnRlbnNvcmJvYXJkLkZ1bmN0aW9uU3BlY0IR4j8OEgxmdW5jdGlvblNwZ
  WNSDGZ1bmN0aW9uU3BlYyJzCg5DYXB0dXJlZFRlbnNvchIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSQgoRY29uY3Jld
  GVfZnVuY3Rpb24YAiABKAlCFeI/EhIQY29uY3JldGVGdW5jdGlvblIQY29uY3JldGVGdW5jdGlvbiKwAgoVU2F2ZWRDb25jcmV0Z
  UZ1bmN0aW9uEjMKDGJvdW5kX2lucHV0cxgCIAMoBUIQ4j8NEgtib3VuZElucHV0c1ILYm91bmRJbnB1dHMSggEKHWNhbm9uaWNhb
  Gl6ZWRfaW5wdXRfc2lnbmF0dXJlGAMgASgLMhwudGVuc29yYm9hcmQuU3RydWN0dXJlZFZhbHVlQiDiPx0SG2Nhbm9uaWNhbGl6Z
  WRJbnB1dFNpZ25hdHVyZVIbY2Fub25pY2FsaXplZElucHV0U2lnbmF0dXJlEl0KEG91dHB1dF9zaWduYXR1cmUYBCABKAsyHC50Z
  W5zb3Jib2FyZC5TdHJ1Y3R1cmVkVmFsdWVCFOI/ERIPb3V0cHV0U2lnbmF0dXJlUg9vdXRwdXRTaWduYXR1cmUi5gIKGVNhdmVkQ
  mFyZUNvbmNyZXRlRnVuY3Rpb24STwoWY29uY3JldGVfZnVuY3Rpb25fbmFtZRgBIAEoCUIZ4j8WEhRjb25jcmV0ZUZ1bmN0aW9uT
  mFtZVIUY29uY3JldGVGdW5jdGlvbk5hbWUSQgoRYXJndW1lbnRfa2V5d29yZHMYAiADKAlCFeI/EhIQYXJndW1lbnRLZXl3b3Jkc
  1IQYXJndW1lbnRLZXl3b3JkcxJhChxhbGxvd2VkX3Bvc2l0aW9uYWxfYXJndW1lbnRzGAMgASgDQh/iPxwSGmFsbG93ZWRQb3Npd
  GlvbmFsQXJndW1lbnRzUhphbGxvd2VkUG9zaXRpb25hbEFyZ3VtZW50cxJRCg1mdW5jdGlvbl9zcGVjGAQgASgLMhkudGVuc29yY
  m9hcmQuRnVuY3Rpb25TcGVjQhHiPw4SDGZ1bmN0aW9uU3BlY1IMZnVuY3Rpb25TcGVjIj0KDVNhdmVkQ29uc3RhbnQSLAoJb3Blc
  mF0aW9uGAEgASgJQg7iPwsSCW9wZXJhdGlvblIJb3BlcmF0aW9uIuUECg1TYXZlZFZhcmlhYmxlEjcKBWR0eXBlGAEgASgOMhUud
  GVuc29yYm9hcmQuRGF0YVR5cGVCCuI/BxIFZHR5cGVSBWR0eXBlEj8KBXNoYXBlGAIgASgLMh0udGVuc29yYm9hcmQuVGVuc29yU
  2hhcGVQcm90b0IK4j8HEgVzaGFwZVIFc2hhcGUSLAoJdHJhaW5hYmxlGAMgASgIQg7iPwsSCXRyYWluYWJsZVIJdHJhaW5hYmxlE
  mQKD3N5bmNocm9uaXphdGlvbhgEIAEoDjIkLnRlbnNvcmJvYXJkLlZhcmlhYmxlU3luY2hyb25pemF0aW9uQhTiPxESD3N5bmNoc
  m9uaXphdGlvblIPc3luY2hyb25pemF0aW9uElQKC2FnZ3JlZ2F0aW9uGAUgASgOMiAudGVuc29yYm9hcmQuVmFyaWFibGVBZ2dyZ
  WdhdGlvbkIQ4j8NEgthZ2dyZWdhdGlvblILYWdncmVnYXRpb24SHQoEbmFtZRgGIAEoCUIJ4j8GEgRuYW1lUgRuYW1lEiMKBmRld
  mljZRgHIAEoCUIL4j8IEgZkZXZpY2VSBmRldmljZRKrAQosZXhwZXJpbWVudGFsX2Rpc3RyaWJ1dGVkX3ZhcmlhYmxlX2NvbXBvb
  mVudHMYCCADKAsyGi50ZW5zb3Jib2FyZC5TYXZlZFZhcmlhYmxlQi7iPysSKWV4cGVyaW1lbnRhbERpc3RyaWJ1dGVkVmFyaWFib
  GVDb21wb25lbnRzUilleHBlcmltZW50YWxEaXN0cmlidXRlZFZhcmlhYmxlQ29tcG9uZW50cyKZAwoMRnVuY3Rpb25TcGVjElAKC
  2Z1bGxhcmdzcGVjGAEgASgLMhwudGVuc29yYm9hcmQuU3RydWN0dXJlZFZhbHVlQhDiPw0SC2Z1bGxhcmdzcGVjUgtmdWxsYXJnc
  3BlYxIqCglpc19tZXRob2QYAiABKAhCDeI/ChIIaXNNZXRob2RSCGlzTWV0aG9kEloKD2lucHV0X3NpZ25hdHVyZRgFIAEoCzIcL
  nRlbnNvcmJvYXJkLlN0cnVjdHVyZWRWYWx1ZUIT4j8QEg5pbnB1dFNpZ25hdHVyZVIOaW5wdXRTaWduYXR1cmUSVgoLaml0X2Nvb
  XBpbGUYBiABKA4yJC50ZW5zb3Jib2FyZC5GdW5jdGlvblNwZWMuSml0Q29tcGlsZUIP4j8MEgpqaXRDb21waWxlUgpqaXRDb21wa
  WxlIksKCkppdENvbXBpbGUSGQoHREVGQVVMVBAAGgziPwkSB0RFRkFVTFQSDwoCT04QARoH4j8EEgJPThIRCgNPRkYQAhoI4j8FE
  gNPRkZKBAgDEARKBAgEEAUiNAoNU2F2ZWRSZXNvdXJjZRIjCgZkZXZpY2UYASABKAlCC+I/CBIGZGV2aWNlUgZkZXZpY2UiiQEKD
  lNhdmVhYmxlT2JqZWN0EjYKDXNhdmVfZnVuY3Rpb24YAiABKAVCEeI/DhIMc2F2ZUZ1bmN0aW9uUgxzYXZlRnVuY3Rpb24SPwoQc
  mVzdG9yZV9mdW5jdGlvbhgDIAEoBUIU4j8REg9yZXN0b3JlRnVuY3Rpb25SD3Jlc3RvcmVGdW5jdGlvbkJaWlVnaXRodWIuY29tL
  3RlbnNvcmZsb3cvdGVuc29yZmxvdy90ZW5zb3JmbG93L2dvL2NvcmUvcHJvdG9idWYvZm9yX2NvcmVfcHJvdG9zX2dvX3Byb3Rv+
  AEBYgZwcm90bzM="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      com.google.protobuf.any.AnyProto.javaDescriptor,
      org.tensorflow.framework.tensor_shape.TensorShapeProtoCompanion.javaDescriptor,
      org.tensorflow.framework.types.TypesProto.javaDescriptor,
      org.tensorflow.framework.variable.VariableProto.javaDescriptor,
      org.tensorflow.framework.versions.VersionsProto.javaDescriptor,
      tensorboard.struct.StructProto.javaDescriptor,
      tensorboard.trackable_object_graph.TrackableObjectGraphProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}