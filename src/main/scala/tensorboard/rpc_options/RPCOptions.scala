// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorboard.rpc_options

/** RPC options for distributed runtime.
  *
  * @param useRpcForInprocessMaster
  *   If true, always use RPC to contact the session target.
  *  
  *   If false (the default option), TensorFlow may use an optimized
  *   transport for client-master communication that avoids the RPC
  *   stack. This option is primarily for used testing the RPC stack.
  * @param compressionAlgorithm
  *   The compression algorithm to be used. One of "deflate", "gzip".
  * @param compressionLevel
  *   If compression_algorithm is set, the compression level to be used.
  *   From 0 (no compression), up to 3.
  * @param cacheRpcResponse
  *   Setting cache_rpc_response to true will enable sender side caching of
  *   response for RecvTensorAsync and RecvBufAsync to allow receiver to retry
  *   requests . This is only necessary when the network fabric is experiencing a
  *   significant error rate.  Without it we'll fail a step on an network error,
  *   while with it we'll be able to complete long steps (like complex
  *   initializations) in the face of some network errors during RecvTensor.
  * @param disableSessionConnectionSharing
  *   Disables TCP connection sharing when opening a new RPC channel.
  * @param numChannelsPerTarget
  *   Setting num_channels_per_target &gt; 0 allows uses of multiple channels to
  *   communicate to the same target. This can be used to improve the aggregate
  *   throughput on high speed links (e.g 100G) where single connection is not
  *   sufficient to maximize link utilization. Note that a single RPC only goes
  *   on a single channel, this only helps in situations where there are multiple
  *   transfers to the same target overlapping in time.
  */
@SerialVersionUID(0L)
final case class RPCOptions(
    useRpcForInprocessMaster: _root_.scala.Boolean = false,
    compressionAlgorithm: _root_.scala.Predef.String = "",
    compressionLevel: _root_.scala.Int = 0,
    cacheRpcResponse: _root_.scala.Boolean = false,
    disableSessionConnectionSharing: _root_.scala.Boolean = false,
    numChannelsPerTarget: _root_.scala.Int = 0,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[RPCOptions] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = useRpcForInprocessMaster
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(1, __value)
        }
      };
      
      {
        val __value = compressionAlgorithm
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = compressionLevel
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
        }
      };
      
      {
        val __value = cacheRpcResponse
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(4, __value)
        }
      };
      
      {
        val __value = disableSessionConnectionSharing
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
        }
      };
      
      {
        val __value = numChannelsPerTarget
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(6, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = useRpcForInprocessMaster
        if (__v != false) {
          _output__.writeBool(1, __v)
        }
      };
      {
        val __v = compressionAlgorithm
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = compressionLevel
        if (__v != 0) {
          _output__.writeInt32(3, __v)
        }
      };
      {
        val __v = cacheRpcResponse
        if (__v != false) {
          _output__.writeBool(4, __v)
        }
      };
      {
        val __v = disableSessionConnectionSharing
        if (__v != false) {
          _output__.writeBool(5, __v)
        }
      };
      {
        val __v = numChannelsPerTarget
        if (__v != 0) {
          _output__.writeInt32(6, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withUseRpcForInprocessMaster(__v: _root_.scala.Boolean): RPCOptions = copy(useRpcForInprocessMaster = __v)
    def withCompressionAlgorithm(__v: _root_.scala.Predef.String): RPCOptions = copy(compressionAlgorithm = __v)
    def withCompressionLevel(__v: _root_.scala.Int): RPCOptions = copy(compressionLevel = __v)
    def withCacheRpcResponse(__v: _root_.scala.Boolean): RPCOptions = copy(cacheRpcResponse = __v)
    def withDisableSessionConnectionSharing(__v: _root_.scala.Boolean): RPCOptions = copy(disableSessionConnectionSharing = __v)
    def withNumChannelsPerTarget(__v: _root_.scala.Int): RPCOptions = copy(numChannelsPerTarget = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = useRpcForInprocessMaster
          if (__t != false) __t else null
        }
        case 2 => {
          val __t = compressionAlgorithm
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = compressionLevel
          if (__t != 0) __t else null
        }
        case 4 => {
          val __t = cacheRpcResponse
          if (__t != false) __t else null
        }
        case 5 => {
          val __t = disableSessionConnectionSharing
          if (__t != false) __t else null
        }
        case 6 => {
          val __t = numChannelsPerTarget
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PBoolean(useRpcForInprocessMaster)
        case 2 => _root_.scalapb.descriptors.PString(compressionAlgorithm)
        case 3 => _root_.scalapb.descriptors.PInt(compressionLevel)
        case 4 => _root_.scalapb.descriptors.PBoolean(cacheRpcResponse)
        case 5 => _root_.scalapb.descriptors.PBoolean(disableSessionConnectionSharing)
        case 6 => _root_.scalapb.descriptors.PInt(numChannelsPerTarget)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tensorboard.rpc_options.RPCOptions.type = tensorboard.rpc_options.RPCOptions
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.RPCOptions])
}

object RPCOptions extends scalapb.GeneratedMessageCompanion[tensorboard.rpc_options.RPCOptions] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.rpc_options.RPCOptions] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.rpc_options.RPCOptions = {
    var __useRpcForInprocessMaster: _root_.scala.Boolean = false
    var __compressionAlgorithm: _root_.scala.Predef.String = ""
    var __compressionLevel: _root_.scala.Int = 0
    var __cacheRpcResponse: _root_.scala.Boolean = false
    var __disableSessionConnectionSharing: _root_.scala.Boolean = false
    var __numChannelsPerTarget: _root_.scala.Int = 0
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __useRpcForInprocessMaster = _input__.readBool()
        case 18 =>
          __compressionAlgorithm = _input__.readStringRequireUtf8()
        case 24 =>
          __compressionLevel = _input__.readInt32()
        case 32 =>
          __cacheRpcResponse = _input__.readBool()
        case 40 =>
          __disableSessionConnectionSharing = _input__.readBool()
        case 48 =>
          __numChannelsPerTarget = _input__.readInt32()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tensorboard.rpc_options.RPCOptions(
        useRpcForInprocessMaster = __useRpcForInprocessMaster,
        compressionAlgorithm = __compressionAlgorithm,
        compressionLevel = __compressionLevel,
        cacheRpcResponse = __cacheRpcResponse,
        disableSessionConnectionSharing = __disableSessionConnectionSharing,
        numChannelsPerTarget = __numChannelsPerTarget,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.rpc_options.RPCOptions] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tensorboard.rpc_options.RPCOptions(
        useRpcForInprocessMaster = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        compressionAlgorithm = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        compressionLevel = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        cacheRpcResponse = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        disableSessionConnectionSharing = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        numChannelsPerTarget = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.rpc_options.RpcOptionsProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.rpc_options.RpcOptionsProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tensorboard.rpc_options.RPCOptions(
    useRpcForInprocessMaster = false,
    compressionAlgorithm = "",
    compressionLevel = 0,
    cacheRpcResponse = false,
    disableSessionConnectionSharing = false,
    numChannelsPerTarget = 0
  )
  implicit class RPCOptionsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.rpc_options.RPCOptions]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.rpc_options.RPCOptions](_l) {
    def useRpcForInprocessMaster: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.useRpcForInprocessMaster)((c_, f_) => c_.copy(useRpcForInprocessMaster = f_))
    def compressionAlgorithm: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.compressionAlgorithm)((c_, f_) => c_.copy(compressionAlgorithm = f_))
    def compressionLevel: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.compressionLevel)((c_, f_) => c_.copy(compressionLevel = f_))
    def cacheRpcResponse: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.cacheRpcResponse)((c_, f_) => c_.copy(cacheRpcResponse = f_))
    def disableSessionConnectionSharing: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.disableSessionConnectionSharing)((c_, f_) => c_.copy(disableSessionConnectionSharing = f_))
    def numChannelsPerTarget: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.numChannelsPerTarget)((c_, f_) => c_.copy(numChannelsPerTarget = f_))
  }
  final val USE_RPC_FOR_INPROCESS_MASTER_FIELD_NUMBER = 1
  final val COMPRESSION_ALGORITHM_FIELD_NUMBER = 2
  final val COMPRESSION_LEVEL_FIELD_NUMBER = 3
  final val CACHE_RPC_RESPONSE_FIELD_NUMBER = 4
  final val DISABLE_SESSION_CONNECTION_SHARING_FIELD_NUMBER = 5
  final val NUM_CHANNELS_PER_TARGET_FIELD_NUMBER = 6
  def of(
    useRpcForInprocessMaster: _root_.scala.Boolean,
    compressionAlgorithm: _root_.scala.Predef.String,
    compressionLevel: _root_.scala.Int,
    cacheRpcResponse: _root_.scala.Boolean,
    disableSessionConnectionSharing: _root_.scala.Boolean,
    numChannelsPerTarget: _root_.scala.Int
  ): _root_.tensorboard.rpc_options.RPCOptions = _root_.tensorboard.rpc_options.RPCOptions(
    useRpcForInprocessMaster,
    compressionAlgorithm,
    compressionLevel,
    cacheRpcResponse,
    disableSessionConnectionSharing,
    numChannelsPerTarget
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.RPCOptions])
}
