// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorboard.struct

/** A protobuf to represent tf.BoundedTensorSpec.
  */
@SerialVersionUID(0L)
final case class BoundedTensorSpecProto(
    name: _root_.scala.Predef.String = "",
    shape: _root_.scala.Option[org.tensorflow.framework.tensor_shape.TensorShapeProto] = _root_.scala.None,
    dtype: org.tensorflow.framework.types.DataType = org.tensorflow.framework.types.DataType.DT_INVALID,
    minimum: _root_.scala.Option[org.tensorflow.framework.tensor.TensorProto] = _root_.scala.None,
    maximum: _root_.scala.Option[org.tensorflow.framework.tensor.TensorProto] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[BoundedTensorSpecProto] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = name
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      if (shape.isDefined) {
        val __value = shape.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = dtype.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(3, __value)
        }
      };
      if (minimum.isDefined) {
        val __value = minimum.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (maximum.isDefined) {
        val __value = maximum.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = name
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      shape.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = dtype.value
        if (__v != 0) {
          _output__.writeEnum(3, __v)
        }
      };
      minimum.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      maximum.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withName(__v: _root_.scala.Predef.String): BoundedTensorSpecProto = copy(name = __v)
    def getShape: org.tensorflow.framework.tensor_shape.TensorShapeProto = shape.getOrElse(org.tensorflow.framework.tensor_shape.TensorShapeProto.defaultInstance)
    def clearShape: BoundedTensorSpecProto = copy(shape = _root_.scala.None)
    def withShape(__v: org.tensorflow.framework.tensor_shape.TensorShapeProto): BoundedTensorSpecProto = copy(shape = Option(__v))
    def withDtype(__v: org.tensorflow.framework.types.DataType): BoundedTensorSpecProto = copy(dtype = __v)
    def getMinimum: org.tensorflow.framework.tensor.TensorProto = minimum.getOrElse(org.tensorflow.framework.tensor.TensorProto.defaultInstance)
    def clearMinimum: BoundedTensorSpecProto = copy(minimum = _root_.scala.None)
    def withMinimum(__v: org.tensorflow.framework.tensor.TensorProto): BoundedTensorSpecProto = copy(minimum = Option(__v))
    def getMaximum: org.tensorflow.framework.tensor.TensorProto = maximum.getOrElse(org.tensorflow.framework.tensor.TensorProto.defaultInstance)
    def clearMaximum: BoundedTensorSpecProto = copy(maximum = _root_.scala.None)
    def withMaximum(__v: org.tensorflow.framework.tensor.TensorProto): BoundedTensorSpecProto = copy(maximum = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 2 => shape.orNull
        case 3 => {
          val __t = dtype.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 4 => minimum.orNull
        case 5 => maximum.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => shape.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PEnum(dtype.scalaValueDescriptor)
        case 4 => minimum.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => maximum.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tensorboard.struct.BoundedTensorSpecProto.type = tensorboard.struct.BoundedTensorSpecProto
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.BoundedTensorSpecProto])
}

object BoundedTensorSpecProto extends scalapb.GeneratedMessageCompanion[tensorboard.struct.BoundedTensorSpecProto] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.struct.BoundedTensorSpecProto] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.struct.BoundedTensorSpecProto = {
    var __name: _root_.scala.Predef.String = ""
    var __shape: _root_.scala.Option[org.tensorflow.framework.tensor_shape.TensorShapeProto] = _root_.scala.None
    var __dtype: org.tensorflow.framework.types.DataType = org.tensorflow.framework.types.DataType.DT_INVALID
    var __minimum: _root_.scala.Option[org.tensorflow.framework.tensor.TensorProto] = _root_.scala.None
    var __maximum: _root_.scala.Option[org.tensorflow.framework.tensor.TensorProto] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __name = _input__.readStringRequireUtf8()
        case 18 =>
          __shape = _root_.scala.Option(__shape.fold(_root_.scalapb.LiteParser.readMessage[org.tensorflow.framework.tensor_shape.TensorShapeProto](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 24 =>
          __dtype = org.tensorflow.framework.types.DataType.fromValue(_input__.readEnum())
        case 34 =>
          __minimum = _root_.scala.Option(__minimum.fold(_root_.scalapb.LiteParser.readMessage[org.tensorflow.framework.tensor.TensorProto](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 42 =>
          __maximum = _root_.scala.Option(__maximum.fold(_root_.scalapb.LiteParser.readMessage[org.tensorflow.framework.tensor.TensorProto](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tensorboard.struct.BoundedTensorSpecProto(
        name = __name,
        shape = __shape,
        dtype = __dtype,
        minimum = __minimum,
        maximum = __maximum,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.struct.BoundedTensorSpecProto] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tensorboard.struct.BoundedTensorSpecProto(
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        shape = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[org.tensorflow.framework.tensor_shape.TensorShapeProto]]),
        dtype = org.tensorflow.framework.types.DataType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(org.tensorflow.framework.types.DataType.DT_INVALID.scalaValueDescriptor).number),
        minimum = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[org.tensorflow.framework.tensor.TensorProto]]),
        maximum = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[org.tensorflow.framework.tensor.TensorProto]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.struct.StructProto.javaDescriptor.getMessageTypes().get(8)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.struct.StructProto.scalaDescriptor.messages(8)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?]= {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?]= null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = org.tensorflow.framework.tensor_shape.TensorShapeProto
      case 4 => __out = org.tensorflow.framework.tensor.TensorProto
      case 5 => __out = org.tensorflow.framework.tensor.TensorProto
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?]= {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 3 => org.tensorflow.framework.types.DataType
    }
  }
  lazy val defaultInstance = tensorboard.struct.BoundedTensorSpecProto(
    name = "",
    shape = _root_.scala.None,
    dtype = org.tensorflow.framework.types.DataType.DT_INVALID,
    minimum = _root_.scala.None,
    maximum = _root_.scala.None
  )
  implicit class BoundedTensorSpecProtoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.struct.BoundedTensorSpecProto]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.struct.BoundedTensorSpecProto](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def shape: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.tensor_shape.TensorShapeProto] = field(_.getShape)((c_, f_) => c_.copy(shape = _root_.scala.Option(f_)))
    def optionalShape: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[org.tensorflow.framework.tensor_shape.TensorShapeProto]] = field(_.shape)((c_, f_) => c_.copy(shape = f_))
    def dtype: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.types.DataType] = field(_.dtype)((c_, f_) => c_.copy(dtype = f_))
    def minimum: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.tensor.TensorProto] = field(_.getMinimum)((c_, f_) => c_.copy(minimum = _root_.scala.Option(f_)))
    def optionalMinimum: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[org.tensorflow.framework.tensor.TensorProto]] = field(_.minimum)((c_, f_) => c_.copy(minimum = f_))
    def maximum: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.tensor.TensorProto] = field(_.getMaximum)((c_, f_) => c_.copy(maximum = _root_.scala.Option(f_)))
    def optionalMaximum: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[org.tensorflow.framework.tensor.TensorProto]] = field(_.maximum)((c_, f_) => c_.copy(maximum = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val SHAPE_FIELD_NUMBER = 2
  final val DTYPE_FIELD_NUMBER = 3
  final val MINIMUM_FIELD_NUMBER = 4
  final val MAXIMUM_FIELD_NUMBER = 5
  def of(
    name: _root_.scala.Predef.String,
    shape: _root_.scala.Option[org.tensorflow.framework.tensor_shape.TensorShapeProto],
    dtype: org.tensorflow.framework.types.DataType,
    minimum: _root_.scala.Option[org.tensorflow.framework.tensor.TensorProto],
    maximum: _root_.scala.Option[org.tensorflow.framework.tensor.TensorProto]
  ): _root_.tensorboard.struct.BoundedTensorSpecProto = _root_.tensorboard.struct.BoundedTensorSpecProto(
    name,
    shape,
    dtype,
    minimum,
    maximum
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.BoundedTensorSpecProto])
}
