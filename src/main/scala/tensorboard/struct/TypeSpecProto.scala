// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorboard.struct

/** Represents a tf.TypeSpec
  *
  * @param typeState
  *   The value returned by TypeSpec._serialize().
  * @param typeSpecClassName
  *   The name of the TypeSpec class.
  *    * If type_spec_class == REGISTERED_TYPE_SPEC, the TypeSpec class is
  *      the one registered under this name. For types registered outside
  *      core TensorFlow by an add-on library, that library must be loaded
  *      before this value can be deserialized by nested_structure_coder.
  *    * If type_spec_class specifies a particular TypeSpec class, this field is
  *      redundant with the type_spec_class enum, and is only used for error
  *      reporting in older binaries that do not know the tupe_spec_class enum.
  * @param numFlatComponents
  *   The number of flat tensor components required by this TypeSpec.
  */
@SerialVersionUID(0L)
final case class TypeSpecProto(
    typeSpecClass: tensorboard.struct.TypeSpecProto.TypeSpecClass = tensorboard.struct.TypeSpecProto.TypeSpecClass.UNKNOWN,
    typeState: _root_.scala.Option[tensorboard.struct.StructuredValue] = _root_.scala.None,
    typeSpecClassName: _root_.scala.Predef.String = "",
    numFlatComponents: _root_.scala.Int = 0,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TypeSpecProto] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = typeSpecClass.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
        }
      };
      if (typeState.isDefined) {
        val __value = typeState.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = typeSpecClassName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = numFlatComponents
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = typeSpecClass.value
        if (__v != 0) {
          _output__.writeEnum(1, __v)
        }
      };
      typeState.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = typeSpecClassName
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = numFlatComponents
        if (__v != 0) {
          _output__.writeInt32(4, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withTypeSpecClass(__v: tensorboard.struct.TypeSpecProto.TypeSpecClass): TypeSpecProto = copy(typeSpecClass = __v)
    def getTypeState: tensorboard.struct.StructuredValue = typeState.getOrElse(tensorboard.struct.StructuredValue.defaultInstance)
    def clearTypeState: TypeSpecProto = copy(typeState = _root_.scala.None)
    def withTypeState(__v: tensorboard.struct.StructuredValue): TypeSpecProto = copy(typeState = Option(__v))
    def withTypeSpecClassName(__v: _root_.scala.Predef.String): TypeSpecProto = copy(typeSpecClassName = __v)
    def withNumFlatComponents(__v: _root_.scala.Int): TypeSpecProto = copy(numFlatComponents = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = typeSpecClass.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => typeState.orNull
        case 3 => {
          val __t = typeSpecClassName
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = numFlatComponents
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(typeSpecClass.scalaValueDescriptor)
        case 2 => typeState.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PString(typeSpecClassName)
        case 4 => _root_.scalapb.descriptors.PInt(numFlatComponents)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tensorboard.struct.TypeSpecProto.type = tensorboard.struct.TypeSpecProto
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.TypeSpecProto])
}

object TypeSpecProto extends scalapb.GeneratedMessageCompanion[tensorboard.struct.TypeSpecProto] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.struct.TypeSpecProto] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.struct.TypeSpecProto = {
    var __typeSpecClass: tensorboard.struct.TypeSpecProto.TypeSpecClass = tensorboard.struct.TypeSpecProto.TypeSpecClass.UNKNOWN
    var __typeState: _root_.scala.Option[tensorboard.struct.StructuredValue] = _root_.scala.None
    var __typeSpecClassName: _root_.scala.Predef.String = ""
    var __numFlatComponents: _root_.scala.Int = 0
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __typeSpecClass = tensorboard.struct.TypeSpecProto.TypeSpecClass.fromValue(_input__.readEnum())
        case 18 =>
          __typeState = _root_.scala.Option(__typeState.fold(_root_.scalapb.LiteParser.readMessage[tensorboard.struct.StructuredValue](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __typeSpecClassName = _input__.readStringRequireUtf8()
        case 32 =>
          __numFlatComponents = _input__.readInt32()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tensorboard.struct.TypeSpecProto(
        typeSpecClass = __typeSpecClass,
        typeState = __typeState,
        typeSpecClassName = __typeSpecClassName,
        numFlatComponents = __numFlatComponents,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.struct.TypeSpecProto] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tensorboard.struct.TypeSpecProto(
        typeSpecClass = tensorboard.struct.TypeSpecProto.TypeSpecClass.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(tensorboard.struct.TypeSpecProto.TypeSpecClass.UNKNOWN.scalaValueDescriptor).number),
        typeState = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[tensorboard.struct.StructuredValue]]),
        typeSpecClassName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        numFlatComponents = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.struct.StructProto.javaDescriptor.getMessageTypes().get(9)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.struct.StructProto.scalaDescriptor.messages(9)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?]= {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?]= null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = tensorboard.struct.StructuredValue
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?]= {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => tensorboard.struct.TypeSpecProto.TypeSpecClass
    }
  }
  lazy val defaultInstance = tensorboard.struct.TypeSpecProto(
    typeSpecClass = tensorboard.struct.TypeSpecProto.TypeSpecClass.UNKNOWN,
    typeState = _root_.scala.None,
    typeSpecClassName = "",
    numFlatComponents = 0
  )
  sealed abstract class TypeSpecClass(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = tensorboard.struct.TypeSpecProto.TypeSpecClass
    type RecognizedType = tensorboard.struct.TypeSpecProto.TypeSpecClass.Recognized
    def isUnknown: _root_.scala.Boolean = false
    def isSparseTensorSpec: _root_.scala.Boolean = false
    def isIndexedSlicesSpec: _root_.scala.Boolean = false
    def isRaggedTensorSpec: _root_.scala.Boolean = false
    def isTensorArraySpec: _root_.scala.Boolean = false
    def isDataDatasetSpec: _root_.scala.Boolean = false
    def isDataIteratorSpec: _root_.scala.Boolean = false
    def isOptionalSpec: _root_.scala.Boolean = false
    def isPerReplicaSpec: _root_.scala.Boolean = false
    def isVariableSpec: _root_.scala.Boolean = false
    def isRowPartitionSpec: _root_.scala.Boolean = false
    def isRegisteredTypeSpec: _root_.scala.Boolean = false
    def isExtensionTypeSpec: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[TypeSpecClass] = tensorboard.struct.TypeSpecProto.TypeSpecClass
    final def asRecognized: _root_.scala.Option[tensorboard.struct.TypeSpecProto.TypeSpecClass.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[tensorboard.struct.TypeSpecProto.TypeSpecClass.Recognized])
  }
  
  object TypeSpecClass extends _root_.scalapb.GeneratedEnumCompanion[TypeSpecClass] {
    sealed trait Recognized extends TypeSpecClass
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[TypeSpecClass] = this
    
    @SerialVersionUID(0L)
    case object UNKNOWN extends TypeSpecClass(0) with TypeSpecClass.Recognized {
      val index = 0
      val name = "UNKNOWN"
      override def isUnknown: _root_.scala.Boolean = true
    }
    
    /** tf.SparseTensorSpec
      */
    @SerialVersionUID(0L)
    case object SPARSE_TENSOR_SPEC extends TypeSpecClass(1) with TypeSpecClass.Recognized {
      val index = 1
      val name = "SPARSE_TENSOR_SPEC"
      override def isSparseTensorSpec: _root_.scala.Boolean = true
    }
    
    /** tf.IndexedSlicesSpec
      */
    @SerialVersionUID(0L)
    case object INDEXED_SLICES_SPEC extends TypeSpecClass(2) with TypeSpecClass.Recognized {
      val index = 2
      val name = "INDEXED_SLICES_SPEC"
      override def isIndexedSlicesSpec: _root_.scala.Boolean = true
    }
    
    /** tf.RaggedTensorSpec
      */
    @SerialVersionUID(0L)
    case object RAGGED_TENSOR_SPEC extends TypeSpecClass(3) with TypeSpecClass.Recognized {
      val index = 3
      val name = "RAGGED_TENSOR_SPEC"
      override def isRaggedTensorSpec: _root_.scala.Boolean = true
    }
    
    /** tf.TensorArraySpec
      */
    @SerialVersionUID(0L)
    case object TENSOR_ARRAY_SPEC extends TypeSpecClass(4) with TypeSpecClass.Recognized {
      val index = 4
      val name = "TENSOR_ARRAY_SPEC"
      override def isTensorArraySpec: _root_.scala.Boolean = true
    }
    
    /** tf.data.DatasetSpec
      */
    @SerialVersionUID(0L)
    case object DATA_DATASET_SPEC extends TypeSpecClass(5) with TypeSpecClass.Recognized {
      val index = 5
      val name = "DATA_DATASET_SPEC"
      override def isDataDatasetSpec: _root_.scala.Boolean = true
    }
    
    /** IteratorSpec from data/ops/iterator_ops.py
      */
    @SerialVersionUID(0L)
    case object DATA_ITERATOR_SPEC extends TypeSpecClass(6) with TypeSpecClass.Recognized {
      val index = 6
      val name = "DATA_ITERATOR_SPEC"
      override def isDataIteratorSpec: _root_.scala.Boolean = true
    }
    
    /** tf.OptionalSpec
      */
    @SerialVersionUID(0L)
    case object OPTIONAL_SPEC extends TypeSpecClass(7) with TypeSpecClass.Recognized {
      val index = 7
      val name = "OPTIONAL_SPEC"
      override def isOptionalSpec: _root_.scala.Boolean = true
    }
    
    /** PerReplicaSpec from distribute/values.py
      */
    @SerialVersionUID(0L)
    case object PER_REPLICA_SPEC extends TypeSpecClass(8) with TypeSpecClass.Recognized {
      val index = 8
      val name = "PER_REPLICA_SPEC"
      override def isPerReplicaSpec: _root_.scala.Boolean = true
    }
    
    /** tf.VariableSpec
      */
    @SerialVersionUID(0L)
    case object VARIABLE_SPEC extends TypeSpecClass(9) with TypeSpecClass.Recognized {
      val index = 9
      val name = "VARIABLE_SPEC"
      override def isVariableSpec: _root_.scala.Boolean = true
    }
    
    /** RowPartitionSpec from ragged/row_partition.py
      */
    @SerialVersionUID(0L)
    case object ROW_PARTITION_SPEC extends TypeSpecClass(10) with TypeSpecClass.Recognized {
      val index = 10
      val name = "ROW_PARTITION_SPEC"
      override def isRowPartitionSpec: _root_.scala.Boolean = true
    }
    
    /** The type registered as type_spec_class_name.
      */
    @SerialVersionUID(0L)
    case object REGISTERED_TYPE_SPEC extends TypeSpecClass(12) with TypeSpecClass.Recognized {
      val index = 11
      val name = "REGISTERED_TYPE_SPEC"
      override def isRegisteredTypeSpec: _root_.scala.Boolean = true
    }
    
    /** Subclasses of tf.ExtensionType
      */
    @SerialVersionUID(0L)
    case object EXTENSION_TYPE_SPEC extends TypeSpecClass(13) with TypeSpecClass.Recognized {
      val index = 12
      val name = "EXTENSION_TYPE_SPEC"
      override def isExtensionTypeSpec: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends TypeSpecClass(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(UNKNOWN, SPARSE_TENSOR_SPEC, INDEXED_SLICES_SPEC, RAGGED_TENSOR_SPEC, TENSOR_ARRAY_SPEC, DATA_DATASET_SPEC, DATA_ITERATOR_SPEC, OPTIONAL_SPEC, PER_REPLICA_SPEC, VARIABLE_SPEC, ROW_PARTITION_SPEC, REGISTERED_TYPE_SPEC, EXTENSION_TYPE_SPEC)
    def fromValue(__value: _root_.scala.Int): TypeSpecClass = __value match {
      case 0 => UNKNOWN
      case 1 => SPARSE_TENSOR_SPEC
      case 2 => INDEXED_SLICES_SPEC
      case 3 => RAGGED_TENSOR_SPEC
      case 4 => TENSOR_ARRAY_SPEC
      case 5 => DATA_DATASET_SPEC
      case 6 => DATA_ITERATOR_SPEC
      case 7 => OPTIONAL_SPEC
      case 8 => PER_REPLICA_SPEC
      case 9 => VARIABLE_SPEC
      case 10 => ROW_PARTITION_SPEC
      case 12 => REGISTERED_TYPE_SPEC
      case 13 => EXTENSION_TYPE_SPEC
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = tensorboard.struct.TypeSpecProto.javaDescriptor.getEnumTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = tensorboard.struct.TypeSpecProto.scalaDescriptor.enums(0)
  }
  implicit class TypeSpecProtoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.struct.TypeSpecProto]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.struct.TypeSpecProto](_l) {
    def typeSpecClass: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.struct.TypeSpecProto.TypeSpecClass] = field(_.typeSpecClass)((c_, f_) => c_.copy(typeSpecClass = f_))
    def typeState: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.struct.StructuredValue] = field(_.getTypeState)((c_, f_) => c_.copy(typeState = _root_.scala.Option(f_)))
    def optionalTypeState: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tensorboard.struct.StructuredValue]] = field(_.typeState)((c_, f_) => c_.copy(typeState = f_))
    def typeSpecClassName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.typeSpecClassName)((c_, f_) => c_.copy(typeSpecClassName = f_))
    def numFlatComponents: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.numFlatComponents)((c_, f_) => c_.copy(numFlatComponents = f_))
  }
  final val TYPE_SPEC_CLASS_FIELD_NUMBER = 1
  final val TYPE_STATE_FIELD_NUMBER = 2
  final val TYPE_SPEC_CLASS_NAME_FIELD_NUMBER = 3
  final val NUM_FLAT_COMPONENTS_FIELD_NUMBER = 4
  def of(
    typeSpecClass: tensorboard.struct.TypeSpecProto.TypeSpecClass,
    typeState: _root_.scala.Option[tensorboard.struct.StructuredValue],
    typeSpecClassName: _root_.scala.Predef.String,
    numFlatComponents: _root_.scala.Int
  ): _root_.tensorboard.struct.TypeSpecProto = _root_.tensorboard.struct.TypeSpecProto(
    typeSpecClass,
    typeState,
    typeSpecClassName,
    numFlatComponents
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.TypeSpecProto])
}
