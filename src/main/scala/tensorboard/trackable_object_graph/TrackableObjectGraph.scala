// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorboard.trackable_object_graph

@SerialVersionUID(0L)
final case class TrackableObjectGraph(
    nodes: _root_.scala.Seq[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TrackableObjectGraph] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      nodes.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      nodes.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def clearNodes = copy(nodes = _root_.scala.Seq.empty)
    def addNodes(__vs: tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject *): TrackableObjectGraph = addAllNodes(__vs)
    def addAllNodes(__vs: Iterable[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject]): TrackableObjectGraph = copy(nodes = nodes ++ __vs)
    def withNodes(__v: _root_.scala.Seq[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject]): TrackableObjectGraph = copy(nodes = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => nodes
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(nodes.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tensorboard.trackable_object_graph.TrackableObjectGraph.type = tensorboard.trackable_object_graph.TrackableObjectGraph
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.TrackableObjectGraph])
}

object TrackableObjectGraph extends scalapb.GeneratedMessageCompanion[tensorboard.trackable_object_graph.TrackableObjectGraph] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.trackable_object_graph.TrackableObjectGraph] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.trackable_object_graph.TrackableObjectGraph = {
    val __nodes: _root_.scala.collection.immutable.VectorBuilder[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject] = new _root_.scala.collection.immutable.VectorBuilder[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __nodes += _root_.scalapb.LiteParser.readMessage[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tensorboard.trackable_object_graph.TrackableObjectGraph(
        nodes = __nodes.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.trackable_object_graph.TrackableObjectGraph] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tensorboard.trackable_object_graph.TrackableObjectGraph(
        nodes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.trackable_object_graph.TrackableObjectGraphProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.trackable_object_graph.TrackableObjectGraphProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tensorboard.trackable_object_graph.TrackableObjectGraph(
    nodes = _root_.scala.Seq.empty
  )
  /** @param children
    *   Objects which this object depends on.
    * @param attributes
    *   Serialized data specific to this object.
    * @param slotVariables
    *   Slot variables owned by this object.
    * @param registeredSaver
    *   The registered saver used to save this object. If this saver is not
    *   present when loading the checkpoint, then loading will fail.
    * @param hasCheckpointValues
    *   Whether this object has checkpoint values or descendants with checkpoint
    *   values. This is computed at save time to avoid traversing the entire
    *   object graph proto when restoring (which also has to traverse the live
    *   object graph).
    */
  @SerialVersionUID(0L)
  final case class TrackableObject(
      children: _root_.scala.Seq[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.ObjectReference] = _root_.scala.Seq.empty,
      attributes: _root_.scala.Seq[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SerializedTensor] = _root_.scala.Seq.empty,
      slotVariables: _root_.scala.Seq[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SlotVariableReference] = _root_.scala.Seq.empty,
      registeredSaver: _root_.scala.Option[tensorboard.trackable_object_graph.RegisteredSaver] = _root_.scala.None,
      hasCheckpointValues: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TrackableObject] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        children.foreach { __item =>
          val __value = __item
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        attributes.foreach { __item =>
          val __value = __item
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        slotVariables.foreach { __item =>
          val __value = __item
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        if (registeredSaver.isDefined) {
          val __value = registeredSaver.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (hasCheckpointValues.isDefined) {
          val __value = tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject._typemapper_hasCheckpointValues.toBase(hasCheckpointValues.get)
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        children.foreach { __v =>
          val __m = __v
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        attributes.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        slotVariables.foreach { __v =>
          val __m = __v
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        registeredSaver.foreach { __v =>
          val __m = __v
          _output__.writeTag(4, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        hasCheckpointValues.foreach { __v =>
          val __m = tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject._typemapper_hasCheckpointValues.toBase(__v)
          _output__.writeTag(5, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def clearChildren = copy(children = _root_.scala.Seq.empty)
      def addChildren(__vs: tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.ObjectReference *): TrackableObject = addAllChildren(__vs)
      def addAllChildren(__vs: Iterable[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.ObjectReference]): TrackableObject = copy(children = children ++ __vs)
      def withChildren(__v: _root_.scala.Seq[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.ObjectReference]): TrackableObject = copy(children = __v)
      def clearAttributes = copy(attributes = _root_.scala.Seq.empty)
      def addAttributes(__vs: tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SerializedTensor *): TrackableObject = addAllAttributes(__vs)
      def addAllAttributes(__vs: Iterable[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SerializedTensor]): TrackableObject = copy(attributes = attributes ++ __vs)
      def withAttributes(__v: _root_.scala.Seq[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SerializedTensor]): TrackableObject = copy(attributes = __v)
      def clearSlotVariables = copy(slotVariables = _root_.scala.Seq.empty)
      def addSlotVariables(__vs: tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SlotVariableReference *): TrackableObject = addAllSlotVariables(__vs)
      def addAllSlotVariables(__vs: Iterable[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SlotVariableReference]): TrackableObject = copy(slotVariables = slotVariables ++ __vs)
      def withSlotVariables(__v: _root_.scala.Seq[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SlotVariableReference]): TrackableObject = copy(slotVariables = __v)
      def getRegisteredSaver: tensorboard.trackable_object_graph.RegisteredSaver = registeredSaver.getOrElse(tensorboard.trackable_object_graph.RegisteredSaver.defaultInstance)
      def clearRegisteredSaver: TrackableObject = copy(registeredSaver = _root_.scala.None)
      def withRegisteredSaver(__v: tensorboard.trackable_object_graph.RegisteredSaver): TrackableObject = copy(registeredSaver = Option(__v))
      def getHasCheckpointValues: _root_.scala.Boolean = hasCheckpointValues.getOrElse(tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject._typemapper_hasCheckpointValues.toCustom(com.google.protobuf.wrappers.BoolValue.defaultInstance))
      def clearHasCheckpointValues: TrackableObject = copy(hasCheckpointValues = _root_.scala.None)
      def withHasCheckpointValues(__v: _root_.scala.Boolean): TrackableObject = copy(hasCheckpointValues = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => children
          case 2 => attributes
          case 3 => slotVariables
          case 4 => registeredSaver.orNull
          case 5 => hasCheckpointValues.map(tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject._typemapper_hasCheckpointValues.toBase(_)).orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(children.iterator.map(_.toPMessage).toVector)
          case 2 => _root_.scalapb.descriptors.PRepeated(attributes.iterator.map(_.toPMessage).toVector)
          case 3 => _root_.scalapb.descriptors.PRepeated(slotVariables.iterator.map(_.toPMessage).toVector)
          case 4 => registeredSaver.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 5 => hasCheckpointValues.map(tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject._typemapper_hasCheckpointValues.toBase(_).toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.type = tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.TrackableObjectGraph.TrackableObject])
  }
  
  object TrackableObject extends scalapb.GeneratedMessageCompanion[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject = {
      val __children: _root_.scala.collection.immutable.VectorBuilder[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.ObjectReference] = new _root_.scala.collection.immutable.VectorBuilder[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.ObjectReference]
      val __attributes: _root_.scala.collection.immutable.VectorBuilder[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SerializedTensor] = new _root_.scala.collection.immutable.VectorBuilder[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SerializedTensor]
      val __slotVariables: _root_.scala.collection.immutable.VectorBuilder[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SlotVariableReference] = new _root_.scala.collection.immutable.VectorBuilder[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SlotVariableReference]
      var __registeredSaver: _root_.scala.Option[tensorboard.trackable_object_graph.RegisteredSaver] = _root_.scala.None
      var __hasCheckpointValues: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __children += _root_.scalapb.LiteParser.readMessage[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.ObjectReference](_input__)
          case 18 =>
            __attributes += _root_.scalapb.LiteParser.readMessage[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SerializedTensor](_input__)
          case 26 =>
            __slotVariables += _root_.scalapb.LiteParser.readMessage[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SlotVariableReference](_input__)
          case 34 =>
            __registeredSaver = _root_.scala.Option(__registeredSaver.fold(_root_.scalapb.LiteParser.readMessage[tensorboard.trackable_object_graph.RegisteredSaver](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 42 =>
            __hasCheckpointValues = _root_.scala.Option(tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject._typemapper_hasCheckpointValues.toCustom(__hasCheckpointValues.map(tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject._typemapper_hasCheckpointValues.toBase(_)).fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.wrappers.BoolValue](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _))))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject(
          children = __children.result(),
          attributes = __attributes.result(),
          slotVariables = __slotVariables.result(),
          registeredSaver = __registeredSaver,
          hasCheckpointValues = __hasCheckpointValues,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject(
          children = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.ObjectReference]]).getOrElse(_root_.scala.Seq.empty),
          attributes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SerializedTensor]]).getOrElse(_root_.scala.Seq.empty),
          slotVariables = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SlotVariableReference]]).getOrElse(_root_.scala.Seq.empty),
          registeredSaver = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[tensorboard.trackable_object_graph.RegisteredSaver]]),
          hasCheckpointValues = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.wrappers.BoolValue]]).map(tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject._typemapper_hasCheckpointValues.toCustom(_))
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.trackable_object_graph.TrackableObjectGraph.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.trackable_object_graph.TrackableObjectGraph.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.ObjectReference
        case 2 => __out = tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SerializedTensor
        case 3 => __out = tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SlotVariableReference
        case 4 => __out = tensorboard.trackable_object_graph.RegisteredSaver
        case 5 => __out = com.google.protobuf.wrappers.BoolValue
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
      Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
        _root_.tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.ObjectReference,
        _root_.tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SerializedTensor,
        _root_.tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SlotVariableReference
      )
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject(
      children = _root_.scala.Seq.empty,
      attributes = _root_.scala.Seq.empty,
      slotVariables = _root_.scala.Seq.empty,
      registeredSaver = _root_.scala.None,
      hasCheckpointValues = _root_.scala.None
    )
    /** @param nodeId
      *   An index into `TrackableObjectGraph.nodes`, indicating the object
      *   being referenced.
      * @param localName
      *   A user-provided name for the edge.
      */
    @SerialVersionUID(0L)
    final case class ObjectReference(
        nodeId: _root_.scala.Int = 0,
        localName: _root_.scala.Predef.String = "",
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ObjectReference] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          
          {
            val __value = nodeId
            if (__value != 0) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
            }
          };
          
          {
            val __value = localName
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
            }
          };
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          {
            val __v = nodeId
            if (__v != 0) {
              _output__.writeInt32(1, __v)
            }
          };
          {
            val __v = localName
            if (!__v.isEmpty) {
              _output__.writeString(2, __v)
            }
          };
          unknownFields.writeTo(_output__)
        }
        def withNodeId(__v: _root_.scala.Int): ObjectReference = copy(nodeId = __v)
        def withLocalName(__v: _root_.scala.Predef.String): ObjectReference = copy(localName = __v)
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => {
              val __t = nodeId
              if (__t != 0) __t else null
            }
            case 2 => {
              val __t = localName
              if (__t != "") __t else null
            }
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PInt(nodeId)
            case 2 => _root_.scalapb.descriptors.PString(localName)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.ObjectReference.type = tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.ObjectReference
        // @@protoc_insertion_point(GeneratedMessage[tensorboard.TrackableObjectGraph.TrackableObject.ObjectReference])
    }
    
    object ObjectReference extends scalapb.GeneratedMessageCompanion[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.ObjectReference] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.ObjectReference] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.ObjectReference = {
        var __nodeId: _root_.scala.Int = 0
        var __localName: _root_.scala.Predef.String = ""
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __nodeId = _input__.readInt32()
            case 18 =>
              __localName = _input__.readStringRequireUtf8()
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.ObjectReference(
            nodeId = __nodeId,
            localName = __localName,
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.ObjectReference] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.ObjectReference(
            nodeId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
            localName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.javaDescriptor.getNestedTypes().get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.ObjectReference(
        nodeId = 0,
        localName = ""
      )
      implicit class ObjectReferenceLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.ObjectReference]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.ObjectReference](_l) {
        def nodeId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.nodeId)((c_, f_) => c_.copy(nodeId = f_))
        def localName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.localName)((c_, f_) => c_.copy(localName = f_))
      }
      final val NODE_ID_FIELD_NUMBER = 1
      final val LOCAL_NAME_FIELD_NUMBER = 2
      def of(
        nodeId: _root_.scala.Int,
        localName: _root_.scala.Predef.String
      ): _root_.tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.ObjectReference = _root_.tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.ObjectReference(
        nodeId,
        localName
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.TrackableObjectGraph.TrackableObject.ObjectReference])
    }
    
    /** @param name
      *   A name for the Tensor. Simple variables have only one
      *   `SerializedTensor` named "VARIABLE_VALUE" by convention. This value may
      *   be restored on object creation as an optimization.
      * @param fullName
      *   The full name of the variable/tensor, if applicable. Used to allow
      *   name-based loading of checkpoints which were saved using an
      *   object-based API. Should match the checkpoint key which would have been
      *   assigned by tf.train.Saver.
      * @param checkpointKey
      *   The generated name of the Tensor in the checkpoint.
      */
    @SerialVersionUID(0L)
    final case class SerializedTensor(
        name: _root_.scala.Predef.String = "",
        fullName: _root_.scala.Predef.String = "",
        checkpointKey: _root_.scala.Predef.String = "",
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SerializedTensor] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          
          {
            val __value = name
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
            }
          };
          
          {
            val __value = fullName
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
            }
          };
          
          {
            val __value = checkpointKey
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
            }
          };
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          {
            val __v = name
            if (!__v.isEmpty) {
              _output__.writeString(1, __v)
            }
          };
          {
            val __v = fullName
            if (!__v.isEmpty) {
              _output__.writeString(2, __v)
            }
          };
          {
            val __v = checkpointKey
            if (!__v.isEmpty) {
              _output__.writeString(3, __v)
            }
          };
          unknownFields.writeTo(_output__)
        }
        def withName(__v: _root_.scala.Predef.String): SerializedTensor = copy(name = __v)
        def withFullName(__v: _root_.scala.Predef.String): SerializedTensor = copy(fullName = __v)
        def withCheckpointKey(__v: _root_.scala.Predef.String): SerializedTensor = copy(checkpointKey = __v)
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => {
              val __t = name
              if (__t != "") __t else null
            }
            case 2 => {
              val __t = fullName
              if (__t != "") __t else null
            }
            case 3 => {
              val __t = checkpointKey
              if (__t != "") __t else null
            }
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PString(name)
            case 2 => _root_.scalapb.descriptors.PString(fullName)
            case 3 => _root_.scalapb.descriptors.PString(checkpointKey)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SerializedTensor.type = tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SerializedTensor
        // @@protoc_insertion_point(GeneratedMessage[tensorboard.TrackableObjectGraph.TrackableObject.SerializedTensor])
    }
    
    object SerializedTensor extends scalapb.GeneratedMessageCompanion[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SerializedTensor] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SerializedTensor] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SerializedTensor = {
        var __name: _root_.scala.Predef.String = ""
        var __fullName: _root_.scala.Predef.String = ""
        var __checkpointKey: _root_.scala.Predef.String = ""
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __name = _input__.readStringRequireUtf8()
            case 18 =>
              __fullName = _input__.readStringRequireUtf8()
            case 26 =>
              __checkpointKey = _input__.readStringRequireUtf8()
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SerializedTensor(
            name = __name,
            fullName = __fullName,
            checkpointKey = __checkpointKey,
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SerializedTensor] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SerializedTensor(
            name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
            fullName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
            checkpointKey = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.javaDescriptor.getNestedTypes().get(1)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.scalaDescriptor.nestedMessages(1)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SerializedTensor(
        name = "",
        fullName = "",
        checkpointKey = ""
      )
      implicit class SerializedTensorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SerializedTensor]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SerializedTensor](_l) {
        def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
        def fullName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.fullName)((c_, f_) => c_.copy(fullName = f_))
        def checkpointKey: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.checkpointKey)((c_, f_) => c_.copy(checkpointKey = f_))
      }
      final val NAME_FIELD_NUMBER = 1
      final val FULL_NAME_FIELD_NUMBER = 2
      final val CHECKPOINT_KEY_FIELD_NUMBER = 3
      def of(
        name: _root_.scala.Predef.String,
        fullName: _root_.scala.Predef.String,
        checkpointKey: _root_.scala.Predef.String
      ): _root_.tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SerializedTensor = _root_.tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SerializedTensor(
        name,
        fullName,
        checkpointKey
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.TrackableObjectGraph.TrackableObject.SerializedTensor])
    }
    
    /** @param originalVariableNodeId
      *   An index into `TrackableObjectGraph.nodes`, indicating the
      *   variable object this slot was created for.
      * @param slotName
      *   The name of the slot (e.g. "m"/"v").
      * @param slotVariableNodeId
      *   An index into `TrackableObjectGraph.nodes`, indicating the
      *   `Object` with the value of the slot variable.
      */
    @SerialVersionUID(0L)
    final case class SlotVariableReference(
        originalVariableNodeId: _root_.scala.Int = 0,
        slotName: _root_.scala.Predef.String = "",
        slotVariableNodeId: _root_.scala.Int = 0,
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SlotVariableReference] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          
          {
            val __value = originalVariableNodeId
            if (__value != 0) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
            }
          };
          
          {
            val __value = slotName
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
            }
          };
          
          {
            val __value = slotVariableNodeId
            if (__value != 0) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
            }
          };
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          {
            val __v = originalVariableNodeId
            if (__v != 0) {
              _output__.writeInt32(1, __v)
            }
          };
          {
            val __v = slotName
            if (!__v.isEmpty) {
              _output__.writeString(2, __v)
            }
          };
          {
            val __v = slotVariableNodeId
            if (__v != 0) {
              _output__.writeInt32(3, __v)
            }
          };
          unknownFields.writeTo(_output__)
        }
        def withOriginalVariableNodeId(__v: _root_.scala.Int): SlotVariableReference = copy(originalVariableNodeId = __v)
        def withSlotName(__v: _root_.scala.Predef.String): SlotVariableReference = copy(slotName = __v)
        def withSlotVariableNodeId(__v: _root_.scala.Int): SlotVariableReference = copy(slotVariableNodeId = __v)
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => {
              val __t = originalVariableNodeId
              if (__t != 0) __t else null
            }
            case 2 => {
              val __t = slotName
              if (__t != "") __t else null
            }
            case 3 => {
              val __t = slotVariableNodeId
              if (__t != 0) __t else null
            }
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PInt(originalVariableNodeId)
            case 2 => _root_.scalapb.descriptors.PString(slotName)
            case 3 => _root_.scalapb.descriptors.PInt(slotVariableNodeId)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SlotVariableReference.type = tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SlotVariableReference
        // @@protoc_insertion_point(GeneratedMessage[tensorboard.TrackableObjectGraph.TrackableObject.SlotVariableReference])
    }
    
    object SlotVariableReference extends scalapb.GeneratedMessageCompanion[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SlotVariableReference] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SlotVariableReference] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SlotVariableReference = {
        var __originalVariableNodeId: _root_.scala.Int = 0
        var __slotName: _root_.scala.Predef.String = ""
        var __slotVariableNodeId: _root_.scala.Int = 0
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __originalVariableNodeId = _input__.readInt32()
            case 18 =>
              __slotName = _input__.readStringRequireUtf8()
            case 24 =>
              __slotVariableNodeId = _input__.readInt32()
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SlotVariableReference(
            originalVariableNodeId = __originalVariableNodeId,
            slotName = __slotName,
            slotVariableNodeId = __slotVariableNodeId,
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SlotVariableReference] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SlotVariableReference(
            originalVariableNodeId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
            slotName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
            slotVariableNodeId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0)
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.javaDescriptor.getNestedTypes().get(2)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.scalaDescriptor.nestedMessages(2)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SlotVariableReference(
        originalVariableNodeId = 0,
        slotName = "",
        slotVariableNodeId = 0
      )
      implicit class SlotVariableReferenceLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SlotVariableReference]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SlotVariableReference](_l) {
        def originalVariableNodeId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.originalVariableNodeId)((c_, f_) => c_.copy(originalVariableNodeId = f_))
        def slotName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.slotName)((c_, f_) => c_.copy(slotName = f_))
        def slotVariableNodeId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.slotVariableNodeId)((c_, f_) => c_.copy(slotVariableNodeId = f_))
      }
      final val ORIGINAL_VARIABLE_NODE_ID_FIELD_NUMBER = 1
      final val SLOT_NAME_FIELD_NUMBER = 2
      final val SLOT_VARIABLE_NODE_ID_FIELD_NUMBER = 3
      def of(
        originalVariableNodeId: _root_.scala.Int,
        slotName: _root_.scala.Predef.String,
        slotVariableNodeId: _root_.scala.Int
      ): _root_.tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SlotVariableReference = _root_.tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SlotVariableReference(
        originalVariableNodeId,
        slotName,
        slotVariableNodeId
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.TrackableObjectGraph.TrackableObject.SlotVariableReference])
    }
    
    implicit class TrackableObjectLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject](_l) {
      def children: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.ObjectReference]] = field(_.children)((c_, f_) => c_.copy(children = f_))
      def attributes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SerializedTensor]] = field(_.attributes)((c_, f_) => c_.copy(attributes = f_))
      def slotVariables: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SlotVariableReference]] = field(_.slotVariables)((c_, f_) => c_.copy(slotVariables = f_))
      def registeredSaver: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.trackable_object_graph.RegisteredSaver] = field(_.getRegisteredSaver)((c_, f_) => c_.copy(registeredSaver = _root_.scala.Option(f_)))
      def optionalRegisteredSaver: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tensorboard.trackable_object_graph.RegisteredSaver]] = field(_.registeredSaver)((c_, f_) => c_.copy(registeredSaver = f_))
      def hasCheckpointValues: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getHasCheckpointValues)((c_, f_) => c_.copy(hasCheckpointValues = _root_.scala.Option(f_)))
      def optionalHasCheckpointValues: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.hasCheckpointValues)((c_, f_) => c_.copy(hasCheckpointValues = f_))
    }
    final val CHILDREN_FIELD_NUMBER = 1
    final val ATTRIBUTES_FIELD_NUMBER = 2
    final val SLOT_VARIABLES_FIELD_NUMBER = 3
    final val REGISTERED_SAVER_FIELD_NUMBER = 4
    final val HAS_CHECKPOINT_VALUES_FIELD_NUMBER = 5
    @transient
    private[trackable_object_graph] val _typemapper_hasCheckpointValues: _root_.scalapb.TypeMapper[com.google.protobuf.wrappers.BoolValue, _root_.scala.Boolean] = implicitly[_root_.scalapb.TypeMapper[com.google.protobuf.wrappers.BoolValue, _root_.scala.Boolean]]
    def of(
      children: _root_.scala.Seq[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.ObjectReference],
      attributes: _root_.scala.Seq[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SerializedTensor],
      slotVariables: _root_.scala.Seq[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject.SlotVariableReference],
      registeredSaver: _root_.scala.Option[tensorboard.trackable_object_graph.RegisteredSaver],
      hasCheckpointValues: _root_.scala.Option[_root_.scala.Boolean]
    ): _root_.tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject = _root_.tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject(
      children,
      attributes,
      slotVariables,
      registeredSaver,
      hasCheckpointValues
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.TrackableObjectGraph.TrackableObject])
  }
  
  implicit class TrackableObjectGraphLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.trackable_object_graph.TrackableObjectGraph]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.trackable_object_graph.TrackableObjectGraph](_l) {
    def nodes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject]] = field(_.nodes)((c_, f_) => c_.copy(nodes = f_))
  }
  final val NODES_FIELD_NUMBER = 1
  def of(
    nodes: _root_.scala.Seq[tensorboard.trackable_object_graph.TrackableObjectGraph.TrackableObject]
  ): _root_.tensorboard.trackable_object_graph.TrackableObjectGraph = _root_.tensorboard.trackable_object_graph.TrackableObjectGraph(
    nodes
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.TrackableObjectGraph])
}
