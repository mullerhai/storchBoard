// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorboard.cpp_shape_inference

@SerialVersionUID(0L)
final case class CppShapeInferenceInputsNeeded(
    inputTensorsNeeded: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    inputTensorsAsShapesNeeded: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CppShapeInferenceInputsNeeded] {
    private[this] def inputTensorsNeededSerializedSize = {
      if (__inputTensorsNeededSerializedSizeField == 0) __inputTensorsNeededSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        inputTensorsNeeded.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(__i))
        __s
      }
      __inputTensorsNeededSerializedSizeField
    }
    @transient private[this] var __inputTensorsNeededSerializedSizeField: _root_.scala.Int = 0
    private[this] def inputTensorsAsShapesNeededSerializedSize = {
      if (__inputTensorsAsShapesNeededSerializedSizeField == 0) __inputTensorsAsShapesNeededSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        inputTensorsAsShapesNeeded.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(__i))
        __s
      }
      __inputTensorsAsShapesNeededSerializedSizeField
    }
    @transient private[this] var __inputTensorsAsShapesNeededSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (inputTensorsNeeded.nonEmpty) {
        val __localsize = inputTensorsNeededSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      if (inputTensorsAsShapesNeeded.nonEmpty) {
        val __localsize = inputTensorsAsShapesNeededSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      if (inputTensorsNeeded.nonEmpty) {
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(inputTensorsNeededSerializedSize)
        inputTensorsNeeded.foreach(_output__.writeInt32NoTag)
      };
      if (inputTensorsAsShapesNeeded.nonEmpty) {
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(inputTensorsAsShapesNeededSerializedSize)
        inputTensorsAsShapesNeeded.foreach(_output__.writeInt32NoTag)
      };
      unknownFields.writeTo(_output__)
    }
    def clearInputTensorsNeeded = copy(inputTensorsNeeded = _root_.scala.Seq.empty)
    def addInputTensorsNeeded(__vs: _root_.scala.Int *): CppShapeInferenceInputsNeeded = addAllInputTensorsNeeded(__vs)
    def addAllInputTensorsNeeded(__vs: Iterable[_root_.scala.Int]): CppShapeInferenceInputsNeeded = copy(inputTensorsNeeded = inputTensorsNeeded ++ __vs)
    def withInputTensorsNeeded(__v: _root_.scala.Seq[_root_.scala.Int]): CppShapeInferenceInputsNeeded = copy(inputTensorsNeeded = __v)
    def clearInputTensorsAsShapesNeeded = copy(inputTensorsAsShapesNeeded = _root_.scala.Seq.empty)
    def addInputTensorsAsShapesNeeded(__vs: _root_.scala.Int *): CppShapeInferenceInputsNeeded = addAllInputTensorsAsShapesNeeded(__vs)
    def addAllInputTensorsAsShapesNeeded(__vs: Iterable[_root_.scala.Int]): CppShapeInferenceInputsNeeded = copy(inputTensorsAsShapesNeeded = inputTensorsAsShapesNeeded ++ __vs)
    def withInputTensorsAsShapesNeeded(__v: _root_.scala.Seq[_root_.scala.Int]): CppShapeInferenceInputsNeeded = copy(inputTensorsAsShapesNeeded = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => inputTensorsNeeded
        case 2 => inputTensorsAsShapesNeeded
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(inputTensorsNeeded.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 2 => _root_.scalapb.descriptors.PRepeated(inputTensorsAsShapesNeeded.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tensorboard.cpp_shape_inference.CppShapeInferenceInputsNeeded.type = tensorboard.cpp_shape_inference.CppShapeInferenceInputsNeeded
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.CppShapeInferenceInputsNeeded])
}

object CppShapeInferenceInputsNeeded extends scalapb.GeneratedMessageCompanion[tensorboard.cpp_shape_inference.CppShapeInferenceInputsNeeded] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.cpp_shape_inference.CppShapeInferenceInputsNeeded] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.cpp_shape_inference.CppShapeInferenceInputsNeeded = {
    val __inputTensorsNeeded: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    val __inputTensorsAsShapesNeeded: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __inputTensorsNeeded += _input__.readInt32()
        case 10 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __inputTensorsNeeded += _input__.readInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case 16 =>
          __inputTensorsAsShapesNeeded += _input__.readInt32()
        case 18 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __inputTensorsAsShapesNeeded += _input__.readInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tensorboard.cpp_shape_inference.CppShapeInferenceInputsNeeded(
        inputTensorsNeeded = __inputTensorsNeeded.result(),
        inputTensorsAsShapesNeeded = __inputTensorsAsShapesNeeded.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.cpp_shape_inference.CppShapeInferenceInputsNeeded] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tensorboard.cpp_shape_inference.CppShapeInferenceInputsNeeded(
        inputTensorsNeeded = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        inputTensorsAsShapesNeeded = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.cpp_shape_inference.CppShapeInferenceProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.cpp_shape_inference.CppShapeInferenceProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?]= throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?]= throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tensorboard.cpp_shape_inference.CppShapeInferenceInputsNeeded(
    inputTensorsNeeded = _root_.scala.Seq.empty,
    inputTensorsAsShapesNeeded = _root_.scala.Seq.empty
  )
  implicit class CppShapeInferenceInputsNeededLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.cpp_shape_inference.CppShapeInferenceInputsNeeded]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.cpp_shape_inference.CppShapeInferenceInputsNeeded](_l) {
    def inputTensorsNeeded: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.inputTensorsNeeded)((c_, f_) => c_.copy(inputTensorsNeeded = f_))
    def inputTensorsAsShapesNeeded: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.inputTensorsAsShapesNeeded)((c_, f_) => c_.copy(inputTensorsAsShapesNeeded = f_))
  }
  final val INPUT_TENSORS_NEEDED_FIELD_NUMBER = 1
  final val INPUT_TENSORS_AS_SHAPES_NEEDED_FIELD_NUMBER = 2
  def of(
    inputTensorsNeeded: _root_.scala.Seq[_root_.scala.Int],
    inputTensorsAsShapesNeeded: _root_.scala.Seq[_root_.scala.Int]
  ): _root_.tensorboard.cpp_shape_inference.CppShapeInferenceInputsNeeded = _root_.tensorboard.cpp_shape_inference.CppShapeInferenceInputsNeeded(
    inputTensorsNeeded,
    inputTensorsAsShapesNeeded
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.CppShapeInferenceInputsNeeded])
}
