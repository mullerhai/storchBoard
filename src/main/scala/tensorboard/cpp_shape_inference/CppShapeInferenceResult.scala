// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package tensorboard.cpp_shape_inference

import tensorflow.framework.full_type.FullTypeDef
import tensorflow.framework.tensor_shape.TensorShapeProto
import tensorflow.framework.types.DataType
import tensorflow.framework.{full_type, tensor_shape, types}

/** DISABLED.IfChange
  */
@SerialVersionUID(0L)
final case class CppShapeInferenceResult(
                                          shape: _root_.scala.Option[TensorShapeProto] = _root_.scala.None,
                                          handleData: _root_.scala.Option[tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleData] = _root_.scala.None,
                                          unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CppShapeInferenceResult] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (shape.isDefined) {
        val __value = shape.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (handleData.isDefined) {
        val __value = handleData.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      shape.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      handleData.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getShape: TensorShapeProto = shape.getOrElse(tensor_shape.TensorShapeProto.defaultInstance)
    def clearShape: CppShapeInferenceResult = copy(shape = _root_.scala.None)
    def withShape(__v: TensorShapeProto): CppShapeInferenceResult = copy(shape = Option(__v))
    def getHandleData: tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleData = handleData.getOrElse(tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleData.defaultInstance)
    def clearHandleData: CppShapeInferenceResult = copy(handleData = _root_.scala.None)
    def withHandleData(__v: tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleData): CppShapeInferenceResult = copy(handleData = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => shape.orNull
        case 4 => handleData.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => shape.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => handleData.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tensorboard.cpp_shape_inference.CppShapeInferenceResult.type = tensorboard.cpp_shape_inference.CppShapeInferenceResult
    // @@protoc_insertion_point(GeneratedMessage[tensorboard.CppShapeInferenceResult])
}

object CppShapeInferenceResult extends scalapb.GeneratedMessageCompanion[tensorboard.cpp_shape_inference.CppShapeInferenceResult] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.cpp_shape_inference.CppShapeInferenceResult] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.cpp_shape_inference.CppShapeInferenceResult = {
    var __shape: _root_.scala.Option[TensorShapeProto] = _root_.scala.None
    var __handleData: _root_.scala.Option[tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleData] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __shape = _root_.scala.Option(__shape.fold(_root_.scalapb.LiteParser.readMessage[TensorShapeProto](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __handleData = _root_.scala.Option(__handleData.fold(_root_.scalapb.LiteParser.readMessage[tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleData](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tensorboard.cpp_shape_inference.CppShapeInferenceResult(
        shape = __shape,
        handleData = __handleData,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.cpp_shape_inference.CppShapeInferenceResult] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tensorboard.cpp_shape_inference.CppShapeInferenceResult(
        shape = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[TensorShapeProto]]),
        handleData = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleData]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.cpp_shape_inference.CppShapeInferenceProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.cpp_shape_inference.CppShapeInferenceProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = tensor_shape.TensorShapeProto
      case 4 => __out = tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleData
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleShapeAndType,
      _root_.tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleData
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tensorboard.cpp_shape_inference.CppShapeInferenceResult(
    shape = _root_.scala.None,
    handleData = _root_.scala.None
  )
  @SerialVersionUID(0L)
  final case class HandleShapeAndType(
                                       shape: _root_.scala.Option[TensorShapeProto] = _root_.scala.None,
                                       dtype: DataType = DataType.DT_INVALID,
                                       `type`: _root_.scala.Option[FullTypeDef] = _root_.scala.None,
                                       unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[HandleShapeAndType] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (shape.isDefined) {
          val __value = shape.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        
        {
          val __value = dtype.value
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value)
          }
        };
        if (`type`.isDefined) {
          val __value = `type`.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        shape.foreach { __v =>
          val __m = __v
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        {
          val __v = dtype.value
          if (__v != 0) {
            _output__.writeEnum(2, __v)
          }
        };
        `type`.foreach { __v =>
          val __m = __v
          _output__.writeTag(4, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def getShape: TensorShapeProto = shape.getOrElse(tensor_shape.TensorShapeProto.defaultInstance)
      def clearShape: HandleShapeAndType = copy(shape = _root_.scala.None)
      def withShape(__v: TensorShapeProto): HandleShapeAndType = copy(shape = Option(__v))
      def withDtype(__v: DataType): HandleShapeAndType = copy(dtype = __v)
      def getType: FullTypeDef = `type`.getOrElse(FullTypeDef.defaultInstance)
      def clearType: HandleShapeAndType = copy(`type` = _root_.scala.None)
      def withType(__v: FullTypeDef): HandleShapeAndType = copy(`type` = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => shape.orNull
          case 2 => {
            val __t = dtype.javaValueDescriptor
            if (__t.getNumber() != 0) __t else null
          }
          case 4 => `type`.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => shape.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => _root_.scalapb.descriptors.PEnum(dtype.scalaValueDescriptor)
          case 4 => `type`.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleShapeAndType.type = tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleShapeAndType
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.CppShapeInferenceResult.HandleShapeAndType])
  }
  
  object HandleShapeAndType extends scalapb.GeneratedMessageCompanion[tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleShapeAndType] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleShapeAndType] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleShapeAndType = {
      var __shape: _root_.scala.Option[TensorShapeProto] = _root_.scala.None
      var __dtype: DataType = types.DataType.DT_INVALID
      var __type: _root_.scala.Option[FullTypeDef] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __shape = _root_.scala.Option(__shape.fold(_root_.scalapb.LiteParser.readMessage[TensorShapeProto](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 16 =>
            __dtype = types.DataType.fromValue(_input__.readEnum())
          case 34 =>
            __type = _root_.scala.Option(__type.fold(_root_.scalapb.LiteParser.readMessage[FullTypeDef](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleShapeAndType(
          shape = __shape,
          dtype = __dtype,
          `type` = __type,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleShapeAndType] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleShapeAndType(
          shape = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[TensorShapeProto]]),
          dtype = types.DataType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(types.DataType.DT_INVALID.scalaValueDescriptor).number),
          `type` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[FullTypeDef]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.cpp_shape_inference.CppShapeInferenceResult.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.cpp_shape_inference.CppShapeInferenceResult.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = tensor_shape.TensorShapeProto
        case 4 => __out = full_type.FullTypeDef
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => types.DataType
      }
    }
    lazy val defaultInstance = tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleShapeAndType(
      shape = _root_.scala.None,
      dtype = types.DataType.DT_INVALID,
      `type` = _root_.scala.None
    )
    implicit class HandleShapeAndTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleShapeAndType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleShapeAndType](_l) {
      def shape: _root_.scalapb.lenses.Lens[UpperPB, TensorShapeProto] = field(_.getShape)((c_, f_) => c_.copy(shape = _root_.scala.Option(f_)))
      def optionalShape: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[TensorShapeProto]] = field(_.shape)((c_, f_) => c_.copy(shape = f_))
      def dtype: _root_.scalapb.lenses.Lens[UpperPB, DataType] = field(_.dtype)((c_, f_) => c_.copy(dtype = f_))
      def `type`: _root_.scalapb.lenses.Lens[UpperPB, FullTypeDef] = field(_.getType)((c_, f_) => c_.copy(`type` = _root_.scala.Option(f_)))
      def optionalType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[FullTypeDef]] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    }
    final val SHAPE_FIELD_NUMBER = 1
    final val DTYPE_FIELD_NUMBER = 2
    final val TYPE_FIELD_NUMBER = 4
    def of(
            shape: _root_.scala.Option[TensorShapeProto],
            dtype: DataType,
            `type`: _root_.scala.Option[FullTypeDef]
    ): _root_.tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleShapeAndType = _root_.tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleShapeAndType(
      shape,
      dtype,
      `type`
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.CppShapeInferenceResult.HandleShapeAndType])
  }
  
  /** @param shapeAndType
    *   Only valid if &lt;is_set&gt;.
    */
  @SerialVersionUID(0L)
  final case class HandleData(
      isSet: _root_.scala.Boolean = false,
      shapeAndType: _root_.scala.Seq[tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleShapeAndType] = _root_.scala.Seq.empty,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[HandleData] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = isSet
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(1, __value)
          }
        };
        shapeAndType.foreach { __item =>
          val __value = __item
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = isSet
          if (__v != false) {
            _output__.writeBool(1, __v)
          }
        };
        shapeAndType.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withIsSet(__v: _root_.scala.Boolean): HandleData = copy(isSet = __v)
      def clearShapeAndType = copy(shapeAndType = _root_.scala.Seq.empty)
      def addShapeAndType(__vs: tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleShapeAndType *): HandleData = addAllShapeAndType(__vs)
      def addAllShapeAndType(__vs: Iterable[tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleShapeAndType]): HandleData = copy(shapeAndType = shapeAndType ++ __vs)
      def withShapeAndType(__v: _root_.scala.Seq[tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleShapeAndType]): HandleData = copy(shapeAndType = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = isSet
            if (__t != false) __t else null
          }
          case 2 => shapeAndType
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PBoolean(isSet)
          case 2 => _root_.scalapb.descriptors.PRepeated(shapeAndType.iterator.map(_.toPMessage).toVector)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleData.type = tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleData
      // @@protoc_insertion_point(GeneratedMessage[tensorboard.CppShapeInferenceResult.HandleData])
  }
  
  object HandleData extends scalapb.GeneratedMessageCompanion[tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleData] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleData] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleData = {
      var __isSet: _root_.scala.Boolean = false
      val __shapeAndType: _root_.scala.collection.immutable.VectorBuilder[tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleShapeAndType] = new _root_.scala.collection.immutable.VectorBuilder[tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleShapeAndType]
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __isSet = _input__.readBool()
          case 18 =>
            __shapeAndType += _root_.scalapb.LiteParser.readMessage[tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleShapeAndType](_input__)
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleData(
          isSet = __isSet,
          shapeAndType = __shapeAndType.result(),
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleData] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleData(
          isSet = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
          shapeAndType = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleShapeAndType]]).getOrElse(_root_.scala.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorboard.cpp_shape_inference.CppShapeInferenceResult.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorboard.cpp_shape_inference.CppShapeInferenceResult.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleShapeAndType
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleData(
      isSet = false,
      shapeAndType = _root_.scala.Seq.empty
    )
    implicit class HandleDataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleData]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleData](_l) {
      def isSet: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.isSet)((c_, f_) => c_.copy(isSet = f_))
      def shapeAndType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleShapeAndType]] = field(_.shapeAndType)((c_, f_) => c_.copy(shapeAndType = f_))
    }
    final val IS_SET_FIELD_NUMBER = 1
    final val SHAPE_AND_TYPE_FIELD_NUMBER = 2
    def of(
      isSet: _root_.scala.Boolean,
      shapeAndType: _root_.scala.Seq[tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleShapeAndType]
    ): _root_.tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleData = _root_.tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleData(
      isSet,
      shapeAndType
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.CppShapeInferenceResult.HandleData])
  }
  
  implicit class CppShapeInferenceResultLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.cpp_shape_inference.CppShapeInferenceResult]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorboard.cpp_shape_inference.CppShapeInferenceResult](_l) {
    def shape: _root_.scalapb.lenses.Lens[UpperPB, TensorShapeProto] = field(_.getShape)((c_, f_) => c_.copy(shape = _root_.scala.Option(f_)))
    def optionalShape: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[TensorShapeProto]] = field(_.shape)((c_, f_) => c_.copy(shape = f_))
    def handleData: _root_.scalapb.lenses.Lens[UpperPB, tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleData] = field(_.getHandleData)((c_, f_) => c_.copy(handleData = _root_.scala.Option(f_)))
    def optionalHandleData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleData]] = field(_.handleData)((c_, f_) => c_.copy(handleData = f_))
  }
  final val SHAPE_FIELD_NUMBER = 1
  final val HANDLE_DATA_FIELD_NUMBER = 4
  def of(
          shape: _root_.scala.Option[TensorShapeProto],
          handleData: _root_.scala.Option[tensorboard.cpp_shape_inference.CppShapeInferenceResult.HandleData]
  ): _root_.tensorboard.cpp_shape_inference.CppShapeInferenceResult = _root_.tensorboard.cpp_shape_inference.CppShapeInferenceResult(
    shape,
    handleData
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorboard.CppShapeInferenceResult])
}
